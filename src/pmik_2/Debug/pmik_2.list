
pmik_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000205c  0800df20  0800df20  0000ef20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff7c  0800ff7c  00011200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ff7c  0800ff7c  00010f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff84  0800ff84  00011200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff84  0800ff84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff88  0800ff88  00010f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800ff8c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000200  0801018c  00011200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a9c  0801018c  00011a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf0e  00000000  00000000  00011230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c40  00000000  00000000  0002d13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d8  00000000  00000000  00030d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142e  00000000  00000000  00032758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0f6  00000000  00000000  00033b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020aec  00000000  00000000  0004ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d393  00000000  00000000  0006f768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cafb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f44  00000000  00000000  0010cb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00114a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800df08 	.word	0x0800df08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800df08 	.word	0x0800df08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	4604      	mov	r4, r0
 8000eec:	4608      	mov	r0, r1
 8000eee:	4611      	mov	r1, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4623      	mov	r3, r4
 8000ef4:	80fb      	strh	r3, [r7, #6]
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80bb      	strh	r3, [r7, #4]
 8000efa:	460b      	mov	r3, r1
 8000efc:	807b      	strh	r3, [r7, #2]
 8000efe:	4613      	mov	r3, r2
 8000f00:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000f02:	88f8      	ldrh	r0, [r7, #6]
 8000f04:	88b9      	ldrh	r1, [r7, #4]
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	883c      	ldrh	r4, [r7, #0]
 8000f0a:	8b3b      	ldrh	r3, [r7, #24]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4623      	mov	r3, r4
 8000f10:	f000 fa88 	bl	8001424 <ST7735_FillRectangle>
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}

08000f1c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8000f26:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <fillScreen+0x2c>)
 8000f28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <fillScreen+0x30>)
 8000f2e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	460b      	mov	r3, r1
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff ffd2 	bl	8000ee4 <fillRect>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2000021c 	.word	0x2000021c
 8000f4c:	2000021e 	.word	0x2000021e

08000f50 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2104      	movs	r1, #4
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <ST7735_Select+0x14>)
 8000f5a:	f003 f9b7 	bl	80042cc <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020400 	.word	0x40020400

08000f68 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <ST7735_Unselect+0x14>)
 8000f72:	f003 f9ab 	bl	80042cc <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020400 	.word	0x40020400

08000f80 <ST7735_Reset>:

void ST7735_Reset()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2102      	movs	r1, #2
 8000f88:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <ST7735_Reset+0x24>)
 8000f8a:	f003 f99f 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f002 fee2 	bl	8003d58 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2102      	movs	r1, #2
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <ST7735_Reset+0x24>)
 8000f9a:	f003 f997 	bl	80042cc <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4807      	ldr	r0, [pc, #28]	@ (8000fd4 <ST7735_WriteCommand+0x2c>)
 8000fb8:	f003 f988 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000fbc:	1df9      	adds	r1, r7, #7
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <ST7735_WriteCommand+0x30>)
 8000fc6:	f006 f870 	bl	80070aa <HAL_SPI_Transmit>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	200002f8 	.word	0x200002f8

08000fdc <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4807      	ldr	r0, [pc, #28]	@ (8001008 <ST7735_WriteData+0x2c>)
 8000fec:	f003 f96e 	bl	80042cc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4804      	ldr	r0, [pc, #16]	@ (800100c <ST7735_WriteData+0x30>)
 8000ffc:	f006 f855 	bl	80070aa <HAL_SPI_Transmit>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40020400 	.word	0x40020400
 800100c:	200002f8 	.word	0x200002f8

08001010 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001022:	e034      	b.n	800108e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ffb9 	bl	8000fa8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	b29b      	uxth	r3, r3
 8001044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001048:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800104a:	7abb      	ldrb	r3, [r7, #10]
 800104c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001050:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001052:	7abb      	ldrb	r3, [r7, #10]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d008      	beq.n	800106a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001058:	7abb      	ldrb	r3, [r7, #10]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ffbd 	bl	8000fdc <ST7735_WriteData>
            addr += numArgs;
 8001062:	7abb      	ldrb	r3, [r7, #10]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4413      	add	r3, r2
 8001068:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800106a:	89bb      	ldrh	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00e      	beq.n	800108e <DisplayInit+0x7e>
            ms = *addr++;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800107a:	89bb      	ldrh	r3, [r7, #12]
 800107c:	2bff      	cmp	r3, #255	@ 0xff
 800107e:	d102      	bne.n	8001086 <DisplayInit+0x76>
 8001080:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001084:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001086:	89bb      	ldrh	r3, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fe65 	bl	8003d58 <HAL_Delay>
    while(numCommands--) {
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	1e5a      	subs	r2, r3, #1
 8001092:	73fa      	strb	r2, [r7, #15]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1c5      	bne.n	8001024 <DisplayInit+0x14>
        }
    }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4604      	mov	r4, r0
 80010ac:	4608      	mov	r0, r1
 80010ae:	4611      	mov	r1, r2
 80010b0:	461a      	mov	r2, r3
 80010b2:	4623      	mov	r3, r4
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	4603      	mov	r3, r0
 80010b8:	71bb      	strb	r3, [r7, #6]
 80010ba:	460b      	mov	r3, r1
 80010bc:	717b      	strb	r3, [r7, #5]
 80010be:	4613      	mov	r3, r2
 80010c0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80010c2:	202a      	movs	r0, #42	@ 0x2a
 80010c4:	f7ff ff70 	bl	8000fa8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80010c8:	2300      	movs	r3, #0
 80010ca:	733b      	strb	r3, [r7, #12]
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <ST7735_SetAddressWindow+0x88>)
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4413      	add	r3, r2
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	737b      	strb	r3, [r7, #13]
 80010d8:	2300      	movs	r3, #0
 80010da:	73bb      	strb	r3, [r7, #14]
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <ST7735_SetAddressWindow+0x88>)
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	4413      	add	r3, r2
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2104      	movs	r1, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff74 	bl	8000fdc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80010f4:	202b      	movs	r0, #43	@ 0x2b
 80010f6:	f7ff ff57 	bl	8000fa8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <ST7735_SetAddressWindow+0x8c>)
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	4413      	add	r3, r2
 8001102:	b2db      	uxtb	r3, r3
 8001104:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <ST7735_SetAddressWindow+0x8c>)
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	793b      	ldrb	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2104      	movs	r1, #4
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5f 	bl	8000fdc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800111e:	202c      	movs	r0, #44	@ 0x2c
 8001120:	f7ff ff42 	bl	8000fa8 <ST7735_WriteCommand>
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	20000223 	.word	0x20000223
 8001130:	20000224 	.word	0x20000224

08001134 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800113e:	f7ff ff07 	bl	8000f50 <ST7735_Select>
    ST7735_Reset();
 8001142:	f7ff ff1d 	bl	8000f80 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001146:	480c      	ldr	r0, [pc, #48]	@ (8001178 <ST7735_Init+0x44>)
 8001148:	f7ff ff62 	bl	8001010 <DisplayInit>
    DisplayInit(init_cmds2);
 800114c:	480b      	ldr	r0, [pc, #44]	@ (800117c <ST7735_Init+0x48>)
 800114e:	f7ff ff5f 	bl	8001010 <DisplayInit>
    DisplayInit(init_cmds3);
 8001152:	480b      	ldr	r0, [pc, #44]	@ (8001180 <ST7735_Init+0x4c>)
 8001154:	f7ff ff5c 	bl	8001010 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <ST7735_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <ST7735_Init+0x54>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f810 	bl	800118c <ST7735_SetRotation>
    ST7735_Unselect();
 800116c:	f7ff fefc 	bl	8000f68 <ST7735_Unselect>

}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0800e040 	.word	0x0800e040
 800117c:	0800e078 	.word	0x0800e078
 8001180:	0800e088 	.word	0x0800e088
 8001184:	20000221 	.word	0x20000221
 8001188:	20000222 	.word	0x20000222

0800118c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b33      	ldr	r3, [pc, #204]	@ (8001270 <ST7735_SetRotation+0xe4>)
 80011a4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80011a6:	4b32      	ldr	r3, [pc, #200]	@ (8001270 <ST7735_SetRotation+0xe4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d84e      	bhi.n	800124c <ST7735_SetRotation+0xc0>
 80011ae:	a201      	add	r2, pc, #4	@ (adr r2, 80011b4 <ST7735_SetRotation+0x28>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	080011e7 	.word	0x080011e7
 80011bc:	08001209 	.word	0x08001209
 80011c0:	0800122b 	.word	0x0800122b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80011c4:	23c0      	movs	r3, #192	@ 0xc0
 80011c6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <ST7735_SetRotation+0xe8>)
 80011ca:	22a0      	movs	r2, #160	@ 0xa0
 80011cc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80011ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <ST7735_SetRotation+0xec>)
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80011d4:	4b29      	ldr	r3, [pc, #164]	@ (800127c <ST7735_SetRotation+0xf0>)
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <ST7735_SetRotation+0xf4>)
 80011da:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80011dc:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <ST7735_SetRotation+0xf8>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <ST7735_SetRotation+0xfc>)
 80011e2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80011e4:	e032      	b.n	800124c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80011e6:	23a0      	movs	r3, #160	@ 0xa0
 80011e8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80011ea:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <ST7735_SetRotation+0xec>)
 80011ec:	22a0      	movs	r2, #160	@ 0xa0
 80011ee:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80011f0:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <ST7735_SetRotation+0xe8>)
 80011f2:	2280      	movs	r2, #128	@ 0x80
 80011f4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80011f6:	4b21      	ldr	r3, [pc, #132]	@ (800127c <ST7735_SetRotation+0xf0>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <ST7735_SetRotation+0xfc>)
 80011fc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <ST7735_SetRotation+0xf8>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <ST7735_SetRotation+0xf4>)
 8001204:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001206:	e021      	b.n	800124c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <ST7735_SetRotation+0xe8>)
 800120e:	22a0      	movs	r2, #160	@ 0xa0
 8001210:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <ST7735_SetRotation+0xec>)
 8001214:	2280      	movs	r2, #128	@ 0x80
 8001216:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <ST7735_SetRotation+0xf0>)
 800121a:	781a      	ldrb	r2, [r3, #0]
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <ST7735_SetRotation+0xf4>)
 800121e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <ST7735_SetRotation+0xf8>)
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <ST7735_SetRotation+0xfc>)
 8001226:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001228:	e010      	b.n	800124c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800122a:	2360      	movs	r3, #96	@ 0x60
 800122c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <ST7735_SetRotation+0xec>)
 8001230:	22a0      	movs	r2, #160	@ 0xa0
 8001232:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <ST7735_SetRotation+0xe8>)
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <ST7735_SetRotation+0xf0>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <ST7735_SetRotation+0xfc>)
 8001240:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <ST7735_SetRotation+0xf8>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <ST7735_SetRotation+0xf4>)
 8001248:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800124a:	bf00      	nop
  }
  ST7735_Select();
 800124c:	f7ff fe80 	bl	8000f50 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001250:	2036      	movs	r0, #54	@ 0x36
 8001252:	f7ff fea9 	bl	8000fa8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001256:	f107 030f 	add.w	r3, r7, #15
 800125a:	2101      	movs	r1, #1
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff febd 	bl	8000fdc <ST7735_WriteData>
  ST7735_Unselect();
 8001262:	f7ff fe81 	bl	8000f68 <ST7735_Unselect>
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000220 	.word	0x20000220
 8001274:	2000021e 	.word	0x2000021e
 8001278:	2000021c 	.word	0x2000021c
 800127c:	20000221 	.word	0x20000221
 8001280:	20000223 	.word	0x20000223
 8001284:	20000222 	.word	0x20000222
 8001288:	20000224 	.word	0x20000224

0800128c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800128c:	b082      	sub	sp, #8
 800128e:	b590      	push	{r4, r7, lr}
 8001290:	b089      	sub	sp, #36	@ 0x24
 8001292:	af00      	add	r7, sp, #0
 8001294:	637b      	str	r3, [r7, #52]	@ 0x34
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	460b      	mov	r3, r1
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	b2d8      	uxtb	r0, r3
 80012a6:	88bb      	ldrh	r3, [r7, #4]
 80012a8:	b2d9      	uxtb	r1, r3
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80012b2:	4413      	add	r3, r2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b2dc      	uxtb	r4, r3
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80012c2:	4413      	add	r3, r2
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4622      	mov	r2, r4
 80012cc:	f7ff feea 	bl	80010a4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	e043      	b.n	800135e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80012d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	3b20      	subs	r3, #32
 80012dc:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 80012e0:	fb01 f303 	mul.w	r3, r1, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	440b      	add	r3, r1
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	e029      	b.n	800134c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00e      	beq.n	8001326 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001308:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	b29b      	uxth	r3, r3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	743b      	strb	r3, [r7, #16]
 8001312:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001314:	b2db      	uxtb	r3, r3
 8001316:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe5c 	bl	8000fdc <ST7735_WriteData>
 8001324:	e00f      	b.n	8001346 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001326:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800132a:	0a1b      	lsrs	r3, r3, #8
 800132c:	b29b      	uxth	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	733b      	strb	r3, [r7, #12]
 8001332:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001336:	b2db      	uxtb	r3, r3
 8001338:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2102      	movs	r1, #2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe4b 	bl	8000fdc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	3301      	adds	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001350:	461a      	mov	r2, r3
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4293      	cmp	r3, r2
 8001356:	d3cf      	bcc.n	80012f8 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3301      	adds	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001362:	461a      	mov	r2, r3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	4293      	cmp	r3, r2
 8001368:	d3b5      	bcc.n	80012d6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3724      	adds	r7, #36	@ 0x24
 8001370:	46bd      	mov	sp, r7
 8001372:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001376:	b002      	add	sp, #8
 8001378:	4770      	bx	lr
	...

0800137c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800137c:	b082      	sub	sp, #8
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af04      	add	r7, sp, #16
 8001384:	603a      	str	r2, [r7, #0]
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	4603      	mov	r3, r0
 800138a:	80fb      	strh	r3, [r7, #6]
 800138c:	460b      	mov	r3, r1
 800138e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001390:	f7ff fdde 	bl	8000f50 <ST7735_Select>

    while(*str) {
 8001394:	e033      	b.n	80013fe <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	7d3a      	ldrb	r2, [r7, #20]
 800139a:	4413      	add	r3, r2
 800139c:	4a1f      	ldr	r2, [pc, #124]	@ (800141c <ST7735_WriteString+0xa0>)
 800139e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013a2:	4293      	cmp	r3, r2
 80013a4:	db16      	blt.n	80013d4 <ST7735_WriteString+0x58>
            x = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80013aa:	7d7b      	ldrb	r3, [r7, #21]
 80013ac:	461a      	mov	r2, r3
 80013ae:	88bb      	ldrh	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 80013b4:	88bb      	ldrh	r3, [r7, #4]
 80013b6:	7d7a      	ldrb	r2, [r7, #21]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a19      	ldr	r2, [pc, #100]	@ (8001420 <ST7735_WriteString+0xa4>)
 80013bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013c0:	4293      	cmp	r3, r2
 80013c2:	da21      	bge.n	8001408 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b20      	cmp	r3, #32
 80013ca:	d103      	bne.n	80013d4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	603b      	str	r3, [r7, #0]
                continue;
 80013d2:	e014      	b.n	80013fe <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	88b9      	ldrh	r1, [r7, #4]
 80013da:	88f8      	ldrh	r0, [r7, #6]
 80013dc:	8c3b      	ldrh	r3, [r7, #32]
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	8bbb      	ldrh	r3, [r7, #28]
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f7ff ff4f 	bl	800128c <ST7735_WriteChar>
        x += font.width;
 80013ee:	7d3b      	ldrb	r3, [r7, #20]
 80013f0:	461a      	mov	r2, r3
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4413      	add	r3, r2
 80013f6:	80fb      	strh	r3, [r7, #6]
        str++;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1c7      	bne.n	8001396 <ST7735_WriteString+0x1a>
 8001406:	e000      	b.n	800140a <ST7735_WriteString+0x8e>
                break;
 8001408:	bf00      	nop
    }

    ST7735_Unselect();
 800140a:	f7ff fdad 	bl	8000f68 <ST7735_Unselect>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001418:	b002      	add	sp, #8
 800141a:	4770      	bx	lr
 800141c:	2000021c 	.word	0x2000021c
 8001420:	2000021e 	.word	0x2000021e

08001424 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	4604      	mov	r4, r0
 800142c:	4608      	mov	r0, r1
 800142e:	4611      	mov	r1, r2
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	4603      	mov	r3, r0
 8001438:	80bb      	strh	r3, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4a37      	ldr	r2, [pc, #220]	@ (8001524 <ST7735_FillRectangle+0x100>)
 8001446:	f9b2 2000 	ldrsh.w	r2, [r2]
 800144a:	4293      	cmp	r3, r2
 800144c:	da66      	bge.n	800151c <ST7735_FillRectangle+0xf8>
 800144e:	88bb      	ldrh	r3, [r7, #4]
 8001450:	4a35      	ldr	r2, [pc, #212]	@ (8001528 <ST7735_FillRectangle+0x104>)
 8001452:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001456:	4293      	cmp	r3, r2
 8001458:	da60      	bge.n	800151c <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 800145a:	88fa      	ldrh	r2, [r7, #6]
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	4413      	add	r3, r2
 8001460:	4a30      	ldr	r2, [pc, #192]	@ (8001524 <ST7735_FillRectangle+0x100>)
 8001462:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001466:	4293      	cmp	r3, r2
 8001468:	dd06      	ble.n	8001478 <ST7735_FillRectangle+0x54>
 800146a:	4b2e      	ldr	r3, [pc, #184]	@ (8001524 <ST7735_FillRectangle+0x100>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	b29a      	uxth	r2, r3
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001478:	88ba      	ldrh	r2, [r7, #4]
 800147a:	883b      	ldrh	r3, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	4a2a      	ldr	r2, [pc, #168]	@ (8001528 <ST7735_FillRectangle+0x104>)
 8001480:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001484:	4293      	cmp	r3, r2
 8001486:	dd06      	ble.n	8001496 <ST7735_FillRectangle+0x72>
 8001488:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <ST7735_FillRectangle+0x104>)
 800148a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148e:	b29a      	uxth	r2, r3
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001496:	f7ff fd5b 	bl	8000f50 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	b2d8      	uxtb	r0, r3
 800149e:	88bb      	ldrh	r3, [r7, #4]
 80014a0:	b2d9      	uxtb	r1, r3
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b2dc      	uxtb	r4, r3
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	883b      	ldrh	r3, [r7, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	3b01      	subs	r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4622      	mov	r2, r4
 80014c4:	f7ff fdee 	bl	80010a4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014c8:	8c3b      	ldrh	r3, [r7, #32]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	733b      	strb	r3, [r7, #12]
 80014d2:	8c3b      	ldrh	r3, [r7, #32]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2101      	movs	r1, #1
 80014dc:	4813      	ldr	r0, [pc, #76]	@ (800152c <ST7735_FillRectangle+0x108>)
 80014de:	f002 fef5 	bl	80042cc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014e2:	883b      	ldrh	r3, [r7, #0]
 80014e4:	80bb      	strh	r3, [r7, #4]
 80014e6:	e013      	b.n	8001510 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	80fb      	strh	r3, [r7, #6]
 80014ec:	e00a      	b.n	8001504 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80014ee:	f107 010c 	add.w	r1, r7, #12
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	2202      	movs	r2, #2
 80014f8:	480d      	ldr	r0, [pc, #52]	@ (8001530 <ST7735_FillRectangle+0x10c>)
 80014fa:	f005 fdd6 	bl	80070aa <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	3b01      	subs	r3, #1
 8001502:	80fb      	strh	r3, [r7, #6]
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f1      	bne.n	80014ee <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	3b01      	subs	r3, #1
 800150e:	80bb      	strh	r3, [r7, #4]
 8001510:	88bb      	ldrh	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1e8      	bne.n	80014e8 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8001516:	f7ff fd27 	bl	8000f68 <ST7735_Unselect>
 800151a:	e000      	b.n	800151e <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 800151c:	bf00      	nop
}
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	2000021c 	.word	0x2000021c
 8001528:	2000021e 	.word	0x2000021e
 800152c:	40020400 	.word	0x40020400
 8001530:	200002f8 	.word	0x200002f8

08001534 <BH1750_Init>:
/**
 * @brief Inicjalizacja czujnika BH1750.
 * @param hi2c - uchwyt do magistrali I2C
 * @param mode - tryb pracy (ciągły / jednorazowy / rozdzielczość)
 */
void BH1750_Init(I2C_HandleTypeDef *hi2c, BH1750_Mode mode) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af02      	add	r7, sp, #8
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
    bh1750_i2c = hi2c;
 8001540:	4a14      	ldr	r2, [pc, #80]	@ (8001594 <BH1750_Init+0x60>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
    bh1750_mode = mode;
 8001546:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <BH1750_Init+0x64>)
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	7013      	strb	r3, [r2, #0]

    uint8_t power_on = 0x01;  // Komenda "Power ON"
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
    uint8_t reset = 0x07;     // Komenda "Reset"
 8001550:	2307      	movs	r3, #7
 8001552:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Master_Transmit(bh1750_i2c, bh1750_address, &power_on, 1, 100);
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <BH1750_Init+0x60>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <BH1750_Init+0x68>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f107 020f 	add.w	r2, r7, #15
 8001562:	2364      	movs	r3, #100	@ 0x64
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2301      	movs	r3, #1
 8001568:	f003 f826 	bl	80045b8 <HAL_I2C_Master_Transmit>
    HAL_Delay(10); // Czekaj po włączeniu zasilania
 800156c:	200a      	movs	r0, #10
 800156e:	f002 fbf3 	bl	8003d58 <HAL_Delay>
    HAL_I2C_Master_Transmit(bh1750_i2c, bh1750_address, &reset, 1, 100);
 8001572:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <BH1750_Init+0x60>)
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <BH1750_Init+0x68>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	4619      	mov	r1, r3
 800157c:	f107 020e 	add.w	r2, r7, #14
 8001580:	2364      	movs	r3, #100	@ 0x64
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	f003 f817 	bl	80045b8 <HAL_I2C_Master_Transmit>
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000228 	.word	0x20000228
 8001598:	2000022c 	.word	0x2000022c
 800159c:	20000000 	.word	0x20000000

080015a0 <BH1750_StartMeasurement>:

/**
 * @brief Rozpoczęcie pomiaru w trybie jednorazowym (ONE_TIME_*)
 */
void BH1750_StartMeasurement(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af02      	add	r7, sp, #8
    uint8_t cmd = bh1750_mode;
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <BH1750_StartMeasurement+0x2c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(bh1750_i2c, bh1750_address, &cmd, 1, 100);
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <BH1750_StartMeasurement+0x30>)
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <BH1750_StartMeasurement+0x34>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	1dfa      	adds	r2, r7, #7
 80015b8:	2364      	movs	r3, #100	@ 0x64
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	f002 fffb 	bl	80045b8 <HAL_I2C_Master_Transmit>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000022c 	.word	0x2000022c
 80015d0:	20000228 	.word	0x20000228
 80015d4:	20000000 	.word	0x20000000

080015d8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73bb      	strb	r3, [r7, #14]

    /* Read the chip-id of bme280 sensor */
    rslt = bme280_get_regs(BME280_REG_CHIP_ID, &chip_id, 1, dev);
 80015e4:	f107 010e 	add.w	r1, r7, #14
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	20d0      	movs	r0, #208	@ 0xd0
 80015ee:	f000 f823 	bl	8001638 <bme280_get_regs>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]

    /* Check for chip id validity */
    if (rslt == BME280_OK)
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <bme280_init+0x54>
    {
        if (chip_id == BME280_CHIP_ID)
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
 8001600:	2b60      	cmp	r3, #96	@ 0x60
 8001602:	d111      	bne.n	8001628 <bme280_init+0x50>
        {
            dev->chip_id = chip_id;
 8001604:	7bba      	ldrb	r2, [r7, #14]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	701a      	strb	r2, [r3, #0]

            /* Reset the sensor */
            rslt = bme280_soft_reset(dev);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f958 	bl	80018c0 <bme280_soft_reset>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME280_OK)
 8001614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d107      	bne.n	800162c <bme280_init+0x54>
            {
                /* Read the calibration data */
                rslt = get_calib_data(dev);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f001 f83f 	bl	80026a0 <get_calib_data>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	e001      	b.n	800162c <bme280_init+0x54>
            }
        }
        else
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8001628:	23fc      	movs	r3, #252	@ 0xfc
 800162a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f001 f9c0 	bl	80029ce <null_ptr_check>
 800164e:	4603      	mov	r3, r0
 8001650:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BME280_OK) && (reg_data != NULL))
 8001652:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d11e      	bne.n	8001698 <bme280_get_regs+0x60>
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d01b      	beq.n	8001698 <bme280_get_regs+0x60>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	785b      	ldrb	r3, [r3, #1]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d003      	beq.n	8001670 <bme280_get_regs+0x38>
        {
            reg_addr = reg_addr | 0x80;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800166e:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68dc      	ldr	r4, [r3, #12]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	7bf8      	ldrb	r0, [r7, #15]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	47a0      	blx	r4
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	721a      	strb	r2, [r3, #8]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <bme280_get_regs+0x64>
        {
            rslt = BME280_E_COMM_FAIL;
 8001692:	23fe      	movs	r3, #254	@ 0xfe
 8001694:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8001696:	e001      	b.n	800169c <bme280_get_regs+0x64>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001698:	23ff      	movs	r3, #255	@ 0xff
 800169a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800169c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}

080016a8 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b08d      	sub	sp, #52	@ 0x34
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */
    uint32_t temp_len;
    uint32_t reg_addr_cnt;

    if (len > BME280_MAX_LEN)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0a      	cmp	r3, #10
 80016ba:	d901      	bls.n	80016c0 <bme280_set_regs+0x18>
    {
        len = BME280_MAX_LEN;
 80016bc:	230a      	movs	r3, #10
 80016be:	607b      	str	r3, [r7, #4]
    }

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f001 f984 	bl	80029ce <null_ptr_check>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80016cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d150      	bne.n	8001776 <bme280_set_regs+0xce>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d04d      	beq.n	8001776 <bme280_set_regs+0xce>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d04a      	beq.n	8001776 <bme280_set_regs+0xce>
    {
        if (len != 0)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d043      	beq.n	800176e <bme280_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	743b      	strb	r3, [r7, #16]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d014      	beq.n	800171e <bme280_set_regs+0x76>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f8:	e00d      	b.n	8001716 <bme280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	4413      	add	r3, r2
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	440b      	add	r3, r1
 8001708:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
 8001716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d3ed      	bcc.n	80016fa <bme280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d90b      	bls.n	800173c <bme280_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001724:	f107 0110 	add.w	r1, r7, #16
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 fffb 	bl	8002728 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	3b01      	subs	r3, #1
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800173a:	e001      	b.n	8001740 <bme280_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691c      	ldr	r4, [r3, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	7818      	ldrb	r0, [r3, #0]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f107 0110 	add.w	r1, r7, #16
 8001750:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001752:	47a0      	blx	r4
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	721a      	strb	r2, [r3, #8]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <bme280_set_regs+0xd6>
            {
                rslt = BME280_E_COMM_FAIL;
 8001766:	23fe      	movs	r3, #254	@ 0xfe
 8001768:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 800176c:	e007      	b.n	800177e <bme280_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800176e:	23fd      	movs	r3, #253	@ 0xfd
 8001770:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (len != 0)
 8001774:	e003      	b.n	800177e <bme280_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001776:	23ff      	movs	r3, #255	@ 0xff
 8001778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800177c:	e000      	b.n	8001780 <bme280_set_regs+0xd8>
        if (len != 0)
 800177e:	bf00      	nop
    }

    return rslt;
 8001780:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001784:	4618      	mov	r0, r3
 8001786:	3734      	adds	r7, #52	@ 0x34
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}

0800178c <bme280_set_sensor_settings>:
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings,
                                  const struct bme280_settings *settings,
                                  struct bme280_dev *dev)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t sensor_mode;

    if (settings != NULL)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d03c      	beq.n	800181a <bme280_set_sensor_settings+0x8e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80017a0:	f107 0316 	add.w	r3, r7, #22
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f86a 	bl	8001880 <bme280_get_sensor_mode>
 80017ac:	4603      	mov	r3, r0
 80017ae:	75fb      	strb	r3, [r7, #23]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_POWERMODE_SLEEP))
 80017b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <bme280_set_sensor_settings+0x3c>
 80017b8:	7dbb      	ldrb	r3, [r7, #22]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <bme280_set_sensor_settings+0x3c>
        {
            rslt = put_device_to_sleep(dev);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fb5d 	bl	8001e7e <put_device_to_sleep>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BME280_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d126      	bne.n	800181e <bme280_set_sensor_settings+0x92>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	4619      	mov	r1, r3
 80017d4:	2007      	movs	r0, #7
 80017d6:	f001 f8de 	bl	8002996 <are_settings_changed>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <bme280_set_sensor_settings+0x64>
            {
                rslt = set_osr_settings(desired_settings, settings, dev);
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f951 	bl	8001a8e <set_osr_settings>
 80017ec:	4603      	mov	r3, r0
 80017ee:	75fb      	strb	r3, [r7, #23]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80017f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d112      	bne.n	800181e <bme280_set_sensor_settings+0x92>
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4619      	mov	r1, r3
 80017fc:	2018      	movs	r0, #24
 80017fe:	f001 f8ca 	bl	8002996 <are_settings_changed>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00a      	beq.n	800181e <bme280_set_sensor_settings+0x92>
            {
                rslt = set_filter_standby_settings(desired_settings, settings, dev);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f9da 	bl	8001bc8 <set_filter_standby_settings>
 8001814:	4603      	mov	r3, r0
 8001816:	75fb      	strb	r3, [r7, #23]
 8001818:	e001      	b.n	800181e <bme280_set_sensor_settings+0x92>
            }
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800181a:	23ff      	movs	r3, #255	@ 0xff
 800181c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800181e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	6039      	str	r1, [r7, #0]
 8001834:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001836:	f107 030e 	add.w	r3, r7, #14
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f81f 	bl	8001880 <bme280_get_sensor_mode>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]

    /* If the sensor is not in sleep mode put the device to sleep
     * mode
     */
    if ((rslt == BME280_OK) && (last_set_mode != BME280_POWERMODE_SLEEP))
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d107      	bne.n	800185e <bme280_set_sensor_mode+0x34>
 800184e:	7bbb      	ldrb	r3, [r7, #14]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <bme280_set_sensor_mode+0x34>
    {
        rslt = put_device_to_sleep(dev);
 8001854:	6838      	ldr	r0, [r7, #0]
 8001856:	f000 fb12 	bl	8001e7e <put_device_to_sleep>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the power mode */
    if (rslt == BME280_OK)
 800185e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <bme280_set_sensor_mode+0x4a>
    {
        rslt = write_power_mode(sensor_mode, dev);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fad4 	bl	8001e18 <write_power_mode>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (sensor_mode != NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00f      	beq.n	80018b0 <bme280_get_sensor_mode+0x30>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_REG_PWR_CTRL, sensor_mode, 1, dev);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	20f4      	movs	r0, #244	@ 0xf4
 8001898:	f7ff fece 	bl	8001638 <bme280_get_regs>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode to variable */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e001      	b.n	80018b4 <bme280_get_sensor_mode+0x34>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80018b0:	23ff      	movs	r3, #255	@ 0xff
 80018b2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_RESET;
 80018c8:	23e0      	movs	r3, #224	@ 0xe0
 80018ca:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 80018d0:	2305      	movs	r3, #5
 80018d2:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80018d4:	23b6      	movs	r3, #182	@ 0xb6
 80018d6:	72fb      	strb	r3, [r7, #11]

    /* Write the soft reset command in the sensor */
    rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80018d8:	f107 010b 	add.w	r1, r7, #11
 80018dc:	f107 000d 	add.w	r0, r7, #13
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f7ff fee0 	bl	80016a8 <bme280_set_regs>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d125      	bne.n	8001940 <bme280_soft_reset+0x80>
    {
        /* If NVM not copied yet, Wait for NVM to copy */
        do
        {
            /* As per data sheet - Table 1, startup time is 2 ms. */
            dev->delay_us(BME280_STARTUP_DELAY, dev->intf_ptr);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6852      	ldr	r2, [r2, #4]
 80018fc:	4611      	mov	r1, r2
 80018fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001902:	4798      	blx	r3
            rslt = bme280_get_regs(BME280_REG_STATUS, &status_reg, 1, dev);
 8001904:	f107 010c 	add.w	r1, r7, #12
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	20f3      	movs	r0, #243	@ 0xf3
 800190e:	f7ff fe93 	bl	8001638 <bme280_get_regs>
 8001912:	4603      	mov	r3, r0
 8001914:	73fb      	strb	r3, [r7, #15]

        } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <bme280_soft_reset+0x72>
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	1e5a      	subs	r2, r3, #1
 8001922:	73ba      	strb	r2, [r7, #14]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <bme280_soft_reset+0x72>
 8001928:	7b3b      	ldrb	r3, [r7, #12]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e0      	bne.n	80018f4 <bme280_soft_reset+0x34>

        if (status_reg & BME280_STATUS_IM_UPDATE)
 8001932:	7b3b      	ldrb	r3, [r7, #12]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <bme280_soft_reset+0x80>
        {
            rslt = BME280_E_NVM_COPY_FAILED;
 800193c:	23fa      	movs	r3, #250	@ 0xfa
 800193e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	@ 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]

    if (comp_data != NULL)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d021      	beq.n	80019ba <bme280_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_REG_DATA, reg_data, BME280_LEN_P_T_H_DATA, dev);
 8001976:	f107 011c 	add.w	r1, r7, #28
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2208      	movs	r2, #8
 800197e:	20f7      	movs	r0, #247	@ 0xf7
 8001980:	f7ff fe5a 	bl	8001638 <bme280_get_regs>
 8001984:	4603      	mov	r3, r0
 8001986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME280_OK)
 800198a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <bme280_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001992:	f107 0210 	add.w	r2, r7, #16
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f9f5 	bl	8001d8c <parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3318      	adds	r3, #24
 80019a6:	f107 0110 	add.w	r1, r7, #16
 80019aa:	7bf8      	ldrb	r0, [r7, #15]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	f000 f80d 	bl	80019cc <bme280_compensate_data>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80019b8:	e002      	b.n	80019c0 <bme280_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80019ba:	23ff      	movs	r3, #255	@ 0xff
 80019bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80019c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3728      	adds	r7, #40	@ 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	4603      	mov	r3, r0
 80019da:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d04b      	beq.n	8001a7e <bme280_compensate_data+0xb2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d048      	beq.n	8001a7e <bme280_compensate_data+0xb2>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d045      	beq.n	8001a7e <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00a      	beq.n	8001a3c <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f000 fa75 	bl	8001f18 <compensate_temperature>
 8001a2e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a32:	eef0 7a60 	vmov.f32	s15, s1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	ed83 7b02 	vstr	d7, [r3, #8]
        }

        if (sensor_comp & BME280_PRESS)
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00a      	beq.n	8001a5c <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	68b8      	ldr	r0, [r7, #8]
 8001a4a:	f000 fb39 	bl	80020c0 <compensate_pressure>
 8001a4e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a52:	eef0 7a60 	vmov.f32	s15, s1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	ed83 7b00 	vstr	d7, [r3]
        }

        if (sensor_comp & BME280_HUM)
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	68b8      	ldr	r0, [r7, #8]
 8001a6a:	f000 fcf9 	bl	8002460 <compensate_humidity>
 8001a6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a72:	eef0 7a60 	vmov.f32	s15, s1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 8001a7c:	e001      	b.n	8001a82 <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001a7e:	23ff      	movs	r3, #255	@ 0xff
 8001a80:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_SEL_OSR_HUM)
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	68b8      	ldr	r0, [r7, #8]
 8001aae:	f000 f815 	bl	8001adc <set_osr_humidity_settings>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (desired_settings & (BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP))
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f842 	bl	8001b50 <set_osr_press_temp_settings>
 8001acc:	4603      	mov	r3, r0
 8001ace:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_REG_CTRL_HUM;
 8001ae6:	23f2      	movs	r3, #242	@ 0xf2
 8001ae8:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	789b      	ldrb	r3, [r3, #2]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001af6:	f107 010e 	add.w	r1, r7, #14
 8001afa:	f107 000c 	add.w	r0, r7, #12
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f7ff fdd1 	bl	80016a8 <bme280_set_regs>
 8001b06:	4603      	mov	r3, r0
 8001b08:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d118      	bne.n	8001b44 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_REG_CTRL_MEAS;
 8001b12:	23f4      	movs	r3, #244	@ 0xf4
 8001b14:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001b16:	7b38      	ldrb	r0, [r7, #12]
 8001b18:	f107 010d 	add.w	r1, r7, #13
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f7ff fd8a 	bl	8001638 <bme280_get_regs>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d109      	bne.n	8001b44 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001b30:	f107 010d 	add.w	r1, r7, #13
 8001b34:	f107 000c 	add.w	r0, r7, #12
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f7ff fdb4 	bl	80016a8 <bme280_set_regs>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CTRL_MEAS;
 8001b5e:	23f4      	movs	r3, #244	@ 0xf4
 8001b60:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001b62:	7db8      	ldrb	r0, [r7, #22]
 8001b64:	f107 0115 	add.w	r1, r7, #21
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f7ff fd64 	bl	8001638 <bme280_get_regs>
 8001b70:	4603      	mov	r3, r0
 8001b72:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d11f      	bne.n	8001bbc <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_SEL_OSR_PRESS)
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8001b86:	f107 0315 	add.w	r3, r7, #21
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f890 	bl	8001cb2 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_SEL_OSR_TEMP)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8001b9c:	f107 0315 	add.w	r3, r7, #21
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f8a3 	bl	8001cee <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001ba8:	f107 0115 	add.w	r1, r7, #21
 8001bac:	f107 0016 	add.w	r0, r7, #22
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f7ff fd78 	bl	80016a8 <bme280_set_regs>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001bbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_CONFIG;
 8001bd6:	23f5      	movs	r3, #245	@ 0xf5
 8001bd8:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001bda:	7db8      	ldrb	r0, [r7, #22]
 8001bdc:	f107 0115 	add.w	r1, r7, #21
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f7ff fd28 	bl	8001638 <bme280_get_regs>
 8001be8:	4603      	mov	r3, r0
 8001bea:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11f      	bne.n	8001c34 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_SEL_FILTER)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001bfe:	f107 0315 	add.w	r3, r7, #21
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f81b 	bl	8001c40 <fill_filter_settings>
        }

        if (desired_settings & BME280_SEL_STANDBY)
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 8001c14:	f107 0315 	add.w	r3, r7, #21
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f82e 	bl	8001c7c <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001c20:	f107 0115 	add.w	r1, r7, #21
 8001c24:	f107 0016 	add.w	r0, r7, #22
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f7ff fd3c 	bl	80016a8 <bme280_set_regs>
 8001c30:	4603      	mov	r3, r0
 8001c32:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	f023 031c 	bic.w	r3, r3, #28
 8001c54:	b25a      	sxtb	r2, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	78db      	ldrb	r3, [r3, #3]
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	f003 031c 	and.w	r3, r3, #28
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	701a      	strb	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	b25a      	sxtb	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	791b      	ldrb	r3, [r3, #4]
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	015b      	lsls	r3, r3, #5
 8001c9a:	b25b      	sxtb	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	701a      	strb	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	f023 031c 	bic.w	r3, r3, #28
 8001cc6:	b25a      	sxtb	r2, r3
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 031c 	and.w	r3, r3, #28
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	701a      	strb	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b25b      	sxtb	r3, r3
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	b25a      	sxtb	r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	b25b      	sxtb	r3, r3
 8001d0a:	015b      	lsls	r3, r3, #5
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	b25b      	sxtb	r3, r3
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	701a      	strb	r2, [r3, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * bme280_settings structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	109b      	asrs	r3, r3, #2
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3302      	adds	r3, #2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3303      	adds	r3, #3
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	109b      	asrs	r3, r3, #2
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3303      	adds	r3, #3
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	711a      	strb	r2, [r3, #4]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << BME280_12_BIT_SHIFT;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	031b      	lsls	r3, r3, #12
 8001d9c:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << BME280_4_BIT_SHIFT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3301      	adds	r3, #1
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> BME280_4_BIT_SHIFT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3302      	adds	r3, #2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << BME280_12_BIT_SHIFT;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3303      	adds	r3, #3
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	031b      	lsls	r3, r3, #12
 8001dca:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << BME280_4_BIT_SHIFT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> BME280_4_BIT_SHIFT;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3305      	adds	r3, #5
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << BME280_8_BIT_SHIFT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3306      	adds	r3, #6
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3307      	adds	r3, #7
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	609a      	str	r2, [r3, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_PWR_CTRL;
 8001e24:	23f4      	movs	r3, #244	@ 0xf4
 8001e26:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001e28:	7bb8      	ldrb	r0, [r7, #14]
 8001e2a:	f107 010d 	add.w	r1, r7, #13
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f7ff fc01 	bl	8001638 <bme280_get_regs>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d117      	bne.n	8001e72 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001e42:	7b7b      	ldrb	r3, [r7, #13]
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	b25a      	sxtb	r2, r3
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001e5e:	f107 010d 	add.w	r1, r7, #13
 8001e62:	f107 000e 	add.w	r0, r7, #14
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f7ff fc1d 	bl	80016a8 <bme280_set_regs>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_REG_CTRL_HUM, reg_data, 4, dev);
 8001e86:	f107 0110 	add.w	r1, r7, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	20f2      	movs	r0, #242	@ 0xf2
 8001e90:	f7ff fbd2 	bl	8001638 <bme280_get_regs>
 8001e94:	4603      	mov	r3, r0
 8001e96:	75fb      	strb	r3, [r7, #23]

    if (rslt == BME280_OK)
 8001e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d118      	bne.n	8001ed2 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8001ea0:	f107 0208 	add.w	r2, r7, #8
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff3a 	bl	8001d24 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff fd05 	bl	80018c0 <bme280_soft_reset>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	75fb      	strb	r3, [r7, #23]

        if (rslt == BME280_OK)
 8001eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f808 	bl	8001ede <reload_device_settings>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	201f      	movs	r0, #31
 8001eee:	f7ff fdce 	bl	8001a8e <set_osr_settings>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME280_OK)
 8001ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	201f      	movs	r0, #31
 8001f04:	f7ff fe60 	bl	8001bc8 <set_filter_standby_settings>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b08c      	sub	sp, #48	@ 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	4b5f      	ldr	r3, [pc, #380]	@ (80020a4 <compensate_temperature+0x18c>)
 8001f28:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b5d      	ldr	r3, [pc, #372]	@ (80020a8 <compensate_temperature+0x190>)
 8001f32:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = (((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe faea 	bl	8000514 <__aeabi_ui2d>
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b59      	ldr	r3, [pc, #356]	@ (80020ac <compensate_temperature+0x194>)
 8001f46:	f7fe fc89 	bl	800085c <__aeabi_ddiv>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4614      	mov	r4, r2
 8001f50:	461d      	mov	r5, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fadc 	bl	8000514 <__aeabi_ui2d>
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	4b53      	ldr	r3, [pc, #332]	@ (80020b0 <compensate_temperature+0x198>)
 8001f62:	f7fe fc7b 	bl	800085c <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	f7fe f993 	bl	8000298 <__aeabi_dsub>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_t2);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fad7 	bl	8000534 <__aeabi_i2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f8e:	f7fe fb3b 	bl	8000608 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fab8 	bl	8000514 <__aeabi_ui2d>
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001fac:	f7fe fc56 	bl	800085c <__aeabi_ddiv>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe faa9 	bl	8000514 <__aeabi_ui2d>
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80020b4 <compensate_temperature+0x19c>)
 8001fc8:	f7fe fc48 	bl	800085c <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe f960 	bl	8000298 <__aeabi_dsub>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 8001fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fe4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fe8:	f7fe fb0e 	bl	8000608 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4614      	mov	r4, r2
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa9a 	bl	8000534 <__aeabi_i2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4620      	mov	r0, r4
 8002006:	4629      	mov	r1, r5
 8002008:	f7fe fafe 	bl	8000608 <__aeabi_dmul>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8002014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002018:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800201c:	f7fe f93e 	bl	800029c <__adddf3>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd9e 	bl	8000b68 <__aeabi_d2iz>
 800202c:	4602      	mov	r2, r0
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (var1 + var2) / 5120.0;
 8002032:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002036:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800203a:	f7fe f92f 	bl	800029c <__adddf3>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <compensate_temperature+0x1a0>)
 800204c:	f7fe fc06 	bl	800085c <__aeabi_ddiv>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    if (temperature < temperature_min)
 8002058:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800205c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002060:	f7fe fd44 	bl	8000aec <__aeabi_dcmplt>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d004      	beq.n	8002074 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 800206a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800206e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8002072:	e00c      	b.n	800208e <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8002074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002078:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800207c:	f7fe fd54 	bl	8000b28 <__aeabi_dcmpgt>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8002086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800208a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    }

    return temperature;
 800208e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002092:	ec43 2b17 	vmov	d7, r2, r3
}
 8002096:	eeb0 0a47 	vmov.f32	s0, s14
 800209a:	eef0 0a67 	vmov.f32	s1, s15
 800209e:	3730      	adds	r7, #48	@ 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bdb0      	pop	{r4, r5, r7, pc}
 80020a4:	c0440000 	.word	0xc0440000
 80020a8:	40554000 	.word	0x40554000
 80020ac:	40d00000 	.word	0x40d00000
 80020b0:	40900000 	.word	0x40900000
 80020b4:	40c00000 	.word	0x40c00000
 80020b8:	40b40000 	.word	0x40b40000
 80020bc:	00000000 	.word	0x00000000

080020c0 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b08e      	sub	sp, #56	@ 0x38
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 80020ca:	a3d9      	add	r3, pc, #868	@ (adr r3, 8002430 <compensate_pressure+0x370>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double pressure_max = 110000.0;
 80020d4:	a3d8      	add	r3, pc, #864	@ (adr r3, 8002438 <compensate_pressure+0x378>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fa26 	bl	8000534 <__aeabi_i2d>
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020f0:	f7fe fbb4 	bl	800085c <__aeabi_ddiv>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	4bc1      	ldr	r3, [pc, #772]	@ (8002408 <compensate_pressure+0x348>)
 8002102:	f7fe f8c9 	bl	8000298 <__aeabi_dsub>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 800210e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002112:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002116:	f7fe fa77 	bl	8000608 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4614      	mov	r4, r2
 8002120:	461d      	mov	r5, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa03 	bl	8000534 <__aeabi_i2d>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe fa67 	bl	8000608 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4bb1      	ldr	r3, [pc, #708]	@ (800240c <compensate_pressure+0x34c>)
 8002148:	f7fe fb88 	bl	800085c <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f9ea 	bl	8000534 <__aeabi_i2d>
 8002160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002164:	f7fe fa50 	bl	8000608 <__aeabi_dmul>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	f7fe f892 	bl	800029c <__adddf3>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002180:	f7fe f88c 	bl	800029c <__adddf3>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	4b9f      	ldr	r3, [pc, #636]	@ (8002410 <compensate_pressure+0x350>)
 8002192:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002196:	f7fe fb61 	bl	800085c <__aeabi_ddiv>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4614      	mov	r4, r2
 80021a0:	461d      	mov	r5, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9c3 	bl	8000534 <__aeabi_i2d>
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b98      	ldr	r3, [pc, #608]	@ (8002414 <compensate_pressure+0x354>)
 80021b4:	f7fe fa28 	bl	8000608 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f7fe f86c 	bl	800029c <__adddf3>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f9ae 	bl	8000534 <__aeabi_i2d>
 80021d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021dc:	f7fe fa14 	bl	8000608 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ec:	f7fe fa0c 	bl	8000608 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	4b86      	ldr	r3, [pc, #536]	@ (8002418 <compensate_pressure+0x358>)
 80021fe:	f7fe fb2d 	bl	800085c <__aeabi_ddiv>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f98f 	bl	8000534 <__aeabi_i2d>
 8002216:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800221a:	f7fe f9f5 	bl	8000608 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800222a:	f7fe f837 	bl	800029c <__adddf3>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b77      	ldr	r3, [pc, #476]	@ (8002418 <compensate_pressure+0x358>)
 800223c:	f7fe fb0e 	bl	800085c <__aeabi_ddiv>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	4b6f      	ldr	r3, [pc, #444]	@ (800240c <compensate_pressure+0x34c>)
 800224e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002252:	f7fe fb03 	bl	800085c <__aeabi_ddiv>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	4b6e      	ldr	r3, [pc, #440]	@ (800241c <compensate_pressure+0x35c>)
 8002264:	f7fe f81a 	bl	800029c <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4614      	mov	r4, r2
 800226e:	461d      	mov	r5, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	88db      	ldrh	r3, [r3, #6]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f94d 	bl	8000514 <__aeabi_ui2d>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4620      	mov	r0, r4
 8002280:	4629      	mov	r1, r5
 8002282:	f7fe f9c1 	bl	8000608 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* Avoid exception caused by division by zero */
    if (var1 > (0.0))
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800229a:	f7fe fc45 	bl	8000b28 <__aeabi_dcmpgt>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80cd 	beq.w	8002440 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f932 	bl	8000514 <__aeabi_ui2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	f04f 0000 	mov.w	r0, #0
 80022b8:	4959      	ldr	r1, [pc, #356]	@ (8002420 <compensate_pressure+0x360>)
 80022ba:	f7fd ffed 	bl	8000298 <__aeabi_dsub>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	4b56      	ldr	r3, [pc, #344]	@ (8002424 <compensate_pressure+0x364>)
 80022cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022d0:	f7fe fac4 	bl	800085c <__aeabi_ddiv>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022dc:	f7fd ffdc 	bl	8000298 <__aeabi_dsub>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	a345      	add	r3, pc, #276	@ (adr r3, 8002400 <compensate_pressure+0x340>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe f98b 	bl	8000608 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022fe:	f7fe faad 	bl	800085c <__aeabi_ddiv>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f90f 	bl	8000534 <__aeabi_i2d>
 8002316:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800231a:	f7fe f975 	bl	8000608 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800232a:	f7fe f96d 	bl	8000608 <__aeabi_dmul>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4610      	mov	r0, r2
 8002334:	4619      	mov	r1, r3
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	4b3b      	ldr	r3, [pc, #236]	@ (8002428 <compensate_pressure+0x368>)
 800233c:	f7fe fa8e 	bl	800085c <__aeabi_ddiv>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f8f0 	bl	8000534 <__aeabi_i2d>
 8002354:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002358:	f7fe f956 	bl	8000608 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b28      	ldr	r3, [pc, #160]	@ (800240c <compensate_pressure+0x34c>)
 800236a:	f7fe fa77 	bl	800085c <__aeabi_ddiv>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8002376:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800237a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800237e:	f7fd ff8d 	bl	800029c <__adddf3>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4614      	mov	r4, r2
 8002388:	461d      	mov	r5, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8cf 	bl	8000534 <__aeabi_i2d>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4620      	mov	r0, r4
 800239c:	4629      	mov	r1, r5
 800239e:	f7fd ff7d 	bl	800029c <__adddf3>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <compensate_pressure+0x36c>)
 80023b0:	f7fe fa54 	bl	800085c <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023bc:	f7fd ff6e 	bl	800029c <__adddf3>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

        if (pressure < pressure_min)
 80023c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023d0:	f7fe fb8c 	bl	8000aec <__aeabi_dcmplt>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 80023da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80023e2:	e031      	b.n	8002448 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 80023e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023ec:	f7fe fb9c 	bl	8000b28 <__aeabi_dcmpgt>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d028      	beq.n	8002448 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 80023f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80023fe:	e023      	b.n	8002448 <compensate_pressure+0x388>
 8002400:	00000000 	.word	0x00000000
 8002404:	40b86a00 	.word	0x40b86a00
 8002408:	40ef4000 	.word	0x40ef4000
 800240c:	40e00000 	.word	0x40e00000
 8002410:	40100000 	.word	0x40100000
 8002414:	40f00000 	.word	0x40f00000
 8002418:	41200000 	.word	0x41200000
 800241c:	3ff00000 	.word	0x3ff00000
 8002420:	41300000 	.word	0x41300000
 8002424:	40b00000 	.word	0x40b00000
 8002428:	41e00000 	.word	0x41e00000
 800242c:	40300000 	.word	0x40300000
 8002430:	00000000 	.word	0x00000000
 8002434:	40dd4c00 	.word	0x40dd4c00
 8002438:	00000000 	.word	0x00000000
 800243c:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8002440:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002444:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    }

    return pressure;
 8002448:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800244c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002450:	eeb0 0a47 	vmov.f32	s0, s14
 8002454:	eef0 0a67 	vmov.f32	s1, s15
 8002458:	3738      	adds	r7, #56	@ 0x38
 800245a:	46bd      	mov	sp, r7
 800245c:	bdb0      	pop	{r4, r5, r7, pc}
 800245e:	bf00      	nop

08002460 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b094      	sub	sp, #80	@ 0x50
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double humidity_max = 100.0;
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b81      	ldr	r3, [pc, #516]	@ (8002680 <compensate_humidity+0x220>)
 800247c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f855 	bl	8000534 <__aeabi_i2d>
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	4b7d      	ldr	r3, [pc, #500]	@ (8002684 <compensate_humidity+0x224>)
 8002490:	f7fd ff02 	bl	8000298 <__aeabi_dsub>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f846 	bl	8000534 <__aeabi_i2d>
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	4b76      	ldr	r3, [pc, #472]	@ (8002688 <compensate_humidity+0x228>)
 80024ae:	f7fe f8ab 	bl	8000608 <__aeabi_dmul>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4614      	mov	r4, r2
 80024b8:	461d      	mov	r5, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f837 	bl	8000534 <__aeabi_i2d>
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	4b70      	ldr	r3, [pc, #448]	@ (800268c <compensate_humidity+0x22c>)
 80024cc:	f7fe f9c6 	bl	800085c <__aeabi_ddiv>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80024dc:	f7fe f894 	bl	8000608 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4620      	mov	r0, r4
 80024e6:	4629      	mov	r1, r5
 80024e8:	f7fd fed8 	bl	800029c <__adddf3>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    var3 = uncomp_data->humidity - var2;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe f80b 	bl	8000514 <__aeabi_ui2d>
 80024fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002502:	f7fd fec9 	bl	8000298 <__aeabi_dsub>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe f80d 	bl	8000534 <__aeabi_i2d>
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	4b5c      	ldr	r3, [pc, #368]	@ (8002690 <compensate_humidity+0x230>)
 8002520:	f7fe f99c 	bl	800085c <__aeabi_ddiv>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	7f1b      	ldrb	r3, [r3, #28]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd ffef 	bl	8000514 <__aeabi_ui2d>
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	4b56      	ldr	r3, [pc, #344]	@ (8002694 <compensate_humidity+0x234>)
 800253c:	f7fe f98e 	bl	800085c <__aeabi_ddiv>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800254c:	f7fe f85c 	bl	8000608 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	4b4e      	ldr	r3, [pc, #312]	@ (8002698 <compensate_humidity+0x238>)
 800255e:	f7fd fe9d 	bl	800029c <__adddf3>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd ffdf 	bl	8000534 <__aeabi_i2d>
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	4b46      	ldr	r3, [pc, #280]	@ (8002694 <compensate_humidity+0x234>)
 800257c:	f7fe f96e 	bl	800085c <__aeabi_ddiv>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800258c:	f7fe f83c 	bl	8000608 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800259c:	f7fe f834 	bl	8000608 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002698 <compensate_humidity+0x238>)
 80025ae:	f7fd fe75 	bl	800029c <__adddf3>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 80025ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025c2:	f7fe f821 	bl	8000608 <__aeabi_dmul>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4614      	mov	r4, r2
 80025cc:	461d      	mov	r5, r3
 80025ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025d6:	f7fe f817 	bl	8000608 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fe f811 	bl	8000608 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	7e1b      	ldrb	r3, [r3, #24]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd ff8e 	bl	8000514 <__aeabi_ui2d>
 80025f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025fc:	f7fe f804 	bl	8000608 <__aeabi_dmul>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	4b23      	ldr	r3, [pc, #140]	@ (800269c <compensate_humidity+0x23c>)
 800260e:	f7fe f925 	bl	800085c <__aeabi_ddiv>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	f04f 0000 	mov.w	r0, #0
 800261a:	491f      	ldr	r1, [pc, #124]	@ (8002698 <compensate_humidity+0x238>)
 800261c:	f7fd fe3c 	bl	8000298 <__aeabi_dsub>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002628:	f7fd ffee 	bl	8000608 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    if (humidity > humidity_max)
 8002634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002638:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800263c:	f7fe fa74 	bl	8000b28 <__aeabi_dcmpgt>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8002646:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800264a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800264e:	e00c      	b.n	800266a <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8002650:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002654:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002658:	f7fe fa48 	bl	8000aec <__aeabi_dcmplt>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8002662:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    }

    return humidity;
 800266a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800266e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002672:	eeb0 0a47 	vmov.f32	s0, s14
 8002676:	eef0 0a67 	vmov.f32	s1, s15
 800267a:	3750      	adds	r7, #80	@ 0x50
 800267c:	46bd      	mov	sp, r7
 800267e:	bdb0      	pop	{r4, r5, r7, pc}
 8002680:	40590000 	.word	0x40590000
 8002684:	40f2c000 	.word	0x40f2c000
 8002688:	40500000 	.word	0x40500000
 800268c:	40d00000 	.word	0x40d00000
 8002690:	40f00000 	.word	0x40f00000
 8002694:	41900000 	.word	0x41900000
 8002698:	3ff00000 	.word	0x3ff00000
 800269c:	41200000 	.word	0x41200000

080026a0 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	@ 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_REG_TEMP_PRESS_CALIB_DATA;
 80026a8:	2388      	movs	r3, #136	@ 0x88
 80026aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_LEN_TEMP_PRESS_CALIB_DATA] = { 0 };
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	615a      	str	r2, [r3, #20]
 80026c0:	831a      	strh	r2, [r3, #24]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_TEMP_PRESS_CALIB_DATA, dev);
 80026c2:	f107 010c 	add.w	r1, r7, #12
 80026c6:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	221a      	movs	r2, #26
 80026ce:	f7fe ffb3 	bl	8001638 <bme280_get_regs>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BME280_OK)
 80026d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11d      	bne.n	800271c <get_calib_data+0x7c>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f849 	bl	800277e <parse_temp_press_calib_data>
        reg_addr = BME280_REG_HUMIDITY_CALIB_DATA;
 80026ec:	23e1      	movs	r3, #225	@ 0xe1
 80026ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_HUMIDITY_CALIB_DATA, dev);
 80026f2:	f107 010c 	add.w	r1, r7, #12
 80026f6:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2207      	movs	r2, #7
 80026fe:	f7fe ff9b 	bl	8001638 <bme280_get_regs>
 8002702:	4603      	mov	r3, r0
 8002704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME280_OK)
 8002708:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <get_calib_data+0x7c>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f8ed 	bl	80028f6 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800271c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002720:	4618      	mov	r0, r3
 8002722:	3728      	adds	r7, #40	@ 0x28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8002736:	2301      	movs	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e015      	b.n	8002768 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	441a      	add	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	3b01      	subs	r3, #1
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	440b      	add	r3, r1
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	441a      	add	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	440b      	add	r3, r1
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d3e5      	bcc.n	800273c <interleave_reg_addr+0x14>
    }
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3318      	adds	r3, #24
 800278c:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3301      	adds	r3, #1
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b21b      	sxth	r3, r3
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	b21a      	sxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	b21b      	sxth	r3, r3
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3303      	adds	r3, #3
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3302      	adds	r3, #2
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3305      	adds	r3, #5
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	b21a      	sxth	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b21a      	sxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3307      	adds	r3, #7
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	b21a      	sxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3306      	adds	r3, #6
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3309      	adds	r3, #9
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b21b      	sxth	r3, r3
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	b21a      	sxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3308      	adds	r3, #8
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b21a      	sxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	330b      	adds	r3, #11
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b21b      	sxth	r3, r3
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	b21a      	sxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	330a      	adds	r3, #10
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	b21b      	sxth	r3, r3
 8002830:	4313      	orrs	r3, r2
 8002832:	b21a      	sxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	330d      	adds	r3, #13
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b21b      	sxth	r3, r3
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	b21a      	sxth	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	330c      	adds	r3, #12
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b21b      	sxth	r3, r3
 800284c:	4313      	orrs	r3, r2
 800284e:	b21a      	sxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	330f      	adds	r3, #15
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b21b      	sxth	r3, r3
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	b21a      	sxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	330e      	adds	r3, #14
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b21b      	sxth	r3, r3
 8002868:	4313      	orrs	r3, r2
 800286a:	b21a      	sxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3311      	adds	r3, #17
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b21b      	sxth	r3, r3
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	b21a      	sxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3310      	adds	r3, #16
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b21b      	sxth	r3, r3
 8002884:	4313      	orrs	r3, r2
 8002886:	b21a      	sxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3313      	adds	r3, #19
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b21b      	sxth	r3, r3
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	b21a      	sxth	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3312      	adds	r3, #18
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b21b      	sxth	r3, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3315      	adds	r3, #21
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	b21b      	sxth	r3, r3
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3314      	adds	r3, #20
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	4313      	orrs	r3, r2
 80028be:	b21a      	sxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3317      	adds	r3, #23
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	b21a      	sxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3316      	adds	r3, #22
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b21b      	sxth	r3, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	b21a      	sxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3319      	adds	r3, #25
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	761a      	strb	r2, [r3, #24]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b087      	sub	sp, #28
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3318      	adds	r3, #24
 8002904:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3301      	adds	r3, #1
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b21b      	sxth	r3, r3
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	b21a      	sxth	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b21b      	sxth	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	b21a      	sxth	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3302      	adds	r3, #2
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3303      	adds	r3, #3
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	b25b      	sxtb	r3, r3
 8002932:	b29b      	uxth	r3, r3
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	b29b      	uxth	r3, r3
 8002938:	827b      	strh	r3, [r7, #18]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	b21b      	sxth	r3, r3
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	823b      	strh	r3, [r7, #16]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8002948:	8a7a      	ldrh	r2, [r7, #18]
 800294a:	8a3b      	ldrh	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	b21a      	sxth	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3305      	adds	r3, #5
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b25b      	sxtb	r3, r3
 800295c:	b29b      	uxth	r3, r3
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	b29b      	uxth	r3, r3
 8002962:	81fb      	strh	r3, [r7, #14]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	b2db      	uxtb	r3, r3
 800296e:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 8002970:	89fa      	ldrh	r2, [r7, #14]
 8002972:	89bb      	ldrh	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	b21a      	sxth	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3306      	adds	r3, #6
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b25a      	sxtb	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	460a      	mov	r2, r1
 80029a0:	71fb      	strb	r3, [r7, #7]
 80029a2:	4613      	mov	r3, r2
 80029a4:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80029aa:	79fa      	ldrb	r2, [r7, #7]
 80029ac:	79bb      	ldrb	r3, [r7, #6]
 80029ae:	4013      	ands	r3, r2
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e001      	b.n	80029c0 <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <null_ptr_check+0x26>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <null_ptr_check+0x26>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <null_ptr_check+0x26>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80029f4:	23ff      	movs	r3, #255	@ 0xff
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e001      	b.n	80029fe <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <user_i2c_read>:
#include "stm32f4xx_hal.h"  // <- używasz STM32F4, nie F1!

extern I2C_HandleTypeDef hi2c1;

int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	@ 0x28
 8002a14:	af04      	add	r7, sp, #16
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	73fb      	strb	r3, [r7, #15]
    uint8_t dev_id = *(uint8_t *)intf_ptr;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	75fb      	strb	r3, [r7, #23]
    if (HAL_I2C_Mem_Read(&hi2c1, dev_id << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	b299      	uxth	r1, r3
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2064      	movs	r0, #100	@ 0x64
 8002a38:	9002      	str	r0, [sp, #8]
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2301      	movs	r3, #1
 8002a42:	4807      	ldr	r0, [pc, #28]	@ (8002a60 <user_i2c_read+0x50>)
 8002a44:	f002 f9e2 	bl	8004e0c <HAL_I2C_Mem_Read>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <user_i2c_read+0x42>
        return 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e001      	b.n	8002a56 <user_i2c_read+0x46>
    return -1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000230 	.word	0x20000230

08002a64 <user_i2c_write>:

int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af04      	add	r7, sp, #16
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4603      	mov	r3, r0
 8002a72:	73fb      	strb	r3, [r7, #15]
    uint8_t dev_id = *(uint8_t *)intf_ptr;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	75fb      	strb	r3, [r7, #23]
    if (HAL_I2C_Mem_Write(&hi2c1, dev_id << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, 100) == HAL_OK)
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	b299      	uxth	r1, r3
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2064      	movs	r0, #100	@ 0x64
 8002a8c:	9002      	str	r0, [sp, #8]
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	4807      	ldr	r0, [pc, #28]	@ (8002ab4 <user_i2c_write+0x50>)
 8002a98:	f002 f8be 	bl	8004c18 <HAL_I2C_Mem_Write>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <user_i2c_write+0x42>
        return 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e001      	b.n	8002aaa <user_i2c_write+0x46>
    return -1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000230 	.word	0x20000230

08002ab8 <user_delay_us>:

void user_delay_us(uint32_t period, void *intf_ptr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
    HAL_Delay((period + 999) / 1000); // zamiana us → ms
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8002ac8:	4a05      	ldr	r2, [pc, #20]	@ (8002ae0 <user_delay_us+0x28>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	099b      	lsrs	r3, r3, #6
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 f941 	bl	8003d58 <HAL_Delay>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	10624dd3 	.word	0x10624dd3

08002ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ae8:	b0c9      	sub	sp, #292	@ 0x124
 8002aea:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aec:	f001 f8c2 	bl	8003c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af0:	f000 fa12 	bl	8002f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af4:	f000 fbe4 	bl	80032c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002af8:	f000 fb66 	bl	80031c8 <MX_TIM1_Init>
  MX_SPI1_Init();
 8002afc:	f000 fb2e 	bl	800315c <MX_SPI1_Init>
  MX_RTC_Init();
 8002b00:	f000 fac8 	bl	8003094 <MX_RTC_Init>
  MX_I2C1_Init();
 8002b04:	f000 fa6a 	bl	8002fdc <MX_I2C1_Init>
  MX_I2C2_Init();
 8002b08:	f000 fa96 	bl	8003038 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002b0c:	f000 fbae 	bl	800326c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002b10:	f005 feda 	bl	80088c8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // Uruchomienie przerwań od timera TIM1 (używane do okresowego odświeżania danych)
    HAL_TIM_Base_Start_IT(&htim1);
 8002b14:	48b7      	ldr	r0, [pc, #732]	@ (8002df4 <main+0x310>)
 8002b16:	f004 fee1 	bl	80078dc <HAL_TIM_Base_Start_IT>

    // Konfiguracja bieżącego czasu zegara RTC (np. po uruchomieniu mikrokontrolera)
    // Ustawiamy czas: 00:00:00
    sTime.Hours = 0;
 8002b1a:	4bb7      	ldr	r3, [pc, #732]	@ (8002df8 <main+0x314>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0;
 8002b20:	4bb5      	ldr	r3, [pc, #724]	@ (8002df8 <main+0x314>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0;
 8002b26:	4bb4      	ldr	r3, [pc, #720]	@ (8002df8 <main+0x314>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	709a      	strb	r2, [r3, #2]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	49b2      	ldr	r1, [pc, #712]	@ (8002df8 <main+0x314>)
 8002b30:	48b2      	ldr	r0, [pc, #712]	@ (8002dfc <main+0x318>)
 8002b32:	f003 fe6a 	bl	800680a <HAL_RTC_SetTime>

    // Ustawiamy datę: Poniedziałek, 1 stycznia 2025
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b36:	4bb2      	ldr	r3, [pc, #712]	@ (8002e00 <main+0x31c>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8002b3c:	4bb0      	ldr	r3, [pc, #704]	@ (8002e00 <main+0x31c>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	705a      	strb	r2, [r3, #1]
    sDate.Date = 1;
 8002b42:	4baf      	ldr	r3, [pc, #700]	@ (8002e00 <main+0x31c>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	709a      	strb	r2, [r3, #2]
    sDate.Year = 25;
 8002b48:	4bad      	ldr	r3, [pc, #692]	@ (8002e00 <main+0x31c>)
 8002b4a:	2219      	movs	r2, #25
 8002b4c:	70da      	strb	r2, [r3, #3]
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	49ab      	ldr	r1, [pc, #684]	@ (8002e00 <main+0x31c>)
 8002b52:	48aa      	ldr	r0, [pc, #680]	@ (8002dfc <main+0x318>)
 8002b54:	f003 ff51 	bl	80069fa <HAL_RTC_SetDate>

    // Dezaktywacja WakeUp Timer RTC — musi być wykonana przed jego ponowną konfiguracją
    // RTC nie pozwala nadpisać aktywnego timera bez wcześniejszego wyłączenia
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002b58:	48a8      	ldr	r0, [pc, #672]	@ (8002dfc <main+0x318>)
 8002b5a:	f004 f9a1 	bl	8006ea0 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Inicjalizacja wyświetlacza ST7735 i czyszczenie ekranu
    ST7735_Init(0);
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fe fae8 	bl	8001134 <ST7735_Init>
    fillScreen(BLACK);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fe f9d9 	bl	8000f1c <fillScreen>

    // Konfiguracja struktury czujnika BME280 (wilgotność, temperatura, ciśnienie)
    bme.intf = BME280_I2C_INTF;
 8002b6a:	4ba6      	ldr	r3, [pc, #664]	@ (8002e04 <main+0x320>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	705a      	strb	r2, [r3, #1]
    bme.intf_ptr = &bme280_addr;
 8002b70:	4ba4      	ldr	r3, [pc, #656]	@ (8002e04 <main+0x320>)
 8002b72:	4aa5      	ldr	r2, [pc, #660]	@ (8002e08 <main+0x324>)
 8002b74:	605a      	str	r2, [r3, #4]
    bme.read = user_i2c_read;
 8002b76:	4ba3      	ldr	r3, [pc, #652]	@ (8002e04 <main+0x320>)
 8002b78:	4aa4      	ldr	r2, [pc, #656]	@ (8002e0c <main+0x328>)
 8002b7a:	60da      	str	r2, [r3, #12]
    bme.write = user_i2c_write;
 8002b7c:	4ba1      	ldr	r3, [pc, #644]	@ (8002e04 <main+0x320>)
 8002b7e:	4aa4      	ldr	r2, [pc, #656]	@ (8002e10 <main+0x32c>)
 8002b80:	611a      	str	r2, [r3, #16]
    bme.delay_us = user_delay_us;
 8002b82:	4ba0      	ldr	r3, [pc, #640]	@ (8002e04 <main+0x320>)
 8002b84:	4aa3      	ldr	r2, [pc, #652]	@ (8002e14 <main+0x330>)
 8002b86:	615a      	str	r2, [r3, #20]

    // Ustawienie parametrów pomiarowych BME280
    struct bme280_settings settings;
    settings.osr_h = BME280_OVERSAMPLING_1X;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 30fe 	strb.w	r3, [r7, #254]	@ 0xfe
    settings.osr_p = BME280_OVERSAMPLING_1X;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
    settings.osr_t = BME280_OVERSAMPLING_1X;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 30fd 	strb.w	r3, [r7, #253]	@ 0xfd
    settings.filter = BME280_FILTER_COEFF_2;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
    settings.standby_time = BME280_STANDBY_TIME_1000_MS;
 8002ba0:	2305      	movs	r3, #5
 8002ba2:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100

    uint8_t settings_sel = BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP |
 8002ba6:	230f      	movs	r3, #15
 8002ba8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
                           BME280_SEL_OSR_HUM | BME280_SEL_FILTER;

    if (bme280_init(&bme) != BME280_OK) {
 8002bac:	4895      	ldr	r0, [pc, #596]	@ (8002e04 <main+0x320>)
 8002bae:	f7fe fd13 	bl	80015d8 <bme280_init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <main+0xd8>
        Error_Handler();
 8002bb8:	f000 fd64 	bl	8003684 <Error_Handler>
    }
    bme280_set_sensor_settings(settings_sel, &settings, &bme);
 8002bbc:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8002bc0:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8002bc4:	4a8f      	ldr	r2, [pc, #572]	@ (8002e04 <main+0x320>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fde0 	bl	800178c <bme280_set_sensor_settings>

    // Ponowna dezaktywacja WakeUp Timer (na wypadek jeśli był jeszcze aktywny)
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8002bcc:	488b      	ldr	r0, [pc, #556]	@ (8002dfc <main+0x318>)
 8002bce:	f004 f967 	bl	8006ea0 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Aktywacja WakeUp Timer RTC z przerwaniem — co określony czas wywoła callback
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4095, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8002bd8:	4888      	ldr	r0, [pc, #544]	@ (8002dfc <main+0x318>)
 8002bda:	f004 f89f 	bl	8006d1c <HAL_RTCEx_SetWakeUpTimer_IT>

    // Inicjalizacja czujnika światła BH1750 w trybie ciągłego pomiaru o wysokiej rozdzielczości
    BH1750_Init(&hi2c2, BH1750_CONT_HIGH_RES_MODE);
 8002bde:	2110      	movs	r1, #16
 8002be0:	488d      	ldr	r0, [pc, #564]	@ (8002e18 <main+0x334>)
 8002be2:	f7fe fca7 	bl	8001534 <BH1750_Init>
    char msg[] = "Hello from STM32\n";
 8002be6:	4b8d      	ldr	r3, [pc, #564]	@ (8002e1c <main+0x338>)
 8002be8:	f107 04e8 	add.w	r4, r7, #232	@ 0xe8
 8002bec:	461d      	mov	r5, r3
 8002bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002bf6:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fb40 	bl	8000280 <strlen>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0c:	4884      	ldr	r0, [pc, #528]	@ (8002e20 <main+0x33c>)
 8002c0e:	f005 fa9f 	bl	8008150 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8002c12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c16:	f001 f89f 	bl	8003d58 <HAL_Delay>

    if (FATFS_LinkDriver(&USER_Driver, USERPath) == 0)
 8002c1a:	4982      	ldr	r1, [pc, #520]	@ (8002e24 <main+0x340>)
 8002c1c:	4882      	ldr	r0, [pc, #520]	@ (8002e28 <main+0x344>)
 8002c1e:	f008 fb19 	bl	800b254 <FATFS_LinkDriver>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d130      	bne.n	8002c8a <main+0x1a6>
    {
    	if (f_mount(&fs, USERPath, 1) == FR_OK)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	497e      	ldr	r1, [pc, #504]	@ (8002e24 <main+0x340>)
 8002c2c:	487f      	ldr	r0, [pc, #508]	@ (8002e2c <main+0x348>)
 8002c2e:	f007 fc9f 	bl	800a570 <f_mount>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d128      	bne.n	8002c8a <main+0x1a6>
        {
    		fres = f_open(&file, "log.txt", FA_WRITE | FA_OPEN_ALWAYS);
 8002c38:	2212      	movs	r2, #18
 8002c3a:	497d      	ldr	r1, [pc, #500]	@ (8002e30 <main+0x34c>)
 8002c3c:	487d      	ldr	r0, [pc, #500]	@ (8002e34 <main+0x350>)
 8002c3e:	f007 fcdd 	bl	800a5fc <f_open>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b7c      	ldr	r3, [pc, #496]	@ (8002e38 <main+0x354>)
 8002c48:	701a      	strb	r2, [r3, #0]
            if (fres == FR_OK)
 8002c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e38 <main+0x354>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11b      	bne.n	8002c8a <main+0x1a6>
                {
                    f_lseek(&file, f_size(&file));  // idź na koniec pliku
 8002c52:	4b78      	ldr	r3, [pc, #480]	@ (8002e34 <main+0x350>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4619      	mov	r1, r3
 8002c58:	4876      	ldr	r0, [pc, #472]	@ (8002e34 <main+0x350>)
 8002c5a:	f008 f8a6 	bl	800adaa <f_lseek>
                    char logbuf[128];
                    sprintf(logbuf, "Start log: %s %s\r\n", dateBuf, timeBuf);
 8002c5e:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8002c62:	4b76      	ldr	r3, [pc, #472]	@ (8002e3c <main+0x358>)
 8002c64:	4a76      	ldr	r2, [pc, #472]	@ (8002e40 <main+0x35c>)
 8002c66:	4977      	ldr	r1, [pc, #476]	@ (8002e44 <main+0x360>)
 8002c68:	f009 f81a 	bl	800bca0 <siprintf>
                    f_write(&file, logbuf, strlen(logbuf), &bytesWritten);
 8002c6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fb05 	bl	8000280 <strlen>
 8002c76:	4602      	mov	r2, r0
 8002c78:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8002c7c:	4b72      	ldr	r3, [pc, #456]	@ (8002e48 <main+0x364>)
 8002c7e:	486d      	ldr	r0, [pc, #436]	@ (8002e34 <main+0x350>)
 8002c80:	f007 fe76 	bl	800a970 <f_write>
                    f_close(&file);
 8002c84:	486b      	ldr	r0, [pc, #428]	@ (8002e34 <main+0x350>)
 8002c86:	f008 f866 	bl	800ad56 <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (getdata)
 8002c8a:	4b70      	ldr	r3, [pc, #448]	@ (8002e4c <main+0x368>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0fb      	beq.n	8002c8a <main+0x1a6>
	      {
	          getdata = 0;//zerowanie flagi od tim1
 8002c92:	4b6e      	ldr	r3, [pc, #440]	@ (8002e4c <main+0x368>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]



	          // Odczyt danych z BME280
	          bme280_set_sensor_mode(BME280_POWERMODE_FORCED, &bme);
 8002c98:	495a      	ldr	r1, [pc, #360]	@ (8002e04 <main+0x320>)
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f7fe fdc5 	bl	800182a <bme280_set_sensor_mode>
	          /*Tryb FORCED oznacza, ze czujnik sie budzi, aby wykonac jeden pomiar, po czym
	           * przechodzi w stan uspienia SLEEP. W tej wersji wybudzamy go na poczatku petli,
	           * potem idzie spac, co zmniejsza pobor pradu.
	           * Inna mozliwoscia jest zastosowanie trybu NORMAL, w ktorym bme wykonuje pomiary ciagle,
	           * bez przechodzenia w SLEEP. Wowczas: BME280_POWERMODE_NORMAL*/
	          bme.delay_us(2000 * 1000, bme.intf_ptr);//odczekanie, az sie obudzi i zmierzy
 8002ca0:	4b58      	ldr	r3, [pc, #352]	@ (8002e04 <main+0x320>)
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	4a57      	ldr	r2, [pc, #348]	@ (8002e04 <main+0x320>)
 8002ca6:	6852      	ldr	r2, [r2, #4]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4869      	ldr	r0, [pc, #420]	@ (8002e50 <main+0x36c>)
 8002cac:	4798      	blx	r3
	          if (bme280_get_sensor_data(BME280_ALL, &sensor_data, &bme) == BME280_OK) {
 8002cae:	4a55      	ldr	r2, [pc, #340]	@ (8002e04 <main+0x320>)
 8002cb0:	4968      	ldr	r1, [pc, #416]	@ (8002e54 <main+0x370>)
 8002cb2:	2007      	movs	r0, #7
 8002cb4:	f7fe fe4a 	bl	800194c <bme280_get_sensor_data>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e5      	bne.n	8002c8a <main+0x1a6>

	              char buf[32];//tablica pomocnicza do wyswietlania danych

	              //wyswietlanie temperatury
	              sprintf(buf, "%.1f 'C", sensor_data.temperature);
 8002cbe:	4b65      	ldr	r3, [pc, #404]	@ (8002e54 <main+0x370>)
 8002cc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cc4:	1d38      	adds	r0, r7, #4
 8002cc6:	4964      	ldr	r1, [pc, #400]	@ (8002e58 <main+0x374>)
 8002cc8:	f008 ffea 	bl	800bca0 <siprintf>
	              //drawString(10, 30, buf, WHITE);
	              ST7735_WriteString(10, 10, buf, Font_16x26, WHITE, BLACK);
 8002ccc:	4b63      	ldr	r3, [pc, #396]	@ (8002e5c <main+0x378>)
 8002cce:	1d39      	adds	r1, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	9202      	str	r2, [sp, #8]
 8002cd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cd8:	9201      	str	r2, [sp, #4]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	9200      	str	r2, [sp, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	210a      	movs	r1, #10
 8002ce4:	200a      	movs	r0, #10
 8002ce6:	f7fe fb49 	bl	800137c <ST7735_WriteString>

	              //wyswietlanie wilgotnosci
	              sprintf(buf, "Hum: %.0f %%", sensor_data.humidity);
 8002cea:	4b5a      	ldr	r3, [pc, #360]	@ (8002e54 <main+0x370>)
 8002cec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cf0:	1d38      	adds	r0, r7, #4
 8002cf2:	495b      	ldr	r1, [pc, #364]	@ (8002e60 <main+0x37c>)
 8002cf4:	f008 ffd4 	bl	800bca0 <siprintf>
	              //fillRect(0, 100, 128, 10, BLACK);
	              // drawString(25, 100, buf, WHITE);
	              ST7735_WriteString(35, 100, buf, Font_7x10, WHITE, BLACK);
 8002cf8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e64 <main+0x380>)
 8002cfa:	1d39      	adds	r1, r7, #4
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	9202      	str	r2, [sp, #8]
 8002d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d04:	9201      	str	r2, [sp, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	9200      	str	r2, [sp, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	460a      	mov	r2, r1
 8002d0e:	2164      	movs	r1, #100	@ 0x64
 8002d10:	2023      	movs	r0, #35	@ 0x23
 8002d12:	f7fe fb33 	bl	800137c <ST7735_WriteString>

	              //wyswietlanie cisnienia
	              sprintf(buf, "Press: %.1f hPa", sensor_data.pressure / 100.0);
 8002d16:	4b4f      	ldr	r3, [pc, #316]	@ (8002e54 <main+0x370>)
 8002d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	4b51      	ldr	r3, [pc, #324]	@ (8002e68 <main+0x384>)
 8002d22:	f7fd fd9b 	bl	800085c <__aeabi_ddiv>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	1d38      	adds	r0, r7, #4
 8002d2c:	494f      	ldr	r1, [pc, #316]	@ (8002e6c <main+0x388>)
 8002d2e:	f008 ffb7 	bl	800bca0 <siprintf>
	              //fillRect(0, 120, 128, 10, BLACK);
	              //drawString(5, 120, buf, WHITE);
	              ST7735_WriteString(8, 120, buf, Font_7x10, WHITE, BLACK);
 8002d32:	4b4c      	ldr	r3, [pc, #304]	@ (8002e64 <main+0x380>)
 8002d34:	1d39      	adds	r1, r7, #4
 8002d36:	2200      	movs	r2, #0
 8002d38:	9202      	str	r2, [sp, #8]
 8002d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d3e:	9201      	str	r2, [sp, #4]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	9200      	str	r2, [sp, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	460a      	mov	r2, r1
 8002d48:	2178      	movs	r1, #120	@ 0x78
 8002d4a:	2008      	movs	r0, #8
 8002d4c:	f7fe fb16 	bl	800137c <ST7735_WriteString>
	              // ODCZYT DANYCH Z BH1750 – czujnik nasłonecznienia
	              // Tryb ciągły (CONTINUOUS HIGH RES MODE) pozwala odczytywać dane bez każdorazowego inicjalizowania pomiaru.
	              // Jednak ze względu na prostotę i dokładność, w tym przypadku wykonujemy pomiar ręcznie w każdej iteracji.

	              // Uruchomienie nowego pomiaru w trybie ustawionym przy inicjalizacji
	              BH1750_StartMeasurement();
 8002d50:	f7fe fc26 	bl	80015a0 <BH1750_StartMeasurement>

	              // Odczekanie 180 ms – tyle potrzebuje czujnik BH1750 na wykonanie pomiaru
	              HAL_Delay(180);
 8002d54:	20b4      	movs	r0, #180	@ 0xb4
 8002d56:	f000 ffff 	bl	8003d58 <HAL_Delay>
	              // Odbiór 2 bajtów danych – surowa wartość nasłonecznienia
	              uint8_t data[2];
	              uint16_t lux;

	              // Odczyt danych z czujnika (adres BH1750 to 0x23 przesunięte w lewo o 1 bit = 0x46)
	              HAL_I2C_Master_Receive(&hi2c2, 0x46, data, 2, 100);
 8002d5a:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8002d5e:	2364      	movs	r3, #100	@ 0x64
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	2302      	movs	r3, #2
 8002d64:	2146      	movs	r1, #70	@ 0x46
 8002d66:	482c      	ldr	r0, [pc, #176]	@ (8002e18 <main+0x334>)
 8002d68:	f001 fd24 	bl	80047b4 <HAL_I2C_Master_Receive>

	              // Przetwarzanie danych – łączenie dwóch bajtów w jedną wartość 16-bitową (w luxach)
	              lux = (data[0] << 8) | data[1];
 8002d6c:	f897 30e4 	ldrb.w	r3, [r7, #228]	@ 0xe4
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	f897 30e5 	ldrb.w	r3, [r7, #229]	@ 0xe5
 8002d7a:	b21b      	sxth	r3, r3
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104

	              // Wyświetlenie zaktualizowaną wartość natężenia światła
	              sprintf(debugBuf, "Lux: %4u lx", lux);
 8002d84:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4939      	ldr	r1, [pc, #228]	@ (8002e70 <main+0x38c>)
 8002d8c:	4839      	ldr	r0, [pc, #228]	@ (8002e74 <main+0x390>)
 8002d8e:	f008 ff87 	bl	800bca0 <siprintf>
	              ST7735_WriteString(25, 150, debugBuf, Font_7x10, WHITE, BLACK);
 8002d92:	4b34      	ldr	r3, [pc, #208]	@ (8002e64 <main+0x380>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	9202      	str	r2, [sp, #8]
 8002d98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d9c:	9201      	str	r2, [sp, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	9200      	str	r2, [sp, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a33      	ldr	r2, [pc, #204]	@ (8002e74 <main+0x390>)
 8002da6:	2196      	movs	r1, #150	@ 0x96
 8002da8:	2019      	movs	r0, #25
 8002daa:	f7fe fae7 	bl	800137c <ST7735_WriteString>

	              // Wysłanie danych pomiarowych przez Bluetooth (temperatura, wilgotność, ciśnienie, nasłonecznienie)
	              // Ciśnienie jest przeliczane z Pa na hPa (czyli podzielone przez 100)
	              char btBuf[64];
	              sprintf(btBuf, "Temp: %.1f C, Hum: %.0f%%, Press: %.1f hPa, Lux: %u\r\n",
 8002dae:	4b29      	ldr	r3, [pc, #164]	@ (8002e54 <main+0x370>)
 8002db0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8002db4:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <main+0x370>)
 8002db6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
	                      sensor_data.temperature,
	                      sensor_data.humidity,
	                      sensor_data.pressure / 100.0,
 8002dba:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <main+0x370>)
 8002dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
	              sprintf(btBuf, "Temp: %.1f C, Hum: %.0f%%, Press: %.1f hPa, Lux: %u\r\n",
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <main+0x384>)
 8002dc6:	f7fd fd49 	bl	800085c <__aeabi_ddiv>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	f8b7 1104 	ldrh.w	r1, [r7, #260]	@ 0x104
 8002dd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002dd6:	9104      	str	r1, [sp, #16]
 8002dd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ddc:	e9cd 4500 	strd	r4, r5, [sp]
 8002de0:	4642      	mov	r2, r8
 8002de2:	464b      	mov	r3, r9
 8002de4:	4924      	ldr	r1, [pc, #144]	@ (8002e78 <main+0x394>)
 8002de6:	f008 ff5b 	bl	800bca0 <siprintf>
	                      lux);

	              BT_SendString(btBuf);  // Przesłanie przez UART2 do modułu HC-05 (Bluetooth)
 8002dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dee:	4618      	mov	r0, r3
 8002df0:	e044      	b.n	8002e7c <main+0x398>
 8002df2:	bf00      	nop
 8002df4:	20000350 	.word	0x20000350
 8002df8:	200003e4 	.word	0x200003e4
 8002dfc:	200002d8 	.word	0x200002d8
 8002e00:	200003f8 	.word	0x200003f8
 8002e04:	2000041c 	.word	0x2000041c
 8002e08:	20000014 	.word	0x20000014
 8002e0c:	08002a11 	.word	0x08002a11
 8002e10:	08002a65 	.word	0x08002a65
 8002e14:	08002ab9 	.word	0x08002ab9
 8002e18:	20000284 	.word	0x20000284
 8002e1c:	0800dfcc 	.word	0x0800dfcc
 8002e20:	20000398 	.word	0x20000398
 8002e24:	20000918 	.word	0x20000918
 8002e28:	20000024 	.word	0x20000024
 8002e2c:	200004a4 	.word	0x200004a4
 8002e30:	0800df20 	.word	0x0800df20
 8002e34:	200006d4 	.word	0x200006d4
 8002e38:	20000904 	.word	0x20000904
 8002e3c:	200003fc 	.word	0x200003fc
 8002e40:	2000040c 	.word	0x2000040c
 8002e44:	0800df28 	.word	0x0800df28
 8002e48:	20000908 	.word	0x20000908
 8002e4c:	200003e0 	.word	0x200003e0
 8002e50:	001e8480 	.word	0x001e8480
 8002e54:	20000460 	.word	0x20000460
 8002e58:	0800df3c 	.word	0x0800df3c
 8002e5c:	2000000c 	.word	0x2000000c
 8002e60:	0800df44 	.word	0x0800df44
 8002e64:	20000004 	.word	0x20000004
 8002e68:	40590000 	.word	0x40590000
 8002e6c:	0800df54 	.word	0x0800df54
 8002e70:	0800df64 	.word	0x0800df64
 8002e74:	20000478 	.word	0x20000478
 8002e78:	0800df70 	.word	0x0800df70
 8002e7c:	f000 fa92 	bl	80033a4 <BT_SendString>

	              // Zapisz do SD
	              if (f_open(&file, "log.txt", FA_WRITE | FA_OPEN_ALWAYS) == FR_OK)
 8002e80:	2212      	movs	r2, #18
 8002e82:	491f      	ldr	r1, [pc, #124]	@ (8002f00 <main+0x41c>)
 8002e84:	481f      	ldr	r0, [pc, #124]	@ (8002f04 <main+0x420>)
 8002e86:	f007 fbb9 	bl	800a5fc <f_open>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f47f aefc 	bne.w	8002c8a <main+0x1a6>
	              {
	                  f_lseek(&file, f_size(&file)); // do końca
 8002e92:	4b1c      	ldr	r3, [pc, #112]	@ (8002f04 <main+0x420>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	4619      	mov	r1, r3
 8002e98:	481a      	ldr	r0, [pc, #104]	@ (8002f04 <main+0x420>)
 8002e9a:	f007 ff86 	bl	800adaa <f_lseek>
	                  char logbuf[128];
	                  sprintf(logbuf, "%02d:%02d:%02d %02d-%02d-%02d - %s",
	                          sTime.Hours, sTime.Minutes, sTime.Seconds,
 8002e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f08 <main+0x424>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
	                  sprintf(logbuf, "%02d:%02d:%02d %02d-%02d-%02d - %s",
 8002ea2:	461e      	mov	r6, r3
	                          sTime.Hours, sTime.Minutes, sTime.Seconds,
 8002ea4:	4b18      	ldr	r3, [pc, #96]	@ (8002f08 <main+0x424>)
 8002ea6:	785b      	ldrb	r3, [r3, #1]
	                  sprintf(logbuf, "%02d:%02d:%02d %02d-%02d-%02d - %s",
 8002ea8:	469c      	mov	ip, r3
	                          sTime.Hours, sTime.Minutes, sTime.Seconds,
 8002eaa:	4b17      	ldr	r3, [pc, #92]	@ (8002f08 <main+0x424>)
 8002eac:	789b      	ldrb	r3, [r3, #2]
	                  sprintf(logbuf, "%02d:%02d:%02d %02d-%02d-%02d - %s",
 8002eae:	4619      	mov	r1, r3
	                          sDate.Date, sDate.Month, 2000 + sDate.Year,
 8002eb0:	4b16      	ldr	r3, [pc, #88]	@ (8002f0c <main+0x428>)
 8002eb2:	789b      	ldrb	r3, [r3, #2]
	                  sprintf(logbuf, "%02d:%02d:%02d %02d-%02d-%02d - %s",
 8002eb4:	461c      	mov	r4, r3
	                          sDate.Date, sDate.Month, 2000 + sDate.Year,
 8002eb6:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <main+0x428>)
 8002eb8:	785b      	ldrb	r3, [r3, #1]
	                  sprintf(logbuf, "%02d:%02d:%02d %02d-%02d-%02d - %s",
 8002eba:	461d      	mov	r5, r3
	                          sDate.Date, sDate.Month, 2000 + sDate.Year,
 8002ebc:	4b13      	ldr	r3, [pc, #76]	@ (8002f0c <main+0x428>)
 8002ebe:	78db      	ldrb	r3, [r3, #3]
	                  sprintf(logbuf, "%02d:%02d:%02d %02d-%02d-%02d - %s",
 8002ec0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002ec4:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8002ec8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002ecc:	9204      	str	r2, [sp, #16]
 8002ece:	9303      	str	r3, [sp, #12]
 8002ed0:	9502      	str	r5, [sp, #8]
 8002ed2:	9401      	str	r4, [sp, #4]
 8002ed4:	9100      	str	r1, [sp, #0]
 8002ed6:	4663      	mov	r3, ip
 8002ed8:	4632      	mov	r2, r6
 8002eda:	490d      	ldr	r1, [pc, #52]	@ (8002f10 <main+0x42c>)
 8002edc:	f008 fee0 	bl	800bca0 <siprintf>
	                          btBuf);
	                  f_write(&file, logbuf, strlen(logbuf), &bytesWritten);
 8002ee0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd f9cb 	bl	8000280 <strlen>
 8002eea:	4602      	mov	r2, r0
 8002eec:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <main+0x430>)
 8002ef2:	4804      	ldr	r0, [pc, #16]	@ (8002f04 <main+0x420>)
 8002ef4:	f007 fd3c 	bl	800a970 <f_write>
	                  f_close(&file);
 8002ef8:	4802      	ldr	r0, [pc, #8]	@ (8002f04 <main+0x420>)
 8002efa:	f007 ff2c 	bl	800ad56 <f_close>
	  if (getdata)
 8002efe:	e6c4      	b.n	8002c8a <main+0x1a6>
 8002f00:	0800df20 	.word	0x0800df20
 8002f04:	200006d4 	.word	0x200006d4
 8002f08:	200003e4 	.word	0x200003e4
 8002f0c:	200003f8 	.word	0x200003f8
 8002f10:	0800dfa8 	.word	0x0800dfa8
 8002f14:	20000908 	.word	0x20000908

08002f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b094      	sub	sp, #80	@ 0x50
 8002f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f1e:	f107 0320 	add.w	r3, r7, #32
 8002f22:	2230      	movs	r2, #48	@ 0x30
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f008 ff1f 	bl	800bd6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	4b24      	ldr	r3, [pc, #144]	@ (8002fd4 <SystemClock_Config+0xbc>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	4a23      	ldr	r2, [pc, #140]	@ (8002fd4 <SystemClock_Config+0xbc>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4c:	4b21      	ldr	r3, [pc, #132]	@ (8002fd4 <SystemClock_Config+0xbc>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd8 <SystemClock_Config+0xc0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002f64:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd8 <SystemClock_Config+0xc0>)
 8002f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <SystemClock_Config+0xc0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002f78:	230a      	movs	r3, #10
 8002f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f80:	2310      	movs	r3, #16
 8002f82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f84:	2301      	movs	r3, #1
 8002f86:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f8c:	f107 0320 	add.w	r3, r7, #32
 8002f90:	4618      	mov	r0, r3
 8002f92:	f002 fe71 	bl	8005c78 <HAL_RCC_OscConfig>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002f9c:	f000 fb72 	bl	8003684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f003 f8d4 	bl	8006168 <HAL_RCC_ClockConfig>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002fc6:	f000 fb5d 	bl	8003684 <Error_Handler>
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3750      	adds	r7, #80	@ 0x50
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000

08002fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	@ (800302c <MX_I2C1_Init+0x50>)
 8002fe2:	4a13      	ldr	r2, [pc, #76]	@ (8003030 <MX_I2C1_Init+0x54>)
 8002fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	@ (800302c <MX_I2C1_Init+0x50>)
 8002fe8:	4a12      	ldr	r2, [pc, #72]	@ (8003034 <MX_I2C1_Init+0x58>)
 8002fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <MX_I2C1_Init+0x50>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <MX_I2C1_Init+0x50>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <MX_I2C1_Init+0x50>)
 8002ffa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003000:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <MX_I2C1_Init+0x50>)
 8003002:	2200      	movs	r2, #0
 8003004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <MX_I2C1_Init+0x50>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800300c:	4b07      	ldr	r3, [pc, #28]	@ (800302c <MX_I2C1_Init+0x50>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <MX_I2C1_Init+0x50>)
 8003014:	2200      	movs	r2, #0
 8003016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003018:	4804      	ldr	r0, [pc, #16]	@ (800302c <MX_I2C1_Init+0x50>)
 800301a:	f001 f989 	bl	8004330 <HAL_I2C_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003024:	f000 fb2e 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000230 	.word	0x20000230
 8003030:	40005400 	.word	0x40005400
 8003034:	000186a0 	.word	0x000186a0

08003038 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800303c:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <MX_I2C2_Init+0x50>)
 800303e:	4a13      	ldr	r2, [pc, #76]	@ (800308c <MX_I2C2_Init+0x54>)
 8003040:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003042:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <MX_I2C2_Init+0x50>)
 8003044:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <MX_I2C2_Init+0x58>)
 8003046:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003048:	4b0f      	ldr	r3, [pc, #60]	@ (8003088 <MX_I2C2_Init+0x50>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800304e:	4b0e      	ldr	r3, [pc, #56]	@ (8003088 <MX_I2C2_Init+0x50>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003054:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <MX_I2C2_Init+0x50>)
 8003056:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800305a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800305c:	4b0a      	ldr	r3, [pc, #40]	@ (8003088 <MX_I2C2_Init+0x50>)
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003062:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <MX_I2C2_Init+0x50>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003068:	4b07      	ldr	r3, [pc, #28]	@ (8003088 <MX_I2C2_Init+0x50>)
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <MX_I2C2_Init+0x50>)
 8003070:	2200      	movs	r2, #0
 8003072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003074:	4804      	ldr	r0, [pc, #16]	@ (8003088 <MX_I2C2_Init+0x50>)
 8003076:	f001 f95b 	bl	8004330 <HAL_I2C_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003080:	f000 fb00 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000284 	.word	0x20000284
 800308c:	40005800 	.word	0x40005800
 8003090:	000186a0 	.word	0x000186a0

08003094 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80030a8:	2300      	movs	r3, #0
 80030aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80030ac:	4b29      	ldr	r3, [pc, #164]	@ (8003154 <MX_RTC_Init+0xc0>)
 80030ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003158 <MX_RTC_Init+0xc4>)
 80030b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030b2:	4b28      	ldr	r3, [pc, #160]	@ (8003154 <MX_RTC_Init+0xc0>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80030b8:	4b26      	ldr	r3, [pc, #152]	@ (8003154 <MX_RTC_Init+0xc0>)
 80030ba:	227f      	movs	r2, #127	@ 0x7f
 80030bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80030be:	4b25      	ldr	r3, [pc, #148]	@ (8003154 <MX_RTC_Init+0xc0>)
 80030c0:	22ff      	movs	r2, #255	@ 0xff
 80030c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030c4:	4b23      	ldr	r3, [pc, #140]	@ (8003154 <MX_RTC_Init+0xc0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030ca:	4b22      	ldr	r3, [pc, #136]	@ (8003154 <MX_RTC_Init+0xc0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030d0:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <MX_RTC_Init+0xc0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030d6:	481f      	ldr	r0, [pc, #124]	@ (8003154 <MX_RTC_Init+0xc0>)
 80030d8:	f003 fb14 	bl	8006704 <HAL_RTC_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80030e2:	f000 facf 	bl	8003684 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	2201      	movs	r2, #1
 80030fe:	4619      	mov	r1, r3
 8003100:	4814      	ldr	r0, [pc, #80]	@ (8003154 <MX_RTC_Init+0xc0>)
 8003102:	f003 fb82 	bl	800680a <HAL_RTC_SetTime>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800310c:	f000 faba 	bl	8003684 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003110:	2301      	movs	r3, #1
 8003112:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003114:	2301      	movs	r3, #1
 8003116:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003118:	2301      	movs	r3, #1
 800311a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800311c:	2300      	movs	r3, #0
 800311e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003120:	463b      	mov	r3, r7
 8003122:	2201      	movs	r2, #1
 8003124:	4619      	mov	r1, r3
 8003126:	480b      	ldr	r0, [pc, #44]	@ (8003154 <MX_RTC_Init+0xc0>)
 8003128:	f003 fc67 	bl	80069fa <HAL_RTC_SetDate>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003132:	f000 faa7 	bl	8003684 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	4806      	ldr	r0, [pc, #24]	@ (8003154 <MX_RTC_Init+0xc0>)
 800313c:	f003 fdee 	bl	8006d1c <HAL_RTCEx_SetWakeUpTimer_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8003146:	f000 fa9d 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200002d8 	.word	0x200002d8
 8003158:	40002800 	.word	0x40002800

0800315c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003160:	4b17      	ldr	r3, [pc, #92]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003162:	4a18      	ldr	r2, [pc, #96]	@ (80031c4 <MX_SPI1_Init+0x68>)
 8003164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003166:	4b16      	ldr	r3, [pc, #88]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003168:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800316c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800316e:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003174:	4b12      	ldr	r3, [pc, #72]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <MX_SPI1_Init+0x64>)
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003180:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003182:	2200      	movs	r2, #0
 8003184:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800318c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800318e:	4b0c      	ldr	r3, [pc, #48]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003190:	2208      	movs	r2, #8
 8003192:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <MX_SPI1_Init+0x64>)
 8003196:	2200      	movs	r2, #0
 8003198:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800319a:	4b09      	ldr	r3, [pc, #36]	@ (80031c0 <MX_SPI1_Init+0x64>)
 800319c:	2200      	movs	r2, #0
 800319e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031a0:	4b07      	ldr	r3, [pc, #28]	@ (80031c0 <MX_SPI1_Init+0x64>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <MX_SPI1_Init+0x64>)
 80031a8:	220a      	movs	r2, #10
 80031aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031ac:	4804      	ldr	r0, [pc, #16]	@ (80031c0 <MX_SPI1_Init+0x64>)
 80031ae:	f003 fef3 	bl	8006f98 <HAL_SPI_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80031b8:	f000 fa64 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	200002f8 	.word	0x200002f8
 80031c4:	40013000 	.word	0x40013000

080031c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ce:	f107 0308 	add.w	r3, r7, #8
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	609a      	str	r2, [r3, #8]
 80031da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031dc:	463b      	mov	r3, r7
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <MX_TIM1_Init+0x9c>)
 80031e6:	4a20      	ldr	r2, [pc, #128]	@ (8003268 <MX_TIM1_Init+0xa0>)
 80031e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80031ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <MX_TIM1_Init+0x9c>)
 80031ec:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80031f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <MX_TIM1_Init+0x9c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <MX_TIM1_Init+0x9c>)
 80031fa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80031fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003200:	4b18      	ldr	r3, [pc, #96]	@ (8003264 <MX_TIM1_Init+0x9c>)
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003206:	4b17      	ldr	r3, [pc, #92]	@ (8003264 <MX_TIM1_Init+0x9c>)
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800320c:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <MX_TIM1_Init+0x9c>)
 800320e:	2200      	movs	r2, #0
 8003210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003212:	4814      	ldr	r0, [pc, #80]	@ (8003264 <MX_TIM1_Init+0x9c>)
 8003214:	f004 fb12 	bl	800783c <HAL_TIM_Base_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800321e:	f000 fa31 	bl	8003684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003226:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	4619      	mov	r1, r3
 800322e:	480d      	ldr	r0, [pc, #52]	@ (8003264 <MX_TIM1_Init+0x9c>)
 8003230:	f004 fca6 	bl	8007b80 <HAL_TIM_ConfigClockSource>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800323a:	f000 fa23 	bl	8003684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003246:	463b      	mov	r3, r7
 8003248:	4619      	mov	r1, r3
 800324a:	4806      	ldr	r0, [pc, #24]	@ (8003264 <MX_TIM1_Init+0x9c>)
 800324c:	f004 feae 	bl	8007fac <HAL_TIMEx_MasterConfigSynchronization>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003256:	f000 fa15 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000350 	.word	0x20000350
 8003268:	40010000 	.word	0x40010000

0800326c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003270:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <MX_USART2_UART_Init+0x4c>)
 8003272:	4a12      	ldr	r2, [pc, #72]	@ (80032bc <MX_USART2_UART_Init+0x50>)
 8003274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003276:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <MX_USART2_UART_Init+0x4c>)
 8003278:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800327c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800327e:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <MX_USART2_UART_Init+0x4c>)
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003284:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <MX_USART2_UART_Init+0x4c>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800328a:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <MX_USART2_UART_Init+0x4c>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <MX_USART2_UART_Init+0x4c>)
 8003292:	220c      	movs	r2, #12
 8003294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003296:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <MX_USART2_UART_Init+0x4c>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <MX_USART2_UART_Init+0x4c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032a2:	4805      	ldr	r0, [pc, #20]	@ (80032b8 <MX_USART2_UART_Init+0x4c>)
 80032a4:	f004 ff04 	bl	80080b0 <HAL_UART_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032ae:	f000 f9e9 	bl	8003684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000398 	.word	0x20000398
 80032bc:	40004400 	.word	0x40004400

080032c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	60da      	str	r2, [r3, #12]
 80032d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b24      	ldr	r3, [pc, #144]	@ (800336c <MX_GPIO_Init+0xac>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	4a23      	ldr	r2, [pc, #140]	@ (800336c <MX_GPIO_Init+0xac>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e6:	4b21      	ldr	r3, [pc, #132]	@ (800336c <MX_GPIO_Init+0xac>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <MX_GPIO_Init+0xac>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <MX_GPIO_Init+0xac>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	6313      	str	r3, [r2, #48]	@ 0x30
 8003302:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <MX_GPIO_Init+0xac>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 800330e:	2200      	movs	r2, #0
 8003310:	f242 0107 	movw	r1, #8199	@ 0x2007
 8003314:	4816      	ldr	r0, [pc, #88]	@ (8003370 <MX_GPIO_Init+0xb0>)
 8003316:	f000 ffd9 	bl	80042cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13;
 800331a:	f242 0307 	movw	r3, #8199	@ 0x2007
 800331e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003320:	2301      	movs	r3, #1
 8003322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	4619      	mov	r1, r3
 8003332:	480f      	ldr	r0, [pc, #60]	@ (8003370 <MX_GPIO_Init+0xb0>)
 8003334:	f000 fe46 	bl	8003fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003338:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800333c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800333e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003344:	2301      	movs	r3, #1
 8003346:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003348:	f107 030c 	add.w	r3, r7, #12
 800334c:	4619      	mov	r1, r3
 800334e:	4809      	ldr	r0, [pc, #36]	@ (8003374 <MX_GPIO_Init+0xb4>)
 8003350:	f000 fe38 	bl	8003fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003354:	2200      	movs	r2, #0
 8003356:	2100      	movs	r1, #0
 8003358:	2028      	movs	r0, #40	@ 0x28
 800335a:	f000 fdfc 	bl	8003f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800335e:	2028      	movs	r0, #40	@ 0x28
 8003360:	f000 fe15 	bl	8003f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003364:	bf00      	nop
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	40020400 	.word	0x40020400
 8003374:	40020000 	.word	0x40020000

08003378 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a06      	ldr	r2, [pc, #24]	@ (800339c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d102      	bne.n	800338e <HAL_TIM_PeriodElapsedCallback+0x16>
		getdata = 1;//flaga, po ktorej nastepuje pobranie wynikow i ich wyswietlanie
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
	}
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	20000350 	.word	0x20000350
 80033a0:	200003e0 	.word	0x200003e0

080033a4 <BT_SendString>:
  * @retval brak
  *
  * Funkcja korzysta z biblioteki HAL i wysyła dane przez UART2 z maksymalnym czasem oczekiwania.
  * W projekcie UART2 połączony jest z modułem HC-05 (Bluetooth), więc tekst trafia do komputera/terminala.
  */
void BT_SendString(char *str) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7fc ff67 	bl	8000280 <strlen>
 80033b2:	4603      	mov	r3, r0
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4803      	ldr	r0, [pc, #12]	@ (80033cc <BT_SendString+0x28>)
 80033be:	f004 fec7 	bl	8008150 <HAL_UART_Transmit>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000398 	.word	0x20000398

080033d0 <HAL_RTCEx_WakeUpTimerEventCallback>:



void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80033d8:	2200      	movs	r2, #0
 80033da:	4920      	ldr	r1, [pc, #128]	@ (800345c <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>)
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f003 faae 	bl	800693e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80033e2:	2200      	movs	r2, #0
 80033e4:	491e      	ldr	r1, [pc, #120]	@ (8003460 <HAL_RTCEx_WakeUpTimerEventCallback+0x90>)
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f003 fb8b 	bl	8006b02 <HAL_RTC_GetDate>
	sprintf(timeBuf, "%02d:%02d", sTime.Hours, sTime.Minutes);
 80033ec:	4b1b      	ldr	r3, [pc, #108]	@ (800345c <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b1a      	ldr	r3, [pc, #104]	@ (800345c <HAL_RTCEx_WakeUpTimerEventCallback+0x8c>)
 80033f4:	785b      	ldrb	r3, [r3, #1]
 80033f6:	491b      	ldr	r1, [pc, #108]	@ (8003464 <HAL_RTCEx_WakeUpTimerEventCallback+0x94>)
 80033f8:	481b      	ldr	r0, [pc, #108]	@ (8003468 <HAL_RTCEx_WakeUpTimerEventCallback+0x98>)
 80033fa:	f008 fc51 	bl	800bca0 <siprintf>
	sprintf(dateBuf, "%02d:%02d:%02d", sDate.Date, sDate.Month, sDate.Year);
 80033fe:	4b18      	ldr	r3, [pc, #96]	@ (8003460 <HAL_RTCEx_WakeUpTimerEventCallback+0x90>)
 8003400:	789b      	ldrb	r3, [r3, #2]
 8003402:	461a      	mov	r2, r3
 8003404:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <HAL_RTCEx_WakeUpTimerEventCallback+0x90>)
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	4619      	mov	r1, r3
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <HAL_RTCEx_WakeUpTimerEventCallback+0x90>)
 800340c:	78db      	ldrb	r3, [r3, #3]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	460b      	mov	r3, r1
 8003412:	4916      	ldr	r1, [pc, #88]	@ (800346c <HAL_RTCEx_WakeUpTimerEventCallback+0x9c>)
 8003414:	4816      	ldr	r0, [pc, #88]	@ (8003470 <HAL_RTCEx_WakeUpTimerEventCallback+0xa0>)
 8003416:	f008 fc43 	bl	800bca0 <siprintf>
    //wyswietlanie godziny i daty
    ST7735_WriteString(45, 40, timeBuf, Font_7x10, WHITE, BLACK);
 800341a:	4b16      	ldr	r3, [pc, #88]	@ (8003474 <HAL_RTCEx_WakeUpTimerEventCallback+0xa4>)
 800341c:	2200      	movs	r2, #0
 800341e:	9202      	str	r2, [sp, #8]
 8003420:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003424:	9201      	str	r2, [sp, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	9200      	str	r2, [sp, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0e      	ldr	r2, [pc, #56]	@ (8003468 <HAL_RTCEx_WakeUpTimerEventCallback+0x98>)
 800342e:	2128      	movs	r1, #40	@ 0x28
 8003430:	202d      	movs	r0, #45	@ 0x2d
 8003432:	f7fd ffa3 	bl	800137c <ST7735_WriteString>
    ST7735_WriteString(35, 60, dateBuf, Font_7x10, WHITE, BLACK);
 8003436:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <HAL_RTCEx_WakeUpTimerEventCallback+0xa4>)
 8003438:	2200      	movs	r2, #0
 800343a:	9202      	str	r2, [sp, #8]
 800343c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003440:	9201      	str	r2, [sp, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	9200      	str	r2, [sp, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a09      	ldr	r2, [pc, #36]	@ (8003470 <HAL_RTCEx_WakeUpTimerEventCallback+0xa0>)
 800344a:	213c      	movs	r1, #60	@ 0x3c
 800344c:	2023      	movs	r0, #35	@ 0x23
 800344e:	f7fd ff95 	bl	800137c <ST7735_WriteString>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200003e4 	.word	0x200003e4
 8003460:	200003f8 	.word	0x200003f8
 8003464:	0800dfe0 	.word	0x0800dfe0
 8003468:	200003fc 	.word	0x200003fc
 800346c:	0800dfec 	.word	0x0800dfec
 8003470:	2000040c 	.word	0x2000040c
 8003474:	20000004 	.word	0x20000004

08003478 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08e      	sub	sp, #56	@ 0x38
 800347c:	af04      	add	r7, sp, #16
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
    uint32_t tick = HAL_GetTick();
 8003482:	f000 fc5d 	bl	8003d40 <HAL_GetTick>
 8003486:	6278      	str	r0, [r7, #36]	@ 0x24
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    if(GPIO_Pin == GPIO_PIN_10) // Zmiana trybu ustawiania
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348e:	d11b      	bne.n	80034c8 <HAL_GPIO_EXTI_Callback+0x50>
    {
        if(tick - last_button1_press > 200)
 8003490:	4b6e      	ldr	r3, [pc, #440]	@ (800364c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2bc8      	cmp	r3, #200	@ 0xc8
 800349a:	f240 80d3 	bls.w	8003644 <HAL_GPIO_EXTI_Callback+0x1cc>
        {
            setting_state = (setting_state + 1) % 6; // 0..5
 800349e:	4b6c      	ldr	r3, [pc, #432]	@ (8003650 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	4b6b      	ldr	r3, [pc, #428]	@ (8003654 <HAL_GPIO_EXTI_Callback+0x1dc>)
 80034a8:	fb83 3102 	smull	r3, r1, r3, r2
 80034ac:	17d3      	asrs	r3, r2, #31
 80034ae:	1ac9      	subs	r1, r1, r3
 80034b0:	460b      	mov	r3, r1
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	440b      	add	r3, r1
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	1ad1      	subs	r1, r2, r3
 80034ba:	b2ca      	uxtb	r2, r1
 80034bc:	4b64      	ldr	r3, [pc, #400]	@ (8003650 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80034be:	701a      	strb	r2, [r3, #0]
            last_button1_press = tick;
 80034c0:	4a62      	ldr	r2, [pc, #392]	@ (800364c <HAL_GPIO_EXTI_Callback+0x1d4>)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	6013      	str	r3, [r2, #0]
            ST7735_WriteString(35, 60, dateBuf, Font_7x10, WHITE, BLACK);

            last_button2_press = tick;
        }
    }
}
 80034c6:	e0bd      	b.n	8003644 <HAL_GPIO_EXTI_Callback+0x1cc>
    else if(GPIO_Pin == GPIO_PIN_11) // Inkrementacja wartości
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ce:	f040 80b9 	bne.w	8003644 <HAL_GPIO_EXTI_Callback+0x1cc>
        if(tick - last_button2_press > 200)
 80034d2:	4b61      	ldr	r3, [pc, #388]	@ (8003658 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2bc8      	cmp	r3, #200	@ 0xc8
 80034dc:	f240 80b2 	bls.w	8003644 <HAL_GPIO_EXTI_Callback+0x1cc>
            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80034e0:	f107 0310 	add.w	r3, r7, #16
 80034e4:	2200      	movs	r2, #0
 80034e6:	4619      	mov	r1, r3
 80034e8:	485c      	ldr	r0, [pc, #368]	@ (800365c <HAL_GPIO_EXTI_Callback+0x1e4>)
 80034ea:	f003 fa28 	bl	800693e <HAL_RTC_GetTime>
            HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	2200      	movs	r2, #0
 80034f4:	4619      	mov	r1, r3
 80034f6:	4859      	ldr	r0, [pc, #356]	@ (800365c <HAL_GPIO_EXTI_Callback+0x1e4>)
 80034f8:	f003 fb03 	bl	8006b02 <HAL_RTC_GetDate>
            switch(setting_state)
 80034fc:	4b54      	ldr	r3, [pc, #336]	@ (8003650 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	2b04      	cmp	r3, #4
 8003506:	d85d      	bhi.n	80035c4 <HAL_GPIO_EXTI_Callback+0x14c>
 8003508:	a201      	add	r2, pc, #4	@ (adr r2, 8003510 <HAL_GPIO_EXTI_Callback+0x98>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003525 	.word	0x08003525
 8003514:	08003545 	.word	0x08003545
 8003518:	08003567 	.word	0x08003567
 800351c:	08003589 	.word	0x08003589
 8003520:	080035a7 	.word	0x080035a7
                    sTime.Hours = (sTime.Hours + 1) % 24;
 8003524:	7c3b      	ldrb	r3, [r7, #16]
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	4b4a      	ldr	r3, [pc, #296]	@ (8003654 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800352a:	fb83 1302 	smull	r1, r3, r3, r2
 800352e:	1099      	asrs	r1, r3, #2
 8003530:	17d3      	asrs	r3, r2, #31
 8003532:	1ac9      	subs	r1, r1, r3
 8003534:	460b      	mov	r3, r1
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	440b      	add	r3, r1
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1ad1      	subs	r1, r2, r3
 800353e:	b2cb      	uxtb	r3, r1
 8003540:	743b      	strb	r3, [r7, #16]
                    break;
 8003542:	e040      	b.n	80035c6 <HAL_GPIO_EXTI_Callback+0x14e>
                    sTime.Minutes = (sTime.Minutes + 1) % 60;
 8003544:	7c7b      	ldrb	r3, [r7, #17]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	4b45      	ldr	r3, [pc, #276]	@ (8003660 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800354a:	fb83 1302 	smull	r1, r3, r3, r2
 800354e:	4413      	add	r3, r2
 8003550:	1159      	asrs	r1, r3, #5
 8003552:	17d3      	asrs	r3, r2, #31
 8003554:	1ac9      	subs	r1, r1, r3
 8003556:	460b      	mov	r3, r1
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a5b      	subs	r3, r3, r1
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	1ad1      	subs	r1, r2, r3
 8003560:	b2cb      	uxtb	r3, r1
 8003562:	747b      	strb	r3, [r7, #17]
                    break;
 8003564:	e02f      	b.n	80035c6 <HAL_GPIO_EXTI_Callback+0x14e>
                    sDate.Date = (sDate.Date % 31) + 1;
 8003566:	7bba      	ldrb	r2, [r7, #14]
 8003568:	4b3e      	ldr	r3, [pc, #248]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800356a:	fba3 1302 	umull	r1, r3, r3, r2
 800356e:	1ad1      	subs	r1, r2, r3
 8003570:	0849      	lsrs	r1, r1, #1
 8003572:	440b      	add	r3, r1
 8003574:	0919      	lsrs	r1, r3, #4
 8003576:	460b      	mov	r3, r1
 8003578:	015b      	lsls	r3, r3, #5
 800357a:	1a5b      	subs	r3, r3, r1
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	3301      	adds	r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	73bb      	strb	r3, [r7, #14]
                    break;
 8003586:	e01e      	b.n	80035c6 <HAL_GPIO_EXTI_Callback+0x14e>
                    sDate.Month = (sDate.Month % 12) + 1;
 8003588:	7b7a      	ldrb	r2, [r7, #13]
 800358a:	4b37      	ldr	r3, [pc, #220]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800358c:	fba3 1302 	umull	r1, r3, r3, r2
 8003590:	08d9      	lsrs	r1, r3, #3
 8003592:	460b      	mov	r3, r1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	440b      	add	r3, r1
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	737b      	strb	r3, [r7, #13]
                    break;
 80035a4:	e00f      	b.n	80035c6 <HAL_GPIO_EXTI_Callback+0x14e>
                    sDate.Year = (sDate.Year + 1) % 100; // 00 - 99
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	3301      	adds	r3, #1
 80035aa:	4a30      	ldr	r2, [pc, #192]	@ (800366c <HAL_GPIO_EXTI_Callback+0x1f4>)
 80035ac:	fb82 1203 	smull	r1, r2, r2, r3
 80035b0:	1151      	asrs	r1, r2, #5
 80035b2:	17da      	asrs	r2, r3, #31
 80035b4:	1a8a      	subs	r2, r1, r2
 80035b6:	2164      	movs	r1, #100	@ 0x64
 80035b8:	fb01 f202 	mul.w	r2, r1, r2
 80035bc:	1a9a      	subs	r2, r3, r2
 80035be:	b2d3      	uxtb	r3, r2
 80035c0:	73fb      	strb	r3, [r7, #15]
                    break;
 80035c2:	e000      	b.n	80035c6 <HAL_GPIO_EXTI_Callback+0x14e>
                    break;
 80035c4:	bf00      	nop
            HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80035c6:	f107 0310 	add.w	r3, r7, #16
 80035ca:	2200      	movs	r2, #0
 80035cc:	4619      	mov	r1, r3
 80035ce:	4823      	ldr	r0, [pc, #140]	@ (800365c <HAL_GPIO_EXTI_Callback+0x1e4>)
 80035d0:	f003 f91b 	bl	800680a <HAL_RTC_SetTime>
            HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	2200      	movs	r2, #0
 80035da:	4619      	mov	r1, r3
 80035dc:	481f      	ldr	r0, [pc, #124]	@ (800365c <HAL_GPIO_EXTI_Callback+0x1e4>)
 80035de:	f003 fa0c 	bl	80069fa <HAL_RTC_SetDate>
        	sprintf(timeBuf, "%02d:%02d", sTime.Hours, sTime.Minutes);
 80035e2:	7c3b      	ldrb	r3, [r7, #16]
 80035e4:	461a      	mov	r2, r3
 80035e6:	7c7b      	ldrb	r3, [r7, #17]
 80035e8:	4921      	ldr	r1, [pc, #132]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80035ea:	4822      	ldr	r0, [pc, #136]	@ (8003674 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80035ec:	f008 fb58 	bl	800bca0 <siprintf>
        	sprintf(dateBuf, "%02d:%02d:%02d", sDate.Date, sDate.Month, sDate.Year);
 80035f0:	7bbb      	ldrb	r3, [r7, #14]
 80035f2:	461a      	mov	r2, r3
 80035f4:	7b7b      	ldrb	r3, [r7, #13]
 80035f6:	4619      	mov	r1, r3
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	460b      	mov	r3, r1
 80035fe:	491e      	ldr	r1, [pc, #120]	@ (8003678 <HAL_GPIO_EXTI_Callback+0x200>)
 8003600:	481e      	ldr	r0, [pc, #120]	@ (800367c <HAL_GPIO_EXTI_Callback+0x204>)
 8003602:	f008 fb4d 	bl	800bca0 <siprintf>
            ST7735_WriteString(45, 40, timeBuf, Font_7x10, WHITE, BLACK);
 8003606:	4b1e      	ldr	r3, [pc, #120]	@ (8003680 <HAL_GPIO_EXTI_Callback+0x208>)
 8003608:	2200      	movs	r2, #0
 800360a:	9202      	str	r2, [sp, #8]
 800360c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003610:	9201      	str	r2, [sp, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	9200      	str	r2, [sp, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a16      	ldr	r2, [pc, #88]	@ (8003674 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800361a:	2128      	movs	r1, #40	@ 0x28
 800361c:	202d      	movs	r0, #45	@ 0x2d
 800361e:	f7fd fead 	bl	800137c <ST7735_WriteString>
            ST7735_WriteString(35, 60, dateBuf, Font_7x10, WHITE, BLACK);
 8003622:	4b17      	ldr	r3, [pc, #92]	@ (8003680 <HAL_GPIO_EXTI_Callback+0x208>)
 8003624:	2200      	movs	r2, #0
 8003626:	9202      	str	r2, [sp, #8]
 8003628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800362c:	9201      	str	r2, [sp, #4]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	9200      	str	r2, [sp, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a11      	ldr	r2, [pc, #68]	@ (800367c <HAL_GPIO_EXTI_Callback+0x204>)
 8003636:	213c      	movs	r1, #60	@ 0x3c
 8003638:	2023      	movs	r0, #35	@ 0x23
 800363a:	f7fd fe9f 	bl	800137c <ST7735_WriteString>
            last_button2_press = tick;
 800363e:	4a06      	ldr	r2, [pc, #24]	@ (8003658 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	6013      	str	r3, [r2, #0]
}
 8003644:	bf00      	nop
 8003646:	3728      	adds	r7, #40	@ 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	2000049c 	.word	0x2000049c
 8003650:	20000498 	.word	0x20000498
 8003654:	2aaaaaab 	.word	0x2aaaaaab
 8003658:	200004a0 	.word	0x200004a0
 800365c:	200002d8 	.word	0x200002d8
 8003660:	88888889 	.word	0x88888889
 8003664:	08421085 	.word	0x08421085
 8003668:	aaaaaaab 	.word	0xaaaaaaab
 800366c:	51eb851f 	.word	0x51eb851f
 8003670:	0800dfe0 	.word	0x0800dfe0
 8003674:	200003fc 	.word	0x200003fc
 8003678:	0800dfec 	.word	0x0800dfec
 800367c:	2000040c 	.word	0x2000040c
 8003680:	20000004 	.word	0x20000004

08003684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003688:	b672      	cpsid	i
}
 800368a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <Error_Handler+0x8>

08003690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <HAL_MspInit+0x4c>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	4a0f      	ldr	r2, [pc, #60]	@ (80036dc <HAL_MspInit+0x4c>)
 80036a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036a6:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <HAL_MspInit+0x4c>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	4b09      	ldr	r3, [pc, #36]	@ (80036dc <HAL_MspInit+0x4c>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	4a08      	ldr	r2, [pc, #32]	@ (80036dc <HAL_MspInit+0x4c>)
 80036bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_MspInit+0x4c>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800

080036e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	@ 0x30
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 031c 	add.w	r3, r7, #28
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3a      	ldr	r2, [pc, #232]	@ (80037e8 <HAL_I2C_MspInit+0x108>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d12c      	bne.n	800375c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	4b39      	ldr	r3, [pc, #228]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	4a38      	ldr	r2, [pc, #224]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	6313      	str	r3, [r2, #48]	@ 0x30
 8003712:	4b36      	ldr	r3, [pc, #216]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800371e:	23c0      	movs	r3, #192	@ 0xc0
 8003720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003722:	2312      	movs	r3, #18
 8003724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372a:	2303      	movs	r3, #3
 800372c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800372e:	2304      	movs	r3, #4
 8003730:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	4619      	mov	r1, r3
 8003738:	482d      	ldr	r0, [pc, #180]	@ (80037f0 <HAL_I2C_MspInit+0x110>)
 800373a:	f000 fc43 	bl	8003fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	4b2a      	ldr	r3, [pc, #168]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	4a29      	ldr	r2, [pc, #164]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 8003748:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800374c:	6413      	str	r3, [r2, #64]	@ 0x40
 800374e:	4b27      	ldr	r3, [pc, #156]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800375a:	e041      	b.n	80037e0 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a24      	ldr	r2, [pc, #144]	@ (80037f4 <HAL_I2C_MspInit+0x114>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d13c      	bne.n	80037e0 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	4a1f      	ldr	r2, [pc, #124]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	6313      	str	r3, [r2, #48]	@ 0x30
 8003776:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003788:	2312      	movs	r3, #18
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003790:	2303      	movs	r3, #3
 8003792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003794:	2304      	movs	r3, #4
 8003796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003798:	f107 031c 	add.w	r3, r7, #28
 800379c:	4619      	mov	r1, r3
 800379e:	4814      	ldr	r0, [pc, #80]	@ (80037f0 <HAL_I2C_MspInit+0x110>)
 80037a0:	f000 fc10 	bl	8003fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037a4:	2308      	movs	r3, #8
 80037a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037a8:	2312      	movs	r3, #18
 80037aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b0:	2303      	movs	r3, #3
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80037b4:	2309      	movs	r3, #9
 80037b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b8:	f107 031c 	add.w	r3, r7, #28
 80037bc:	4619      	mov	r1, r3
 80037be:	480c      	ldr	r0, [pc, #48]	@ (80037f0 <HAL_I2C_MspInit+0x110>)
 80037c0:	f000 fc00 	bl	8003fc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	4a07      	ldr	r2, [pc, #28]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 80037ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <HAL_I2C_MspInit+0x10c>)
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3730      	adds	r7, #48	@ 0x30
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40005400 	.word	0x40005400
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40020400 	.word	0x40020400
 80037f4:	40005800 	.word	0x40005800

080037f8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003800:	f107 030c 	add.w	r3, r7, #12
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a10      	ldr	r2, [pc, #64]	@ (8003858 <HAL_RTC_MspInit+0x60>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d119      	bne.n	800384e <HAL_RTC_MspInit+0x56>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800381a:	2302      	movs	r3, #2
 800381c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800381e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003822:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003824:	f107 030c 	add.w	r3, r7, #12
 8003828:	4618      	mov	r0, r3
 800382a:	f002 fe7d 	bl	8006528 <HAL_RCCEx_PeriphCLKConfig>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003834:	f7ff ff26 	bl	8003684 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003838:	4b08      	ldr	r3, [pc, #32]	@ (800385c <HAL_RTC_MspInit+0x64>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	2003      	movs	r0, #3
 8003844:	f000 fb87 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003848:	2003      	movs	r0, #3
 800384a:	f000 fba0 	bl	8003f8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800384e:	bf00      	nop
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40002800 	.word	0x40002800
 800385c:	42470e3c 	.word	0x42470e3c

08003860 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a19      	ldr	r2, [pc, #100]	@ (80038e4 <HAL_SPI_MspInit+0x84>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d12b      	bne.n	80038da <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	4b18      	ldr	r3, [pc, #96]	@ (80038e8 <HAL_SPI_MspInit+0x88>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	4a17      	ldr	r2, [pc, #92]	@ (80038e8 <HAL_SPI_MspInit+0x88>)
 800388c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003890:	6453      	str	r3, [r2, #68]	@ 0x44
 8003892:	4b15      	ldr	r3, [pc, #84]	@ (80038e8 <HAL_SPI_MspInit+0x88>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <HAL_SPI_MspInit+0x88>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <HAL_SPI_MspInit+0x88>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ae:	4b0e      	ldr	r3, [pc, #56]	@ (80038e8 <HAL_SPI_MspInit+0x88>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038ba:	23e0      	movs	r3, #224	@ 0xe0
 80038bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c6:	2303      	movs	r3, #3
 80038c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038ca:	2305      	movs	r3, #5
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	4619      	mov	r1, r3
 80038d4:	4805      	ldr	r0, [pc, #20]	@ (80038ec <HAL_SPI_MspInit+0x8c>)
 80038d6:	f000 fb75 	bl	8003fc4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80038da:	bf00      	nop
 80038dc:	3728      	adds	r7, #40	@ 0x28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40013000 	.word	0x40013000
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40020000 	.word	0x40020000

080038f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003938 <HAL_TIM_Base_MspInit+0x48>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d115      	bne.n	800392e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <HAL_TIM_Base_MspInit+0x4c>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	4a0c      	ldr	r2, [pc, #48]	@ (800393c <HAL_TIM_Base_MspInit+0x4c>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6453      	str	r3, [r2, #68]	@ 0x44
 8003912:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <HAL_TIM_Base_MspInit+0x4c>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800391e:	2200      	movs	r2, #0
 8003920:	2100      	movs	r1, #0
 8003922:	2019      	movs	r0, #25
 8003924:	f000 fb17 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003928:	2019      	movs	r0, #25
 800392a:	f000 fb30 	bl	8003f8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40023800 	.word	0x40023800

08003940 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	@ 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a19      	ldr	r2, [pc, #100]	@ (80039c4 <HAL_UART_MspInit+0x84>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d12b      	bne.n	80039ba <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <HAL_UART_MspInit+0x88>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <HAL_UART_MspInit+0x88>)
 800396c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003970:	6413      	str	r3, [r2, #64]	@ 0x40
 8003972:	4b15      	ldr	r3, [pc, #84]	@ (80039c8 <HAL_UART_MspInit+0x88>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	4b11      	ldr	r3, [pc, #68]	@ (80039c8 <HAL_UART_MspInit+0x88>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	4a10      	ldr	r2, [pc, #64]	@ (80039c8 <HAL_UART_MspInit+0x88>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6313      	str	r3, [r2, #48]	@ 0x30
 800398e:	4b0e      	ldr	r3, [pc, #56]	@ (80039c8 <HAL_UART_MspInit+0x88>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800399a:	230c      	movs	r3, #12
 800399c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	2302      	movs	r3, #2
 80039a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a6:	2303      	movs	r3, #3
 80039a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039aa:	2307      	movs	r3, #7
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ae:	f107 0314 	add.w	r3, r7, #20
 80039b2:	4619      	mov	r1, r3
 80039b4:	4805      	ldr	r0, [pc, #20]	@ (80039cc <HAL_UART_MspInit+0x8c>)
 80039b6:	f000 fb05 	bl	8003fc4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80039ba:	bf00      	nop
 80039bc:	3728      	adds	r7, #40	@ 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40004400 	.word	0x40004400
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020000 	.word	0x40020000

080039d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <NMI_Handler+0x4>

080039d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039dc:	bf00      	nop
 80039de:	e7fd      	b.n	80039dc <HardFault_Handler+0x4>

080039e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <MemManage_Handler+0x4>

080039e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ec:	bf00      	nop
 80039ee:	e7fd      	b.n	80039ec <BusFault_Handler+0x4>

080039f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <UsageFault_Handler+0x4>

080039f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a26:	f000 f977 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003a34:	4802      	ldr	r0, [pc, #8]	@ (8003a40 <RTC_WKUP_IRQHandler+0x10>)
 8003a36:	f003 fa8b 	bl	8006f50 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200002d8 	.word	0x200002d8

08003a44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a48:	4802      	ldr	r0, [pc, #8]	@ (8003a54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003a4a:	f003 ffa9 	bl	80079a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000350 	.word	0x20000350

08003a58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003a5c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003a60:	f000 fc4e 	bl	8004300 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003a64:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003a68:	f000 fc4a 	bl	8004300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return 1;
 8003a74:	2301      	movs	r3, #1
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <_kill>:

int _kill(int pid, int sig)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a8a:	f008 f9c1 	bl	800be10 <__errno>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2216      	movs	r2, #22
 8003a92:	601a      	str	r2, [r3, #0]
  return -1;
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <_exit>:

void _exit (int status)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ffe7 	bl	8003a80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ab2:	bf00      	nop
 8003ab4:	e7fd      	b.n	8003ab2 <_exit+0x12>

08003ab6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e00a      	b.n	8003ade <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ac8:	f3af 8000 	nop.w
 8003acc:	4601      	mov	r1, r0
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	60ba      	str	r2, [r7, #8]
 8003ad4:	b2ca      	uxtb	r2, r1
 8003ad6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3301      	adds	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	dbf0      	blt.n	8003ac8 <_read+0x12>
  }

  return len;
 8003ae6:	687b      	ldr	r3, [r7, #4]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e009      	b.n	8003b16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	60ba      	str	r2, [r7, #8]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3301      	adds	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	dbf1      	blt.n	8003b02 <_write+0x12>
  }
  return len;
 8003b1e:	687b      	ldr	r3, [r7, #4]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <_close>:

int _close(int file)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b50:	605a      	str	r2, [r3, #4]
  return 0;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <_isatty>:

int _isatty(int file)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b68:	2301      	movs	r3, #1
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b98:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <_sbrk+0x5c>)
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <_sbrk+0x60>)
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ba4:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <_sbrk+0x64>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bac:	4b11      	ldr	r3, [pc, #68]	@ (8003bf4 <_sbrk+0x64>)
 8003bae:	4a12      	ldr	r2, [pc, #72]	@ (8003bf8 <_sbrk+0x68>)
 8003bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bb2:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <_sbrk+0x64>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d207      	bcs.n	8003bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bc0:	f008 f926 	bl	800be10 <__errno>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	e009      	b.n	8003be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bd0:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <_sbrk+0x64>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bd6:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <_sbrk+0x64>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	4a05      	ldr	r2, [pc, #20]	@ (8003bf4 <_sbrk+0x64>)
 8003be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20010000 	.word	0x20010000
 8003bf0:	00000400 	.word	0x00000400
 8003bf4:	2000090c 	.word	0x2000090c
 8003bf8:	20000aa0 	.word	0x20000aa0

08003bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c00:	4b06      	ldr	r3, [pc, #24]	@ (8003c1c <SystemInit+0x20>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	4a05      	ldr	r2, [pc, #20]	@ (8003c1c <SystemInit+0x20>)
 8003c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003c24:	f7ff ffea 	bl	8003bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c28:	480c      	ldr	r0, [pc, #48]	@ (8003c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c2a:	490d      	ldr	r1, [pc, #52]	@ (8003c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c30:	e002      	b.n	8003c38 <LoopCopyDataInit>

08003c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c36:	3304      	adds	r3, #4

08003c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c3c:	d3f9      	bcc.n	8003c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c40:	4c0a      	ldr	r4, [pc, #40]	@ (8003c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c44:	e001      	b.n	8003c4a <LoopFillZerobss>

08003c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c48:	3204      	adds	r2, #4

08003c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c4c:	d3fb      	bcc.n	8003c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c4e:	f008 f8e5 	bl	800be1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c52:	f7fe ff47 	bl	8002ae4 <main>
  bx  lr    
 8003c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c60:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003c64:	0800ff8c 	.word	0x0800ff8c
  ldr r2, =_sbss
 8003c68:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003c6c:	20000a9c 	.word	0x20000a9c

08003c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c70:	e7fe      	b.n	8003c70 <ADC_IRQHandler>
	...

08003c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c78:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb4 <HAL_Init+0x40>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb4 <HAL_Init+0x40>)
 8003c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_Init+0x40>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb4 <HAL_Init+0x40>)
 8003c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c90:	4b08      	ldr	r3, [pc, #32]	@ (8003cb4 <HAL_Init+0x40>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a07      	ldr	r2, [pc, #28]	@ (8003cb4 <HAL_Init+0x40>)
 8003c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f000 f94f 	bl	8003f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ca2:	200f      	movs	r0, #15
 8003ca4:	f000 f808 	bl	8003cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ca8:	f7ff fcf2 	bl	8003690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023c00 	.word	0x40023c00

08003cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cc0:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <HAL_InitTick+0x54>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b12      	ldr	r3, [pc, #72]	@ (8003d10 <HAL_InitTick+0x58>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f967 	bl	8003faa <HAL_SYSTICK_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00e      	b.n	8003d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d80a      	bhi.n	8003d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cec:	2200      	movs	r2, #0
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f000 f92f 	bl	8003f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cf8:	4a06      	ldr	r2, [pc, #24]	@ (8003d14 <HAL_InitTick+0x5c>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000018 	.word	0x20000018
 8003d10:	20000020 	.word	0x20000020
 8003d14:	2000001c 	.word	0x2000001c

08003d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_IncTick+0x20>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000020 	.word	0x20000020
 8003d3c:	20000910 	.word	0x20000910

08003d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return uwTick;
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <HAL_GetTick+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000910 	.word	0x20000910

08003d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d60:	f7ff ffee 	bl	8003d40 <HAL_GetTick>
 8003d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d005      	beq.n	8003d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <HAL_Delay+0x44>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d7e:	bf00      	nop
 8003d80:	f7ff ffde 	bl	8003d40 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d8f7      	bhi.n	8003d80 <HAL_Delay+0x28>
  {
  }
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000020 	.word	0x20000020

08003da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd2:	4a04      	ldr	r2, [pc, #16]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	60d3      	str	r3, [r2, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <__NVIC_GetPriorityGrouping+0x18>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0b      	blt.n	8003e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	@ (8003e3c <__NVIC_EnableIRQ+0x38>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db0a      	blt.n	8003e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	490c      	ldr	r1, [pc, #48]	@ (8003e8c <__NVIC_SetPriority+0x4c>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	440b      	add	r3, r1
 8003e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e68:	e00a      	b.n	8003e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4908      	ldr	r1, [pc, #32]	@ (8003e90 <__NVIC_SetPriority+0x50>)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3b04      	subs	r3, #4
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	761a      	strb	r2, [r3, #24]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e100 	.word	0xe000e100
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	@ 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d902      	bls.n	8003ec4 <NVIC_EncodePriority+0x30>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3b03      	subs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <NVIC_EncodePriority+0x32>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	4313      	orrs	r3, r2
         );
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	@ 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f0c:	d301      	bcc.n	8003f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00f      	b.n	8003f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f12:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <SysTick_Config+0x40>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f7ff ff8e 	bl	8003e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <SysTick_Config+0x40>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2a:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <SysTick_Config+0x40>)
 8003f2c:	2207      	movs	r2, #7
 8003f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	e000e010 	.word	0xe000e010

08003f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff29 	bl	8003da0 <__NVIC_SetPriorityGrouping>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f68:	f7ff ff3e 	bl	8003de8 <__NVIC_GetPriorityGrouping>
 8003f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff ff8e 	bl	8003e94 <NVIC_EncodePriority>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff5d 	bl	8003e40 <__NVIC_SetPriority>
}
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff31 	bl	8003e04 <__NVIC_EnableIRQ>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffa2 	bl	8003efc <SysTick_Config>
 8003fb8:	4603      	mov	r3, r0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	@ 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	e159      	b.n	8004294 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	f040 8148 	bne.w	800428e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d005      	beq.n	8004016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004012:	2b02      	cmp	r3, #2
 8004014:	d130      	bne.n	8004078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800404c:	2201      	movs	r2, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 0201 	and.w	r2, r3, #1
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d017      	beq.n	80040b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d123      	bne.n	8004108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	220f      	movs	r2, #15
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	08da      	lsrs	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3208      	adds	r2, #8
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	2203      	movs	r2, #3
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0203 	and.w	r2, r3, #3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80a2 	beq.w	800428e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	4b57      	ldr	r3, [pc, #348]	@ (80042ac <HAL_GPIO_Init+0x2e8>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	4a56      	ldr	r2, [pc, #344]	@ (80042ac <HAL_GPIO_Init+0x2e8>)
 8004154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004158:	6453      	str	r3, [r2, #68]	@ 0x44
 800415a:	4b54      	ldr	r3, [pc, #336]	@ (80042ac <HAL_GPIO_Init+0x2e8>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004166:	4a52      	ldr	r2, [pc, #328]	@ (80042b0 <HAL_GPIO_Init+0x2ec>)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	3302      	adds	r3, #2
 800416e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	220f      	movs	r2, #15
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a49      	ldr	r2, [pc, #292]	@ (80042b4 <HAL_GPIO_Init+0x2f0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d019      	beq.n	80041c6 <HAL_GPIO_Init+0x202>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a48      	ldr	r2, [pc, #288]	@ (80042b8 <HAL_GPIO_Init+0x2f4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_GPIO_Init+0x1fe>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a47      	ldr	r2, [pc, #284]	@ (80042bc <HAL_GPIO_Init+0x2f8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00d      	beq.n	80041be <HAL_GPIO_Init+0x1fa>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a46      	ldr	r2, [pc, #280]	@ (80042c0 <HAL_GPIO_Init+0x2fc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <HAL_GPIO_Init+0x1f6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a45      	ldr	r2, [pc, #276]	@ (80042c4 <HAL_GPIO_Init+0x300>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <HAL_GPIO_Init+0x1f2>
 80041b2:	2304      	movs	r3, #4
 80041b4:	e008      	b.n	80041c8 <HAL_GPIO_Init+0x204>
 80041b6:	2307      	movs	r3, #7
 80041b8:	e006      	b.n	80041c8 <HAL_GPIO_Init+0x204>
 80041ba:	2303      	movs	r3, #3
 80041bc:	e004      	b.n	80041c8 <HAL_GPIO_Init+0x204>
 80041be:	2302      	movs	r3, #2
 80041c0:	e002      	b.n	80041c8 <HAL_GPIO_Init+0x204>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_GPIO_Init+0x204>
 80041c6:	2300      	movs	r3, #0
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	f002 0203 	and.w	r2, r2, #3
 80041ce:	0092      	lsls	r2, r2, #2
 80041d0:	4093      	lsls	r3, r2
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041d8:	4935      	ldr	r1, [pc, #212]	@ (80042b0 <HAL_GPIO_Init+0x2ec>)
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	3302      	adds	r3, #2
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041e6:	4b38      	ldr	r3, [pc, #224]	@ (80042c8 <HAL_GPIO_Init+0x304>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800420a:	4a2f      	ldr	r2, [pc, #188]	@ (80042c8 <HAL_GPIO_Init+0x304>)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004210:	4b2d      	ldr	r3, [pc, #180]	@ (80042c8 <HAL_GPIO_Init+0x304>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004234:	4a24      	ldr	r2, [pc, #144]	@ (80042c8 <HAL_GPIO_Init+0x304>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800423a:	4b23      	ldr	r3, [pc, #140]	@ (80042c8 <HAL_GPIO_Init+0x304>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800425e:	4a1a      	ldr	r2, [pc, #104]	@ (80042c8 <HAL_GPIO_Init+0x304>)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004264:	4b18      	ldr	r3, [pc, #96]	@ (80042c8 <HAL_GPIO_Init+0x304>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004288:	4a0f      	ldr	r2, [pc, #60]	@ (80042c8 <HAL_GPIO_Init+0x304>)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3301      	adds	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b0f      	cmp	r3, #15
 8004298:	f67f aea2 	bls.w	8003fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	3724      	adds	r7, #36	@ 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40013800 	.word	0x40013800
 80042b4:	40020000 	.word	0x40020000
 80042b8:	40020400 	.word	0x40020400
 80042bc:	40020800 	.word	0x40020800
 80042c0:	40020c00 	.word	0x40020c00
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40013c00 	.word	0x40013c00

080042cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]
 80042d8:	4613      	mov	r3, r2
 80042da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042dc:	787b      	ldrb	r3, [r7, #1]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042e8:	e003      	b.n	80042f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ea:	887b      	ldrh	r3, [r7, #2]
 80042ec:	041a      	lsls	r2, r3, #16
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	619a      	str	r2, [r3, #24]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800430a:	4b08      	ldr	r3, [pc, #32]	@ (800432c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d006      	beq.n	8004324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004316:	4a05      	ldr	r2, [pc, #20]	@ (800432c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff f8aa 	bl	8003478 <HAL_GPIO_EXTI_Callback>
  }
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40013c00 	.word	0x40013c00

08004330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e12b      	b.n	800459a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff f9c2 	bl	80036e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2224      	movs	r2, #36	@ 0x24
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004394:	f002 f8a0 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8004398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4a81      	ldr	r2, [pc, #516]	@ (80045a4 <HAL_I2C_Init+0x274>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d807      	bhi.n	80043b4 <HAL_I2C_Init+0x84>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a80      	ldr	r2, [pc, #512]	@ (80045a8 <HAL_I2C_Init+0x278>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bf94      	ite	ls
 80043ac:	2301      	movls	r3, #1
 80043ae:	2300      	movhi	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e006      	b.n	80043c2 <HAL_I2C_Init+0x92>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a7d      	ldr	r2, [pc, #500]	@ (80045ac <HAL_I2C_Init+0x27c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	bf94      	ite	ls
 80043bc:	2301      	movls	r3, #1
 80043be:	2300      	movhi	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0e7      	b.n	800459a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a78      	ldr	r2, [pc, #480]	@ (80045b0 <HAL_I2C_Init+0x280>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0c9b      	lsrs	r3, r3, #18
 80043d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a6a      	ldr	r2, [pc, #424]	@ (80045a4 <HAL_I2C_Init+0x274>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d802      	bhi.n	8004404 <HAL_I2C_Init+0xd4>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3301      	adds	r3, #1
 8004402:	e009      	b.n	8004418 <HAL_I2C_Init+0xe8>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	4a69      	ldr	r2, [pc, #420]	@ (80045b4 <HAL_I2C_Init+0x284>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	3301      	adds	r3, #1
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800442a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	495c      	ldr	r1, [pc, #368]	@ (80045a4 <HAL_I2C_Init+0x274>)
 8004434:	428b      	cmp	r3, r1
 8004436:	d819      	bhi.n	800446c <HAL_I2C_Init+0x13c>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1e59      	subs	r1, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	fbb1 f3f3 	udiv	r3, r1, r3
 8004446:	1c59      	adds	r1, r3, #1
 8004448:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800444c:	400b      	ands	r3, r1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_I2C_Init+0x138>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1e59      	subs	r1, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004460:	3301      	adds	r3, #1
 8004462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004466:	e051      	b.n	800450c <HAL_I2C_Init+0x1dc>
 8004468:	2304      	movs	r3, #4
 800446a:	e04f      	b.n	800450c <HAL_I2C_Init+0x1dc>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d111      	bne.n	8004498 <HAL_I2C_Init+0x168>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1e58      	subs	r0, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	440b      	add	r3, r1
 8004482:	fbb0 f3f3 	udiv	r3, r0, r3
 8004486:	3301      	adds	r3, #1
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e012      	b.n	80044be <HAL_I2C_Init+0x18e>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1e58      	subs	r0, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	0099      	lsls	r1, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ae:	3301      	adds	r3, #1
 80044b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_I2C_Init+0x196>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e022      	b.n	800450c <HAL_I2C_Init+0x1dc>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10e      	bne.n	80044ec <HAL_I2C_Init+0x1bc>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1e58      	subs	r0, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	440b      	add	r3, r1
 80044dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ea:	e00f      	b.n	800450c <HAL_I2C_Init+0x1dc>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1e58      	subs	r0, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	0099      	lsls	r1, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004502:	3301      	adds	r3, #1
 8004504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004508:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	6809      	ldr	r1, [r1, #0]
 8004510:	4313      	orrs	r3, r2
 8004512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69da      	ldr	r2, [r3, #28]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800453a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6911      	ldr	r1, [r2, #16]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68d2      	ldr	r2, [r2, #12]
 8004546:	4311      	orrs	r1, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	430b      	orrs	r3, r1
 800454e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	000186a0 	.word	0x000186a0
 80045a8:	001e847f 	.word	0x001e847f
 80045ac:	003d08ff 	.word	0x003d08ff
 80045b0:	431bde83 	.word	0x431bde83
 80045b4:	10624dd3 	.word	0x10624dd3

080045b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	461a      	mov	r2, r3
 80045c4:	460b      	mov	r3, r1
 80045c6:	817b      	strh	r3, [r7, #10]
 80045c8:	4613      	mov	r3, r2
 80045ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045cc:	f7ff fbb8 	bl	8003d40 <HAL_GetTick>
 80045d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b20      	cmp	r3, #32
 80045dc:	f040 80e0 	bne.w	80047a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	2319      	movs	r3, #25
 80045e6:	2201      	movs	r2, #1
 80045e8:	4970      	ldr	r1, [pc, #448]	@ (80047ac <HAL_I2C_Master_Transmit+0x1f4>)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f001 f90e 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
 80045f8:	e0d3      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_I2C_Master_Transmit+0x50>
 8004604:	2302      	movs	r3, #2
 8004606:	e0cc      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d007      	beq.n	800462e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800463c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2221      	movs	r2, #33	@ 0x21
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2210      	movs	r2, #16
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	893a      	ldrh	r2, [r7, #8]
 800465e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a50      	ldr	r2, [pc, #320]	@ (80047b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800466e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004670:	8979      	ldrh	r1, [r7, #10]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 fdfa 	bl	8005270 <I2C_MasterRequestWrite>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e08d      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800469c:	e066      	b.n	800476c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	6a39      	ldr	r1, [r7, #32]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f001 f9cc 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00d      	beq.n	80046ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d107      	bne.n	80046c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e06b      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d11b      	bne.n	8004740 <HAL_I2C_Master_Transmit+0x188>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d017      	beq.n	8004740 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	6a39      	ldr	r1, [r7, #32]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f001 f9c3 	bl	8005ad0 <I2C_WaitOnBTFFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00d      	beq.n	800476c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	2b04      	cmp	r3, #4
 8004756:	d107      	bne.n	8004768 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004766:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e01a      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d194      	bne.n	800469e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	00100002 	.word	0x00100002
 80047b0:	ffff0000 	.word	0xffff0000

080047b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08c      	sub	sp, #48	@ 0x30
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	461a      	mov	r2, r3
 80047c0:	460b      	mov	r3, r1
 80047c2:	817b      	strh	r3, [r7, #10]
 80047c4:	4613      	mov	r3, r2
 80047c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c8:	f7ff faba 	bl	8003d40 <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	f040 8217 	bne.w	8004c0a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	2319      	movs	r3, #25
 80047e2:	2201      	movs	r2, #1
 80047e4:	497c      	ldr	r1, [pc, #496]	@ (80049d8 <HAL_I2C_Master_Receive+0x224>)
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f001 f810 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
 80047f4:	e20a      	b.n	8004c0c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_I2C_Master_Receive+0x50>
 8004800:	2302      	movs	r3, #2
 8004802:	e203      	b.n	8004c0c <HAL_I2C_Master_Receive+0x458>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d007      	beq.n	800482a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004838:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2222      	movs	r2, #34	@ 0x22
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2210      	movs	r2, #16
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	893a      	ldrh	r2, [r7, #8]
 800485a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a5c      	ldr	r2, [pc, #368]	@ (80049dc <HAL_I2C_Master_Receive+0x228>)
 800486a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800486c:	8979      	ldrh	r1, [r7, #10]
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fd7e 	bl	8005374 <I2C_MasterRequestRead>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e1c4      	b.n	8004c0c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d113      	bne.n	80048b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	623b      	str	r3, [r7, #32]
 800489e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e198      	b.n	8004be4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d11b      	bne.n	80048f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e178      	b.n	8004be4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d11b      	bne.n	8004932 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004908:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	e158      	b.n	8004be4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004958:	e144      	b.n	8004be4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495e:	2b03      	cmp	r3, #3
 8004960:	f200 80f1 	bhi.w	8004b46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004968:	2b01      	cmp	r3, #1
 800496a:	d123      	bne.n	80049b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f001 f8f5 	bl	8005b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e145      	b.n	8004c0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049b2:	e117      	b.n	8004be4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d14e      	bne.n	8004a5a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	2200      	movs	r2, #0
 80049c4:	4906      	ldr	r1, [pc, #24]	@ (80049e0 <HAL_I2C_Master_Receive+0x22c>)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 ff20 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e11a      	b.n	8004c0c <HAL_I2C_Master_Receive+0x458>
 80049d6:	bf00      	nop
 80049d8:	00100002 	.word	0x00100002
 80049dc:	ffff0000 	.word	0xffff0000
 80049e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a58:	e0c4      	b.n	8004be4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	2200      	movs	r2, #0
 8004a62:	496c      	ldr	r1, [pc, #432]	@ (8004c14 <HAL_I2C_Master_Receive+0x460>)
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fed1 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0cb      	b.n	8004c0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	2200      	movs	r2, #0
 8004abe:	4955      	ldr	r1, [pc, #340]	@ (8004c14 <HAL_I2C_Master_Receive+0x460>)
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fea3 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e09d      	b.n	8004c0c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b44:	e04e      	b.n	8004be4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f001 f808 	bl	8005b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e058      	b.n	8004c0c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d124      	bne.n	8004be4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d107      	bne.n	8004bb2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f47f aeb6 	bne.w	800495a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e000      	b.n	8004c0c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c0a:	2302      	movs	r3, #2
  }
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3728      	adds	r7, #40	@ 0x28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	00010004 	.word	0x00010004

08004c18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	817b      	strh	r3, [r7, #10]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	813b      	strh	r3, [r7, #8]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c32:	f7ff f885 	bl	8003d40 <HAL_GetTick>
 8004c36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	f040 80d9 	bne.w	8004df8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	2319      	movs	r3, #25
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	496d      	ldr	r1, [pc, #436]	@ (8004e04 <HAL_I2C_Mem_Write+0x1ec>)
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fddb 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e0cc      	b.n	8004dfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_I2C_Mem_Write+0x56>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e0c5      	b.n	8004dfa <HAL_I2C_Mem_Write+0x1e2>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d007      	beq.n	8004c94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2221      	movs	r2, #33	@ 0x21
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2240      	movs	r2, #64	@ 0x40
 8004cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a3a      	ldr	r2, [r7, #32]
 8004cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a4d      	ldr	r2, [pc, #308]	@ (8004e08 <HAL_I2C_Mem_Write+0x1f0>)
 8004cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cd6:	88f8      	ldrh	r0, [r7, #6]
 8004cd8:	893a      	ldrh	r2, [r7, #8]
 8004cda:	8979      	ldrh	r1, [r7, #10]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fc12 	bl	8005510 <I2C_RequestMemoryWrite>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d052      	beq.n	8004d98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e081      	b.n	8004dfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fea0 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00d      	beq.n	8004d22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d107      	bne.n	8004d1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e06b      	b.n	8004dfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	781a      	ldrb	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d11b      	bne.n	8004d98 <HAL_I2C_Mem_Write+0x180>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d017      	beq.n	8004d98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1aa      	bne.n	8004cf6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fe93 	bl	8005ad0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00d      	beq.n	8004dcc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d107      	bne.n	8004dc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e016      	b.n	8004dfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	e000      	b.n	8004dfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
  }
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	00100002 	.word	0x00100002
 8004e08:	ffff0000 	.word	0xffff0000

08004e0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	@ 0x30
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	4608      	mov	r0, r1
 8004e16:	4611      	mov	r1, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	817b      	strh	r3, [r7, #10]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	813b      	strh	r3, [r7, #8]
 8004e22:	4613      	mov	r3, r2
 8004e24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e26:	f7fe ff8b 	bl	8003d40 <HAL_GetTick>
 8004e2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	f040 8214 	bne.w	8005262 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2319      	movs	r3, #25
 8004e40:	2201      	movs	r2, #1
 8004e42:	497b      	ldr	r1, [pc, #492]	@ (8005030 <HAL_I2C_Mem_Read+0x224>)
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 fce1 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
 8004e52:	e207      	b.n	8005264 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_I2C_Mem_Read+0x56>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e200      	b.n	8005264 <HAL_I2C_Mem_Read+0x458>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d007      	beq.n	8004e88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2222      	movs	r2, #34	@ 0x22
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2240      	movs	r2, #64	@ 0x40
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a5b      	ldr	r2, [pc, #364]	@ (8005034 <HAL_I2C_Mem_Read+0x228>)
 8004ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eca:	88f8      	ldrh	r0, [r7, #6]
 8004ecc:	893a      	ldrh	r2, [r7, #8]
 8004ece:	8979      	ldrh	r1, [r7, #10]
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	4603      	mov	r3, r0
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fbae 	bl	800563c <I2C_RequestMemoryRead>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e1bc      	b.n	8005264 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d113      	bne.n	8004f1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	623b      	str	r3, [r7, #32]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	623b      	str	r3, [r7, #32]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	623b      	str	r3, [r7, #32]
 8004f06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e190      	b.n	800523c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d11b      	bne.n	8004f5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e170      	b.n	800523c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d11b      	bne.n	8004f9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	e150      	b.n	800523c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fb0:	e144      	b.n	800523c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	f200 80f1 	bhi.w	800519e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d123      	bne.n	800500c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fdc9 	bl	8005b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e145      	b.n	8005264 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800500a:	e117      	b.n	800523c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005010:	2b02      	cmp	r3, #2
 8005012:	d14e      	bne.n	80050b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	2200      	movs	r2, #0
 800501c:	4906      	ldr	r1, [pc, #24]	@ (8005038 <HAL_I2C_Mem_Read+0x22c>)
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fbf4 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d008      	beq.n	800503c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e11a      	b.n	8005264 <HAL_I2C_Mem_Read+0x458>
 800502e:	bf00      	nop
 8005030:	00100002 	.word	0x00100002
 8005034:	ffff0000 	.word	0xffff0000
 8005038:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800504a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050b0:	e0c4      	b.n	800523c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	2200      	movs	r2, #0
 80050ba:	496c      	ldr	r1, [pc, #432]	@ (800526c <HAL_I2C_Mem_Read+0x460>)
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fba5 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0cb      	b.n	8005264 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005114:	2200      	movs	r2, #0
 8005116:	4955      	ldr	r1, [pc, #340]	@ (800526c <HAL_I2C_Mem_Read+0x460>)
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fb77 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e09d      	b.n	8005264 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005136:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800519c:	e04e      	b.n	800523c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fcdc 	bl	8005b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e058      	b.n	8005264 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051da:	b29b      	uxth	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d124      	bne.n	800523c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d107      	bne.n	800520a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005208:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f aeb6 	bne.w	8004fb2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	4618      	mov	r0, r3
 8005266:	3728      	adds	r7, #40	@ 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	00010004 	.word	0x00010004

08005270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	460b      	mov	r3, r1
 800527e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d006      	beq.n	800529a <I2C_MasterRequestWrite+0x2a>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d003      	beq.n	800529a <I2C_MasterRequestWrite+0x2a>
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005298:	d108      	bne.n	80052ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e00b      	b.n	80052c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b0:	2b12      	cmp	r3, #18
 80052b2:	d107      	bne.n	80052c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fa9b 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00d      	beq.n	80052f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ea:	d103      	bne.n	80052f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e035      	b.n	8005364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005300:	d108      	bne.n	8005314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005302:	897b      	ldrh	r3, [r7, #10]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005310:	611a      	str	r2, [r3, #16]
 8005312:	e01b      	b.n	800534c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005314:	897b      	ldrh	r3, [r7, #10]
 8005316:	11db      	asrs	r3, r3, #7
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 0306 	and.w	r3, r3, #6
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f063 030f 	orn	r3, r3, #15
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	490e      	ldr	r1, [pc, #56]	@ (800536c <I2C_MasterRequestWrite+0xfc>)
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fae4 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e010      	b.n	8005364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005342:	897b      	ldrh	r3, [r7, #10]
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4907      	ldr	r1, [pc, #28]	@ (8005370 <I2C_MasterRequestWrite+0x100>)
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fad4 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	00010008 	.word	0x00010008
 8005370:	00010002 	.word	0x00010002

08005374 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	460b      	mov	r3, r1
 8005382:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005398:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d006      	beq.n	80053ae <I2C_MasterRequestRead+0x3a>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d003      	beq.n	80053ae <I2C_MasterRequestRead+0x3a>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053ac:	d108      	bne.n	80053c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e00b      	b.n	80053d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c4:	2b11      	cmp	r3, #17
 80053c6:	d107      	bne.n	80053d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fa11 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00d      	beq.n	800540c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053fe:	d103      	bne.n	8005408 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005406:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e079      	b.n	8005500 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005414:	d108      	bne.n	8005428 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005416:	897b      	ldrh	r3, [r7, #10]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	b2da      	uxtb	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	611a      	str	r2, [r3, #16]
 8005426:	e05f      	b.n	80054e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005428:	897b      	ldrh	r3, [r7, #10]
 800542a:	11db      	asrs	r3, r3, #7
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 0306 	and.w	r3, r3, #6
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f063 030f 	orn	r3, r3, #15
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	4930      	ldr	r1, [pc, #192]	@ (8005508 <I2C_MasterRequestRead+0x194>)
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fa5a 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e054      	b.n	8005500 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005456:	897b      	ldrh	r3, [r7, #10]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4929      	ldr	r1, [pc, #164]	@ (800550c <I2C_MasterRequestRead+0x198>)
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fa4a 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e044      	b.n	8005500 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800549a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f9af 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054c2:	d103      	bne.n	80054cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e017      	b.n	8005500 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80054d0:	897b      	ldrh	r3, [r7, #10]
 80054d2:	11db      	asrs	r3, r3, #7
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 0306 	and.w	r3, r3, #6
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f063 030e 	orn	r3, r3, #14
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4907      	ldr	r1, [pc, #28]	@ (800550c <I2C_MasterRequestRead+0x198>)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fa06 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	00010008 	.word	0x00010008
 800550c:	00010002 	.word	0x00010002

08005510 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	4608      	mov	r0, r1
 800551a:	4611      	mov	r1, r2
 800551c:	461a      	mov	r2, r3
 800551e:	4603      	mov	r3, r0
 8005520:	817b      	strh	r3, [r7, #10]
 8005522:	460b      	mov	r3, r1
 8005524:	813b      	strh	r3, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	2200      	movs	r2, #0
 8005542:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f960 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00d      	beq.n	800556e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005560:	d103      	bne.n	800556a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005568:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e05f      	b.n	800562e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800556e:	897b      	ldrh	r3, [r7, #10]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800557c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	492d      	ldr	r1, [pc, #180]	@ (8005638 <I2C_RequestMemoryWrite+0x128>)
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f9bb 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e04c      	b.n	800562e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ac:	6a39      	ldr	r1, [r7, #32]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fa46 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00d      	beq.n	80055d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d107      	bne.n	80055d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e02b      	b.n	800562e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d105      	bne.n	80055e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055dc:	893b      	ldrh	r3, [r7, #8]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	611a      	str	r2, [r3, #16]
 80055e6:	e021      	b.n	800562c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055e8:	893b      	ldrh	r3, [r7, #8]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f8:	6a39      	ldr	r1, [r7, #32]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fa20 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	2b04      	cmp	r3, #4
 800560c:	d107      	bne.n	800561e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800561c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e005      	b.n	800562e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005622:	893b      	ldrh	r3, [r7, #8]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	00010002 	.word	0x00010002

0800563c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	461a      	mov	r2, r3
 800564a:	4603      	mov	r3, r0
 800564c:	817b      	strh	r3, [r7, #10]
 800564e:	460b      	mov	r3, r1
 8005650:	813b      	strh	r3, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005664:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005674:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2200      	movs	r2, #0
 800567e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f8c2 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569c:	d103      	bne.n	80056a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e0aa      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056aa:	897b      	ldrh	r3, [r7, #10]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	6a3a      	ldr	r2, [r7, #32]
 80056be:	4952      	ldr	r1, [pc, #328]	@ (8005808 <I2C_RequestMemoryRead+0x1cc>)
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f91d 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e097      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e8:	6a39      	ldr	r1, [r7, #32]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f9a8 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d107      	bne.n	800570e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800570c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e076      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d105      	bne.n	8005724 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005718:	893b      	ldrh	r3, [r7, #8]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	e021      	b.n	8005768 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005724:	893b      	ldrh	r3, [r7, #8]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b29b      	uxth	r3, r3
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005734:	6a39      	ldr	r1, [r7, #32]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f982 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	2b04      	cmp	r3, #4
 8005748:	d107      	bne.n	800575a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005758:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e050      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800575e:	893b      	ldrh	r3, [r7, #8]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576a:	6a39      	ldr	r1, [r7, #32]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 f967 	bl	8005a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577c:	2b04      	cmp	r3, #4
 800577e:	d107      	bne.n	8005790 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e035      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f82b 	bl	800580c <I2C_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ca:	d103      	bne.n	80057d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e013      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057d8:	897b      	ldrh	r3, [r7, #10]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	6a3a      	ldr	r2, [r7, #32]
 80057ec:	4906      	ldr	r1, [pc, #24]	@ (8005808 <I2C_RequestMemoryRead+0x1cc>)
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f886 	bl	8005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	00010002 	.word	0x00010002

0800580c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800581c:	e048      	b.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d044      	beq.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005826:	f7fe fa8b 	bl	8003d40 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d302      	bcc.n	800583c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d139      	bne.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	0c1b      	lsrs	r3, r3, #16
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d10d      	bne.n	8005862 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	43da      	mvns	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4013      	ands	r3, r2
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	e00c      	b.n	800587c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	43da      	mvns	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4013      	ands	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	429a      	cmp	r2, r3
 8005880:	d116      	bne.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e023      	b.n	80058f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d10d      	bne.n	80058d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	43da      	mvns	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4013      	ands	r3, r2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf0c      	ite	eq
 80058cc:	2301      	moveq	r3, #1
 80058ce:	2300      	movne	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	e00c      	b.n	80058f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	43da      	mvns	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4013      	ands	r3, r2
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d093      	beq.n	800581e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800590e:	e071      	b.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800591e:	d123      	bne.n	8005968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800592e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005954:	f043 0204 	orr.w	r2, r3, #4
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e067      	b.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d041      	beq.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005970:	f7fe f9e6 	bl	8003d40 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d136      	bne.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	0c1b      	lsrs	r3, r3, #16
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10c      	bne.n	80059aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	43da      	mvns	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf14      	ite	ne
 80059a2:	2301      	movne	r3, #1
 80059a4:	2300      	moveq	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	e00b      	b.n	80059c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	43da      	mvns	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4013      	ands	r3, r2
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf14      	ite	ne
 80059bc:	2301      	movne	r3, #1
 80059be:	2300      	moveq	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	f043 0220 	orr.w	r2, r3, #32
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e021      	b.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d10c      	bne.n	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	43da      	mvns	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e00b      	b.n	8005a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	43da      	mvns	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bf14      	ite	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f af6d 	bne.w	8005910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a4c:	e034      	b.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f8e3 	bl	8005c1a <I2C_IsAcknowledgeFailed>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e034      	b.n	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d028      	beq.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a66:	f7fe f96b 	bl	8003d40 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d302      	bcc.n	8005a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11d      	bne.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b80      	cmp	r3, #128	@ 0x80
 8005a88:	d016      	beq.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa4:	f043 0220 	orr.w	r2, r3, #32
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e007      	b.n	8005ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac2:	2b80      	cmp	r3, #128	@ 0x80
 8005ac4:	d1c3      	bne.n	8005a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005adc:	e034      	b.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f89b 	bl	8005c1a <I2C_IsAcknowledgeFailed>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e034      	b.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d028      	beq.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af6:	f7fe f923 	bl	8003d40 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d11d      	bne.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d016      	beq.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	f043 0220 	orr.w	r2, r3, #32
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e007      	b.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d1c3      	bne.n	8005ade <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b6c:	e049      	b.n	8005c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d119      	bne.n	8005bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0210 	mvn.w	r2, #16
 8005b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e030      	b.n	8005c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb0:	f7fe f8c6 	bl	8003d40 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d302      	bcc.n	8005bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d11d      	bne.n	8005c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd0:	2b40      	cmp	r3, #64	@ 0x40
 8005bd2:	d016      	beq.n	8005c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	f043 0220 	orr.w	r2, r3, #32
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e007      	b.n	8005c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0c:	2b40      	cmp	r3, #64	@ 0x40
 8005c0e:	d1ae      	bne.n	8005b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c30:	d11b      	bne.n	8005c6a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c3a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c56:	f043 0204 	orr.w	r2, r3, #4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e267      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d075      	beq.n	8005d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c96:	4b88      	ldr	r3, [pc, #544]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d00c      	beq.n	8005cbc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ca2:	4b85      	ldr	r3, [pc, #532]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d112      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cae:	4b82      	ldr	r3, [pc, #520]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cba:	d10b      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d05b      	beq.n	8005d80 <HAL_RCC_OscConfig+0x108>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d157      	bne.n	8005d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e242      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cdc:	d106      	bne.n	8005cec <HAL_RCC_OscConfig+0x74>
 8005cde:	4b76      	ldr	r3, [pc, #472]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a75      	ldr	r2, [pc, #468]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e01d      	b.n	8005d28 <HAL_RCC_OscConfig+0xb0>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0x98>
 8005cf6:	4b70      	ldr	r3, [pc, #448]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a6f      	ldr	r2, [pc, #444]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	4b6d      	ldr	r3, [pc, #436]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6c      	ldr	r2, [pc, #432]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCC_OscConfig+0xb0>
 8005d10:	4b69      	ldr	r3, [pc, #420]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a68      	ldr	r2, [pc, #416]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	4b66      	ldr	r3, [pc, #408]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a65      	ldr	r2, [pc, #404]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d013      	beq.n	8005d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fe f806 	bl	8003d40 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fe f802 	bl	8003d40 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	@ 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e207      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0xc0>
 8005d56:	e014      	b.n	8005d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7fd fff2 	bl	8003d40 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d60:	f7fd ffee 	bl	8003d40 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	@ 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e1f3      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d72:	4b51      	ldr	r3, [pc, #324]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0xe8>
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d063      	beq.n	8005e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d9a:	4b47      	ldr	r3, [pc, #284]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d11c      	bne.n	8005de0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005da6:	4b44      	ldr	r3, [pc, #272]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db2:	4b41      	ldr	r3, [pc, #260]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x152>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e1c7      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dca:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4937      	ldr	r1, [pc, #220]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dde:	e03a      	b.n	8005e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005de8:	4b34      	ldr	r3, [pc, #208]	@ (8005ebc <HAL_RCC_OscConfig+0x244>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fd ffa7 	bl	8003d40 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df6:	f7fd ffa3 	bl	8003d40 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e1a8      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e08:	4b2b      	ldr	r3, [pc, #172]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e14:	4b28      	ldr	r3, [pc, #160]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4925      	ldr	r1, [pc, #148]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e2a:	4b24      	ldr	r3, [pc, #144]	@ (8005ebc <HAL_RCC_OscConfig+0x244>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fd ff86 	bl	8003d40 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e38:	f7fd ff82 	bl	8003d40 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e187      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d036      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e6a:	4b15      	ldr	r3, [pc, #84]	@ (8005ec0 <HAL_RCC_OscConfig+0x248>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e70:	f7fd ff66 	bl	8003d40 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e78:	f7fd ff62 	bl	8003d40 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e167      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x200>
 8005e96:	e01b      	b.n	8005ed0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e98:	4b09      	ldr	r3, [pc, #36]	@ (8005ec0 <HAL_RCC_OscConfig+0x248>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9e:	f7fd ff4f 	bl	8003d40 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea4:	e00e      	b.n	8005ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ea6:	f7fd ff4b 	bl	8003d40 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d907      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e150      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	42470000 	.word	0x42470000
 8005ec0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec4:	4b88      	ldr	r3, [pc, #544]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1ea      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8097 	beq.w	800600c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee2:	4b81      	ldr	r3, [pc, #516]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10f      	bne.n	8005f0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	4b7d      	ldr	r3, [pc, #500]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	4a7c      	ldr	r2, [pc, #496]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005efe:	4b7a      	ldr	r3, [pc, #488]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0e:	4b77      	ldr	r3, [pc, #476]	@ (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d118      	bne.n	8005f4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f1a:	4b74      	ldr	r3, [pc, #464]	@ (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a73      	ldr	r2, [pc, #460]	@ (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f26:	f7fd ff0b 	bl	8003d40 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2e:	f7fd ff07 	bl	8003d40 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e10c      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	4b6a      	ldr	r3, [pc, #424]	@ (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d106      	bne.n	8005f62 <HAL_RCC_OscConfig+0x2ea>
 8005f54:	4b64      	ldr	r3, [pc, #400]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f58:	4a63      	ldr	r2, [pc, #396]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f60:	e01c      	b.n	8005f9c <HAL_RCC_OscConfig+0x324>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x30c>
 8005f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6e:	4a5e      	ldr	r2, [pc, #376]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f70:	f043 0304 	orr.w	r3, r3, #4
 8005f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f76:	4b5c      	ldr	r3, [pc, #368]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f82:	e00b      	b.n	8005f9c <HAL_RCC_OscConfig+0x324>
 8005f84:	4b58      	ldr	r3, [pc, #352]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f88:	4a57      	ldr	r2, [pc, #348]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f90:	4b55      	ldr	r3, [pc, #340]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f94:	4a54      	ldr	r2, [pc, #336]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f96:	f023 0304 	bic.w	r3, r3, #4
 8005f9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d015      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fd fecc 	bl	8003d40 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fac:	f7fd fec8 	bl	8003d40 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e0cb      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc2:	4b49      	ldr	r3, [pc, #292]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ee      	beq.n	8005fac <HAL_RCC_OscConfig+0x334>
 8005fce:	e014      	b.n	8005ffa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd0:	f7fd feb6 	bl	8003d40 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd6:	e00a      	b.n	8005fee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd8:	f7fd feb2 	bl	8003d40 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0b5      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fee:	4b3e      	ldr	r3, [pc, #248]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1ee      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d105      	bne.n	800600c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006000:	4b39      	ldr	r3, [pc, #228]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8006002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006004:	4a38      	ldr	r2, [pc, #224]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8006006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800600a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80a1 	beq.w	8006158 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006016:	4b34      	ldr	r3, [pc, #208]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b08      	cmp	r3, #8
 8006020:	d05c      	beq.n	80060dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d141      	bne.n	80060ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800602a:	4b31      	ldr	r3, [pc, #196]	@ (80060f0 <HAL_RCC_OscConfig+0x478>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006030:	f7fd fe86 	bl	8003d40 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006038:	f7fd fe82 	bl	8003d40 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e087      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800604a:	4b27      	ldr	r3, [pc, #156]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006064:	019b      	lsls	r3, r3, #6
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	3b01      	subs	r3, #1
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006078:	061b      	lsls	r3, r3, #24
 800607a:	491b      	ldr	r1, [pc, #108]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 800607c:	4313      	orrs	r3, r2
 800607e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006080:	4b1b      	ldr	r3, [pc, #108]	@ (80060f0 <HAL_RCC_OscConfig+0x478>)
 8006082:	2201      	movs	r2, #1
 8006084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fd fe5b 	bl	8003d40 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800608e:	f7fd fe57 	bl	8003d40 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e05c      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a0:	4b11      	ldr	r3, [pc, #68]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <HAL_RCC_OscConfig+0x416>
 80060ac:	e054      	b.n	8006158 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ae:	4b10      	ldr	r3, [pc, #64]	@ (80060f0 <HAL_RCC_OscConfig+0x478>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fd fe44 	bl	8003d40 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fd fe40 	bl	8003d40 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e045      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ce:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <HAL_RCC_OscConfig+0x470>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x444>
 80060da:	e03d      	b.n	8006158 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d107      	bne.n	80060f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e038      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40007000 	.word	0x40007000
 80060f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <HAL_RCC_OscConfig+0x4ec>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d028      	beq.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800610c:	429a      	cmp	r2, r3
 800610e:	d121      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	429a      	cmp	r2, r3
 800611c:	d11a      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006124:	4013      	ands	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800612a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612c:	4293      	cmp	r3, r2
 800612e:	d111      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	3b01      	subs	r3, #1
 800613e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006140:	429a      	cmp	r2, r3
 8006142:	d107      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006150:	429a      	cmp	r2, r3
 8006152:	d001      	beq.n	8006158 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40023800 	.word	0x40023800

08006168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0cc      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800617c:	4b68      	ldr	r3, [pc, #416]	@ (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d90c      	bls.n	80061a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b65      	ldr	r3, [pc, #404]	@ (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	4b63      	ldr	r3, [pc, #396]	@ (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d001      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0b8      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061bc:	4b59      	ldr	r3, [pc, #356]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4a58      	ldr	r2, [pc, #352]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061d4:	4b53      	ldr	r3, [pc, #332]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4a52      	ldr	r2, [pc, #328]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e0:	4b50      	ldr	r3, [pc, #320]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	494d      	ldr	r1, [pc, #308]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d044      	beq.n	8006288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d107      	bne.n	8006216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	4b47      	ldr	r3, [pc, #284]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d119      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e07f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d003      	beq.n	8006226 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006222:	2b03      	cmp	r3, #3
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006226:	4b3f      	ldr	r3, [pc, #252]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e06f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006236:	4b3b      	ldr	r3, [pc, #236]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e067      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006246:	4b37      	ldr	r3, [pc, #220]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f023 0203 	bic.w	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4934      	ldr	r1, [pc, #208]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006254:	4313      	orrs	r3, r2
 8006256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006258:	f7fd fd72 	bl	8003d40 <HAL_GetTick>
 800625c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625e:	e00a      	b.n	8006276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006260:	f7fd fd6e 	bl	8003d40 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e04f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 020c 	and.w	r2, r3, #12
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	429a      	cmp	r2, r3
 8006286:	d1eb      	bne.n	8006260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006288:	4b25      	ldr	r3, [pc, #148]	@ (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d20c      	bcs.n	80062b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006296:	4b22      	ldr	r3, [pc, #136]	@ (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b20      	ldr	r3, [pc, #128]	@ (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e032      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062bc:	4b19      	ldr	r3, [pc, #100]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4916      	ldr	r1, [pc, #88]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062da:	4b12      	ldr	r3, [pc, #72]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	490e      	ldr	r1, [pc, #56]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062ee:	f000 f821 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 80062f2:	4602      	mov	r2, r0
 80062f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	490a      	ldr	r1, [pc, #40]	@ (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 8006300:	5ccb      	ldrb	r3, [r1, r3]
 8006302:	fa22 f303 	lsr.w	r3, r2, r3
 8006306:	4a09      	ldr	r2, [pc, #36]	@ (800632c <HAL_RCC_ClockConfig+0x1c4>)
 8006308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800630a:	4b09      	ldr	r3, [pc, #36]	@ (8006330 <HAL_RCC_ClockConfig+0x1c8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7fd fcd2 	bl	8003cb8 <HAL_InitTick>

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40023c00 	.word	0x40023c00
 8006324:	40023800 	.word	0x40023800
 8006328:	0800fb6c 	.word	0x0800fb6c
 800632c:	20000018 	.word	0x20000018
 8006330:	2000001c 	.word	0x2000001c

08006334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006338:	b090      	sub	sp, #64	@ 0x40
 800633a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800634c:	4b59      	ldr	r3, [pc, #356]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b08      	cmp	r3, #8
 8006356:	d00d      	beq.n	8006374 <HAL_RCC_GetSysClockFreq+0x40>
 8006358:	2b08      	cmp	r3, #8
 800635a:	f200 80a1 	bhi.w	80064a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0x34>
 8006362:	2b04      	cmp	r3, #4
 8006364:	d003      	beq.n	800636e <HAL_RCC_GetSysClockFreq+0x3a>
 8006366:	e09b      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006368:	4b53      	ldr	r3, [pc, #332]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800636a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800636c:	e09b      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800636e:	4b53      	ldr	r3, [pc, #332]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x188>)
 8006370:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006372:	e098      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006374:	4b4f      	ldr	r3, [pc, #316]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800637e:	4b4d      	ldr	r3, [pc, #308]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d028      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800638a:	4b4a      	ldr	r3, [pc, #296]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	099b      	lsrs	r3, r3, #6
 8006390:	2200      	movs	r2, #0
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	627a      	str	r2, [r7, #36]	@ 0x24
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800639c:	2100      	movs	r1, #0
 800639e:	4b47      	ldr	r3, [pc, #284]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x188>)
 80063a0:	fb03 f201 	mul.w	r2, r3, r1
 80063a4:	2300      	movs	r3, #0
 80063a6:	fb00 f303 	mul.w	r3, r0, r3
 80063aa:	4413      	add	r3, r2
 80063ac:	4a43      	ldr	r2, [pc, #268]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x188>)
 80063ae:	fba0 1202 	umull	r1, r2, r0, r2
 80063b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063b4:	460a      	mov	r2, r1
 80063b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80063b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ba:	4413      	add	r3, r2
 80063bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	2200      	movs	r2, #0
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	61fa      	str	r2, [r7, #28]
 80063c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80063ce:	f7fa fbf3 	bl	8000bb8 <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4613      	mov	r3, r2
 80063d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063da:	e053      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063dc:	4b35      	ldr	r3, [pc, #212]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	099b      	lsrs	r3, r3, #6
 80063e2:	2200      	movs	r2, #0
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	617a      	str	r2, [r7, #20]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063ee:	f04f 0b00 	mov.w	fp, #0
 80063f2:	4652      	mov	r2, sl
 80063f4:	465b      	mov	r3, fp
 80063f6:	f04f 0000 	mov.w	r0, #0
 80063fa:	f04f 0100 	mov.w	r1, #0
 80063fe:	0159      	lsls	r1, r3, #5
 8006400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006404:	0150      	lsls	r0, r2, #5
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	ebb2 080a 	subs.w	r8, r2, sl
 800640e:	eb63 090b 	sbc.w	r9, r3, fp
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800641e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006422:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006426:	ebb2 0408 	subs.w	r4, r2, r8
 800642a:	eb63 0509 	sbc.w	r5, r3, r9
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	00eb      	lsls	r3, r5, #3
 8006438:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800643c:	00e2      	lsls	r2, r4, #3
 800643e:	4614      	mov	r4, r2
 8006440:	461d      	mov	r5, r3
 8006442:	eb14 030a 	adds.w	r3, r4, sl
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	eb45 030b 	adc.w	r3, r5, fp
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800645a:	4629      	mov	r1, r5
 800645c:	028b      	lsls	r3, r1, #10
 800645e:	4621      	mov	r1, r4
 8006460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006464:	4621      	mov	r1, r4
 8006466:	028a      	lsls	r2, r1, #10
 8006468:	4610      	mov	r0, r2
 800646a:	4619      	mov	r1, r3
 800646c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646e:	2200      	movs	r2, #0
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	60fa      	str	r2, [r7, #12]
 8006474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006478:	f7fa fb9e 	bl	8000bb8 <__aeabi_uldivmod>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4613      	mov	r3, r2
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006484:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	0c1b      	lsrs	r3, r3, #16
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	3301      	adds	r3, #1
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006494:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	fbb2 f3f3 	udiv	r3, r2, r3
 800649c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800649e:	e002      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064a0:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80064a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3740      	adds	r7, #64	@ 0x40
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	017d7840 	.word	0x017d7840

080064c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c4:	4b03      	ldr	r3, [pc, #12]	@ (80064d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064c6:	681b      	ldr	r3, [r3, #0]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000018 	.word	0x20000018

080064d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064dc:	f7ff fff0 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0a9b      	lsrs	r3, r3, #10
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4903      	ldr	r1, [pc, #12]	@ (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40023800 	.word	0x40023800
 80064fc:	0800fb7c 	.word	0x0800fb7c

08006500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006504:	f7ff ffdc 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 8006508:	4602      	mov	r2, r0
 800650a:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	0b5b      	lsrs	r3, r3, #13
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	4903      	ldr	r1, [pc, #12]	@ (8006524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006516:	5ccb      	ldrb	r3, [r1, r3]
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40023800 	.word	0x40023800
 8006524:	0800fb7c 	.word	0x0800fb7c

08006528 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800654c:	2b00      	cmp	r3, #0
 800654e:	d035      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006550:	4b67      	ldr	r3, [pc, #412]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006556:	f7fd fbf3 	bl	8003d40 <HAL_GetTick>
 800655a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800655c:	e008      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800655e:	f7fd fbef 	bl	8003d40 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e0ba      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006570:	4b60      	ldr	r3, [pc, #384]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	019a      	lsls	r2, r3, #6
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	071b      	lsls	r3, r3, #28
 8006588:	495a      	ldr	r1, [pc, #360]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006590:	4b57      	ldr	r3, [pc, #348]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006592:	2201      	movs	r2, #1
 8006594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006596:	f7fd fbd3 	bl	8003d40 <HAL_GetTick>
 800659a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800659c:	e008      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800659e:	f7fd fbcf 	bl	8003d40 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e09a      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065b0:	4b50      	ldr	r3, [pc, #320]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8083 	beq.w	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	4b49      	ldr	r3, [pc, #292]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	4a48      	ldr	r2, [pc, #288]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80065da:	4b46      	ldr	r3, [pc, #280]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065e6:	4b44      	ldr	r3, [pc, #272]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a43      	ldr	r2, [pc, #268]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065f2:	f7fd fba5 	bl	8003d40 <HAL_GetTick>
 80065f6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80065f8:	e008      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065fa:	f7fd fba1 	bl	8003d40 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e06c      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800660c:	4b3a      	ldr	r3, [pc, #232]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006618:	4b36      	ldr	r3, [pc, #216]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006620:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d02f      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	429a      	cmp	r2, r3
 8006634:	d028      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006636:	4b2f      	ldr	r3, [pc, #188]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800663e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006640:	4b2e      	ldr	r3, [pc, #184]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006642:	2201      	movs	r2, #1
 8006644:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006646:	4b2d      	ldr	r3, [pc, #180]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800664c:	4a29      	ldr	r2, [pc, #164]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006652:	4b28      	ldr	r3, [pc, #160]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b01      	cmp	r3, #1
 800665c:	d114      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800665e:	f7fd fb6f 	bl	8003d40 <HAL_GetTick>
 8006662:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006664:	e00a      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006666:	f7fd fb6b 	bl	8003d40 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006674:	4293      	cmp	r3, r2
 8006676:	d901      	bls.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e034      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667c:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0ee      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006690:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006694:	d10d      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006696:	4b17      	ldr	r3, [pc, #92]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80066a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066aa:	4912      	ldr	r1, [pc, #72]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	608b      	str	r3, [r1, #8]
 80066b0:	e005      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80066b2:	4b10      	ldr	r3, [pc, #64]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	4a0f      	ldr	r2, [pc, #60]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066b8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80066bc:	6093      	str	r3, [r2, #8]
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ca:	490a      	ldr	r1, [pc, #40]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	7c1a      	ldrb	r2, [r3, #16]
 80066e0:	4b07      	ldr	r3, [pc, #28]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066e2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	42470068 	.word	0x42470068
 80066f4:	40023800 	.word	0x40023800
 80066f8:	40007000 	.word	0x40007000
 80066fc:	42470e40 	.word	0x42470e40
 8006700:	424711e0 	.word	0x424711e0

08006704 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e073      	b.n	8006802 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	7f5b      	ldrb	r3, [r3, #29]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d105      	bne.n	8006730 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fd f864 	bl	80037f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b10      	cmp	r3, #16
 8006742:	d055      	beq.n	80067f0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	22ca      	movs	r2, #202	@ 0xca
 800674a:	625a      	str	r2, [r3, #36]	@ 0x24
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2253      	movs	r2, #83	@ 0x53
 8006752:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fa49 	bl	8006bec <RTC_EnterInitMode>
 800675a:	4603      	mov	r3, r0
 800675c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d12c      	bne.n	80067be <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006776:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6899      	ldr	r1, [r3, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	68d2      	ldr	r2, [r2, #12]
 800679e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6919      	ldr	r1, [r3, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	041a      	lsls	r2, r3, #16
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fa50 	bl	8006c5a <RTC_ExitInitMode>
 80067ba:	4603      	mov	r3, r0
 80067bc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d110      	bne.n	80067e6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80067d2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	22ff      	movs	r2, #255	@ 0xff
 80067ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80067ee:	e001      	b.n	80067f4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800680a:	b590      	push	{r4, r7, lr}
 800680c:	b087      	sub	sp, #28
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	7f1b      	ldrb	r3, [r3, #28]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_RTC_SetTime+0x1c>
 8006822:	2302      	movs	r3, #2
 8006824:	e087      	b.n	8006936 <HAL_RTC_SetTime+0x12c>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2202      	movs	r2, #2
 8006830:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d126      	bne.n	8006886 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fa27 	bl	8006ca4 <RTC_ByteToBcd2>
 8006856:	4603      	mov	r3, r0
 8006858:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fa20 	bl	8006ca4 <RTC_ByteToBcd2>
 8006864:	4603      	mov	r3, r0
 8006866:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006868:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	789b      	ldrb	r3, [r3, #2]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fa18 	bl	8006ca4 <RTC_ByteToBcd2>
 8006874:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006876:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	78db      	ldrb	r3, [r3, #3]
 800687e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006880:	4313      	orrs	r3, r2
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e018      	b.n	80068b8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068a6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80068ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	78db      	ldrb	r3, [r3, #3]
 80068b2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	22ca      	movs	r2, #202	@ 0xca
 80068be:	625a      	str	r2, [r3, #36]	@ 0x24
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2253      	movs	r2, #83	@ 0x53
 80068c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f98f 	bl	8006bec <RTC_EnterInitMode>
 80068ce:	4603      	mov	r3, r0
 80068d0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80068d2:	7cfb      	ldrb	r3, [r7, #19]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d120      	bne.n	800691a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80068e2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80068e6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80068f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6899      	ldr	r1, [r3, #8]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	431a      	orrs	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f9a2 	bl	8006c5a <RTC_ExitInitMode>
 8006916:	4603      	mov	r3, r0
 8006918:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800691a:	7cfb      	ldrb	r3, [r7, #19]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d102      	bne.n	8006926 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	22ff      	movs	r2, #255	@ 0xff
 800692c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	771a      	strb	r2, [r3, #28]

  return status;
 8006934:	7cfb      	ldrb	r3, [r7, #19]
}
 8006936:	4618      	mov	r0, r3
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	bd90      	pop	{r4, r7, pc}

0800693e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b086      	sub	sp, #24
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006970:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006974:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	0c1b      	lsrs	r3, r3, #16
 800697a:	b2db      	uxtb	r3, r3
 800697c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006980:	b2da      	uxtb	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	b2db      	uxtb	r3, r3
 800698c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006990:	b2da      	uxtb	r2, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	0d9b      	lsrs	r3, r3, #22
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d11a      	bne.n	80069f0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 f98e 	bl	8006ce0 <RTC_Bcd2ToByte>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	785b      	ldrb	r3, [r3, #1]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 f985 	bl	8006ce0 <RTC_Bcd2ToByte>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461a      	mov	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	789b      	ldrb	r3, [r3, #2]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f97c 	bl	8006ce0 <RTC_Bcd2ToByte>
 80069e8:	4603      	mov	r3, r0
 80069ea:	461a      	mov	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069fa:	b590      	push	{r4, r7, lr}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	7f1b      	ldrb	r3, [r3, #28]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_RTC_SetDate+0x1c>
 8006a12:	2302      	movs	r3, #2
 8006a14:	e071      	b.n	8006afa <HAL_RTC_SetDate+0x100>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10e      	bne.n	8006a46 <HAL_RTC_SetDate+0x4c>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	f023 0310 	bic.w	r3, r3, #16
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	330a      	adds	r3, #10
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d11c      	bne.n	8006a86 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	78db      	ldrb	r3, [r3, #3]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 f927 	bl	8006ca4 <RTC_ByteToBcd2>
 8006a56:	4603      	mov	r3, r0
 8006a58:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 f920 	bl	8006ca4 <RTC_ByteToBcd2>
 8006a64:	4603      	mov	r3, r0
 8006a66:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a68:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	789b      	ldrb	r3, [r3, #2]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f918 	bl	8006ca4 <RTC_ByteToBcd2>
 8006a74:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a76:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	e00e      	b.n	8006aa4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	78db      	ldrb	r3, [r3, #3]
 8006a8a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a92:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a98:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	22ca      	movs	r2, #202	@ 0xca
 8006aaa:	625a      	str	r2, [r3, #36]	@ 0x24
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2253      	movs	r2, #83	@ 0x53
 8006ab2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f899 	bl	8006bec <RTC_EnterInitMode>
 8006aba:	4603      	mov	r3, r0
 8006abc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006abe:	7cfb      	ldrb	r3, [r7, #19]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10c      	bne.n	8006ade <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006ace:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ad2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f8c0 	bl	8006c5a <RTC_ExitInitMode>
 8006ada:	4603      	mov	r3, r0
 8006adc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006ade:	7cfb      	ldrb	r3, [r7, #19]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	22ff      	movs	r2, #255	@ 0xff
 8006af0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]

  return status;
 8006af8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd90      	pop	{r4, r7, pc}

08006b02 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006b1c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b20:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	0c1b      	lsrs	r3, r3, #16
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	0b5b      	lsrs	r3, r3, #13
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11a      	bne.n	8006b96 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	78db      	ldrb	r3, [r3, #3]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 f8bb 	bl	8006ce0 <RTC_Bcd2ToByte>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f8b2 	bl	8006ce0 <RTC_Bcd2ToByte>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	789b      	ldrb	r3, [r3, #2]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f8a9 	bl	8006ce0 <RTC_Bcd2ToByte>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8006be8 <HAL_RTC_WaitForSynchro+0x48>)
 8006bb2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bb4:	f7fd f8c4 	bl	8003d40 <HAL_GetTick>
 8006bb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006bba:	e009      	b.n	8006bd0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bbc:	f7fd f8c0 	bl	8003d40 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bca:	d901      	bls.n	8006bd0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e007      	b.n	8006be0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0ee      	beq.n	8006bbc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	00013f5f 	.word	0x00013f5f

08006bec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d122      	bne.n	8006c50 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c1a:	f7fd f891 	bl	8003d40 <HAL_GetTick>
 8006c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c20:	e00c      	b.n	8006c3c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c22:	f7fd f88d 	bl	8003d40 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c30:	d904      	bls.n	8006c3c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2204      	movs	r2, #4
 8006c36:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <RTC_EnterInitMode+0x64>
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d1e8      	bne.n	8006c22 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c74:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff ff8b 	bl	8006ba0 <HAL_RTC_WaitForSynchro>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2204      	movs	r2, #4
 8006c94:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006cb2:	e005      	b.n	8006cc0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	3b0a      	subs	r3, #10
 8006cbe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	2b09      	cmp	r3, #9
 8006cc4:	d8f6      	bhi.n	8006cb4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	b2db      	uxtb	r3, r3
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	b2db      	uxtb	r3, r3
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006d28:	4b5a      	ldr	r3, [pc, #360]	@ (8006e94 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a5a      	ldr	r2, [pc, #360]	@ (8006e98 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	0adb      	lsrs	r3, r3, #11
 8006d34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	7f1b      	ldrb	r3, [r3, #28]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e09d      	b.n	8006e86 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2202      	movs	r2, #2
 8006d54:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	22ca      	movs	r2, #202	@ 0xca
 8006d5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2253      	movs	r2, #83	@ 0x53
 8006d64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d018      	beq.n	8006da6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	22ff      	movs	r2, #255	@ 0xff
 8006d86:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e076      	b.n	8006e86 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e6      	bne.n	8006d74 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006db4:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006dc6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006dc8:	4b32      	ldr	r3, [pc, #200]	@ (8006e94 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a32      	ldr	r2, [pc, #200]	@ (8006e98 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	0adb      	lsrs	r3, r3, #11
 8006dd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006dd8:	fb02 f303 	mul.w	r3, r2, r3
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	22ff      	movs	r2, #255	@ 0xff
 8006df0:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2203      	movs	r2, #3
 8006df6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e041      	b.n	8006e86 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0e6      	beq.n	8006dde <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0207 	bic.w	r2, r2, #7
 8006e1e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006e38:	4b18      	ldr	r3, [pc, #96]	@ (8006e9c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a17      	ldr	r2, [pc, #92]	@ (8006e9c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8006e3e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e42:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006e44:	4b15      	ldr	r3, [pc, #84]	@ (8006e9c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	4a14      	ldr	r2, [pc, #80]	@ (8006e9c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8006e4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e4e:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e5e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e6e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	22ff      	movs	r2, #255	@ 0xff
 8006e76:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	20000018 	.word	0x20000018
 8006e98:	10624dd3 	.word	0x10624dd3
 8006e9c:	40013c00 	.word	0x40013c00

08006ea0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7f1b      	ldrb	r3, [r3, #28]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e047      	b.n	8006f48 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	22ca      	movs	r2, #202	@ 0xca
 8006eca:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2253      	movs	r2, #83	@ 0x53
 8006ed2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee2:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ef2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ef4:	f7fc ff24 	bl	8003d40 <HAL_GetTick>
 8006ef8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006efa:	e013      	b.n	8006f24 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006efc:	f7fc ff20 	bl	8003d40 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f0a:	d90b      	bls.n	8006f24 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	22ff      	movs	r2, #255	@ 0xff
 8006f12:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2203      	movs	r2, #3
 8006f18:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e011      	b.n	8006f48 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0e4      	beq.n	8006efc <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	22ff      	movs	r2, #255	@ 0xff
 8006f38:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006f58:	4b0e      	ldr	r3, [pc, #56]	@ (8006f94 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8006f5a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006f5e:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00b      	beq.n	8006f86 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006f7e:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7fc fa25 	bl	80033d0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	775a      	strb	r2, [r3, #29]
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	40013c00 	.word	0x40013c00

08006f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e07b      	b.n	80070a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d108      	bne.n	8006fc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fba:	d009      	beq.n	8006fd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	61da      	str	r2, [r3, #28]
 8006fc2:	e005      	b.n	8006fd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fc fc38 	bl	8003860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007006:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007018:	431a      	orrs	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	431a      	orrs	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007054:	ea42 0103 	orr.w	r1, r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	f003 0104 	and.w	r1, r3, #4
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007076:	f003 0210 	and.w	r2, r3, #16
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007090:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b088      	sub	sp, #32
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	603b      	str	r3, [r7, #0]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070ba:	f7fc fe41 	bl	8003d40 <HAL_GetTick>
 80070be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d001      	beq.n	80070d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80070d0:	2302      	movs	r3, #2
 80070d2:	e12a      	b.n	800732a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <HAL_SPI_Transmit+0x36>
 80070da:	88fb      	ldrh	r3, [r7, #6]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e122      	b.n	800732a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_SPI_Transmit+0x48>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e11b      	b.n	800732a <HAL_SPI_Transmit+0x280>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2203      	movs	r2, #3
 80070fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	88fa      	ldrh	r2, [r7, #6]
 8007112:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007140:	d10f      	bne.n	8007162 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007150:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007160:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716c:	2b40      	cmp	r3, #64	@ 0x40
 800716e:	d007      	beq.n	8007180 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800717e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007188:	d152      	bne.n	8007230 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <HAL_SPI_Transmit+0xee>
 8007192:	8b7b      	ldrh	r3, [r7, #26]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d145      	bne.n	8007224 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719c:	881a      	ldrh	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a8:	1c9a      	adds	r2, r3, #2
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071bc:	e032      	b.n	8007224 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d112      	bne.n	80071f2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d0:	881a      	ldrh	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071dc:	1c9a      	adds	r2, r3, #2
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071f0:	e018      	b.n	8007224 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071f2:	f7fc fda5 	bl	8003d40 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d803      	bhi.n	800720a <HAL_SPI_Transmit+0x160>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d102      	bne.n	8007210 <HAL_SPI_Transmit+0x166>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d109      	bne.n	8007224 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e082      	b.n	800732a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1c7      	bne.n	80071be <HAL_SPI_Transmit+0x114>
 800722e:	e053      	b.n	80072d8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_SPI_Transmit+0x194>
 8007238:	8b7b      	ldrh	r3, [r7, #26]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d147      	bne.n	80072ce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	330c      	adds	r3, #12
 8007248:	7812      	ldrb	r2, [r2, #0]
 800724a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800725a:	b29b      	uxth	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b29a      	uxth	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007264:	e033      	b.n	80072ce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b02      	cmp	r3, #2
 8007272:	d113      	bne.n	800729c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	86da      	strh	r2, [r3, #54]	@ 0x36
 800729a:	e018      	b.n	80072ce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800729c:	f7fc fd50 	bl	8003d40 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d803      	bhi.n	80072b4 <HAL_SPI_Transmit+0x20a>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d102      	bne.n	80072ba <HAL_SPI_Transmit+0x210>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e02d      	b.n	800732a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1c6      	bne.n	8007266 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 fa59 	bl	8007794 <SPI_EndRxTxTransaction>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10a      	bne.n	800730c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	617b      	str	r3, [r7, #20]
 800730a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007328:	2300      	movs	r3, #0
  }
}
 800732a:	4618      	mov	r0, r3
 800732c:	3720      	adds	r7, #32
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b08a      	sub	sp, #40	@ 0x28
 8007336:	af00      	add	r7, sp, #0
 8007338:	60f8      	str	r0, [r7, #12]
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007340:	2301      	movs	r3, #1
 8007342:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007344:	f7fc fcfc 	bl	8003d40 <HAL_GetTick>
 8007348:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007350:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007358:	887b      	ldrh	r3, [r7, #2]
 800735a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800735c:	7ffb      	ldrb	r3, [r7, #31]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d00c      	beq.n	800737c <HAL_SPI_TransmitReceive+0x4a>
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007368:	d106      	bne.n	8007378 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <HAL_SPI_TransmitReceive+0x46>
 8007372:	7ffb      	ldrb	r3, [r7, #31]
 8007374:	2b04      	cmp	r3, #4
 8007376:	d001      	beq.n	800737c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007378:	2302      	movs	r3, #2
 800737a:	e17f      	b.n	800767c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <HAL_SPI_TransmitReceive+0x5c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <HAL_SPI_TransmitReceive+0x5c>
 8007388:	887b      	ldrh	r3, [r7, #2]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e174      	b.n	800767c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_SPI_TransmitReceive+0x6e>
 800739c:	2302      	movs	r3, #2
 800739e:	e16d      	b.n	800767c <HAL_SPI_TransmitReceive+0x34a>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d003      	beq.n	80073bc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2205      	movs	r2, #5
 80073b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	887a      	ldrh	r2, [r7, #2]
 80073cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	887a      	ldrh	r2, [r7, #2]
 80073d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	887a      	ldrh	r2, [r7, #2]
 80073de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	887a      	ldrh	r2, [r7, #2]
 80073e4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073fc:	2b40      	cmp	r3, #64	@ 0x40
 80073fe:	d007      	beq.n	8007410 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800740e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007418:	d17e      	bne.n	8007518 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_SPI_TransmitReceive+0xf6>
 8007422:	8afb      	ldrh	r3, [r7, #22]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d16c      	bne.n	8007502 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800744c:	e059      	b.n	8007502 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b02      	cmp	r3, #2
 800745a:	d11b      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x162>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d016      	beq.n	8007494 <HAL_SPI_TransmitReceive+0x162>
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	2b01      	cmp	r3, #1
 800746a:	d113      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007470:	881a      	ldrh	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747c:	1c9a      	adds	r2, r3, #2
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d119      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x1a4>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d014      	beq.n	80074d6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	b292      	uxth	r2, r2
 80074b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074be:	1c9a      	adds	r2, r3, #2
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074d2:	2301      	movs	r3, #1
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074d6:	f7fc fc33 	bl	8003d40 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d80d      	bhi.n	8007502 <HAL_SPI_TransmitReceive+0x1d0>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ec:	d009      	beq.n	8007502 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e0bc      	b.n	800767c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1a0      	bne.n	800744e <HAL_SPI_TransmitReceive+0x11c>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d19b      	bne.n	800744e <HAL_SPI_TransmitReceive+0x11c>
 8007516:	e082      	b.n	800761e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <HAL_SPI_TransmitReceive+0x1f4>
 8007520:	8afb      	ldrh	r3, [r7, #22]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d171      	bne.n	800760a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	330c      	adds	r3, #12
 8007530:	7812      	ldrb	r2, [r2, #0]
 8007532:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007542:	b29b      	uxth	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800754c:	e05d      	b.n	800760a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b02      	cmp	r3, #2
 800755a:	d11c      	bne.n	8007596 <HAL_SPI_TransmitReceive+0x264>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d017      	beq.n	8007596 <HAL_SPI_TransmitReceive+0x264>
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	2b01      	cmp	r3, #1
 800756a:	d114      	bne.n	8007596 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	7812      	ldrb	r2, [r2, #0]
 8007578:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007588:	b29b      	uxth	r3, r3
 800758a:	3b01      	subs	r3, #1
 800758c:	b29a      	uxth	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d119      	bne.n	80075d8 <HAL_SPI_TransmitReceive+0x2a6>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d014      	beq.n	80075d8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075d4:	2301      	movs	r3, #1
 80075d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075d8:	f7fc fbb2 	bl	8003d40 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d803      	bhi.n	80075f0 <HAL_SPI_TransmitReceive+0x2be>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d102      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x2c4>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d109      	bne.n	800760a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e038      	b.n	800767c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800760e:	b29b      	uxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d19c      	bne.n	800754e <HAL_SPI_TransmitReceive+0x21c>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007618:	b29b      	uxth	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d197      	bne.n	800754e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800761e:	6a3a      	ldr	r2, [r7, #32]
 8007620:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f8b6 	bl	8007794 <SPI_EndRxTxTransaction>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d008      	beq.n	8007640 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2220      	movs	r2, #32
 8007632:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e01d      	b.n	800767c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007648:	2300      	movs	r3, #0
 800764a:	613b      	str	r3, [r7, #16]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e000      	b.n	800767c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800767a:	2300      	movs	r3, #0
  }
}
 800767c:	4618      	mov	r0, r3
 800767e:	3728      	adds	r7, #40	@ 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4613      	mov	r3, r2
 8007692:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007694:	f7fc fb54 	bl	8003d40 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	1a9b      	subs	r3, r3, r2
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	4413      	add	r3, r2
 80076a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076a4:	f7fc fb4c 	bl	8003d40 <HAL_GetTick>
 80076a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076aa:	4b39      	ldr	r3, [pc, #228]	@ (8007790 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	015b      	lsls	r3, r3, #5
 80076b0:	0d1b      	lsrs	r3, r3, #20
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	fb02 f303 	mul.w	r3, r2, r3
 80076b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ba:	e054      	b.n	8007766 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d050      	beq.n	8007766 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076c4:	f7fc fb3c 	bl	8003d40 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d902      	bls.n	80076da <SPI_WaitFlagStateUntilTimeout+0x56>
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d13d      	bne.n	8007756 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076f2:	d111      	bne.n	8007718 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076fc:	d004      	beq.n	8007708 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007706:	d107      	bne.n	8007718 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007720:	d10f      	bne.n	8007742 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007740:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e017      	b.n	8007786 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	3b01      	subs	r3, #1
 8007764:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4013      	ands	r3, r2
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	bf0c      	ite	eq
 8007776:	2301      	moveq	r3, #1
 8007778:	2300      	movne	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	429a      	cmp	r2, r3
 8007782:	d19b      	bne.n	80076bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000018 	.word	0x20000018

08007794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af02      	add	r7, sp, #8
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2201      	movs	r2, #1
 80077a8:	2102      	movs	r1, #2
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7ff ff6a 	bl	8007684 <SPI_WaitFlagStateUntilTimeout>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d007      	beq.n	80077c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ba:	f043 0220 	orr.w	r2, r3, #32
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e032      	b.n	800782c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007834 <SPI_EndRxTxTransaction+0xa0>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007838 <SPI_EndRxTxTransaction+0xa4>)
 80077cc:	fba2 2303 	umull	r2, r3, r2, r3
 80077d0:	0d5b      	lsrs	r3, r3, #21
 80077d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077e4:	d112      	bne.n	800780c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2200      	movs	r2, #0
 80077ee:	2180      	movs	r1, #128	@ 0x80
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f7ff ff47 	bl	8007684 <SPI_WaitFlagStateUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d016      	beq.n	800782a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007800:	f043 0220 	orr.w	r2, r3, #32
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e00f      	b.n	800782c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00a      	beq.n	8007828 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	3b01      	subs	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007822:	2b80      	cmp	r3, #128	@ 0x80
 8007824:	d0f2      	beq.n	800780c <SPI_EndRxTxTransaction+0x78>
 8007826:	e000      	b.n	800782a <SPI_EndRxTxTransaction+0x96>
        break;
 8007828:	bf00      	nop
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000018 	.word	0x20000018
 8007838:	165e9f81 	.word	0x165e9f81

0800783c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e041      	b.n	80078d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fc f844 	bl	80038f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4610      	mov	r0, r2
 800787c:	f000 fa70 	bl	8007d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d001      	beq.n	80078f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e044      	b.n	800797e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0201 	orr.w	r2, r2, #1
 800790a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1e      	ldr	r2, [pc, #120]	@ (800798c <HAL_TIM_Base_Start_IT+0xb0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d018      	beq.n	8007948 <HAL_TIM_Base_Start_IT+0x6c>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791e:	d013      	beq.n	8007948 <HAL_TIM_Base_Start_IT+0x6c>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1a      	ldr	r2, [pc, #104]	@ (8007990 <HAL_TIM_Base_Start_IT+0xb4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00e      	beq.n	8007948 <HAL_TIM_Base_Start_IT+0x6c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a19      	ldr	r2, [pc, #100]	@ (8007994 <HAL_TIM_Base_Start_IT+0xb8>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d009      	beq.n	8007948 <HAL_TIM_Base_Start_IT+0x6c>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a17      	ldr	r2, [pc, #92]	@ (8007998 <HAL_TIM_Base_Start_IT+0xbc>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <HAL_TIM_Base_Start_IT+0x6c>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a16      	ldr	r2, [pc, #88]	@ (800799c <HAL_TIM_Base_Start_IT+0xc0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d111      	bne.n	800796c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b06      	cmp	r3, #6
 8007958:	d010      	beq.n	800797c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0201 	orr.w	r2, r2, #1
 8007968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796a:	e007      	b.n	800797c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0201 	orr.w	r2, r2, #1
 800797a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40010000 	.word	0x40010000
 8007990:	40000400 	.word	0x40000400
 8007994:	40000800 	.word	0x40000800
 8007998:	40000c00 	.word	0x40000c00
 800799c:	40014000 	.word	0x40014000

080079a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d020      	beq.n	8007a04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01b      	beq.n	8007a04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f06f 0202 	mvn.w	r2, #2
 80079d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f003 0303 	and.w	r3, r3, #3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f999 	bl	8007d22 <HAL_TIM_IC_CaptureCallback>
 80079f0:	e005      	b.n	80079fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f98b 	bl	8007d0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f99c 	bl	8007d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d020      	beq.n	8007a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01b      	beq.n	8007a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0204 	mvn.w	r2, #4
 8007a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f973 	bl	8007d22 <HAL_TIM_IC_CaptureCallback>
 8007a3c:	e005      	b.n	8007a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f965 	bl	8007d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f976 	bl	8007d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d020      	beq.n	8007a9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01b      	beq.n	8007a9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0208 	mvn.w	r2, #8
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2204      	movs	r2, #4
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f94d 	bl	8007d22 <HAL_TIM_IC_CaptureCallback>
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f93f 	bl	8007d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f950 	bl	8007d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d020      	beq.n	8007ae8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01b      	beq.n	8007ae8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0210 	mvn.w	r2, #16
 8007ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2208      	movs	r2, #8
 8007abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f927 	bl	8007d22 <HAL_TIM_IC_CaptureCallback>
 8007ad4:	e005      	b.n	8007ae2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f919 	bl	8007d0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f92a 	bl	8007d36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00c      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0201 	mvn.w	r2, #1
 8007b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fb fc36 	bl	8003378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00c      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fab6 	bl	800809c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00c      	beq.n	8007b54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d007      	beq.n	8007b54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8fb 	bl	8007d4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00c      	beq.n	8007b78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f06f 0220 	mvn.w	r2, #32
 8007b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa88 	bl	8008088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_TIM_ConfigClockSource+0x1c>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e0b4      	b.n	8007d06 <HAL_TIM_ConfigClockSource+0x186>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd4:	d03e      	beq.n	8007c54 <HAL_TIM_ConfigClockSource+0xd4>
 8007bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bda:	f200 8087 	bhi.w	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be2:	f000 8086 	beq.w	8007cf2 <HAL_TIM_ConfigClockSource+0x172>
 8007be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bea:	d87f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bec:	2b70      	cmp	r3, #112	@ 0x70
 8007bee:	d01a      	beq.n	8007c26 <HAL_TIM_ConfigClockSource+0xa6>
 8007bf0:	2b70      	cmp	r3, #112	@ 0x70
 8007bf2:	d87b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bf4:	2b60      	cmp	r3, #96	@ 0x60
 8007bf6:	d050      	beq.n	8007c9a <HAL_TIM_ConfigClockSource+0x11a>
 8007bf8:	2b60      	cmp	r3, #96	@ 0x60
 8007bfa:	d877      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007bfc:	2b50      	cmp	r3, #80	@ 0x50
 8007bfe:	d03c      	beq.n	8007c7a <HAL_TIM_ConfigClockSource+0xfa>
 8007c00:	2b50      	cmp	r3, #80	@ 0x50
 8007c02:	d873      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c04:	2b40      	cmp	r3, #64	@ 0x40
 8007c06:	d058      	beq.n	8007cba <HAL_TIM_ConfigClockSource+0x13a>
 8007c08:	2b40      	cmp	r3, #64	@ 0x40
 8007c0a:	d86f      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c0c:	2b30      	cmp	r3, #48	@ 0x30
 8007c0e:	d064      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c10:	2b30      	cmp	r3, #48	@ 0x30
 8007c12:	d86b      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d060      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	d867      	bhi.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d05c      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d05a      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x15a>
 8007c24:	e062      	b.n	8007cec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c36:	f000 f999 	bl	8007f6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	609a      	str	r2, [r3, #8]
      break;
 8007c52:	e04f      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c64:	f000 f982 	bl	8007f6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689a      	ldr	r2, [r3, #8]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c76:	609a      	str	r2, [r3, #8]
      break;
 8007c78:	e03c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c86:	461a      	mov	r2, r3
 8007c88:	f000 f8f6 	bl	8007e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2150      	movs	r1, #80	@ 0x50
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 f94f 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007c98:	e02c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f000 f915 	bl	8007ed6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2160      	movs	r1, #96	@ 0x60
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f93f 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007cb8:	e01c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f000 f8d6 	bl	8007e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2140      	movs	r1, #64	@ 0x40
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f92f 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007cd8:	e00c      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f000 f926 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007cea:	e003      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e000      	b.n	8007cf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
	...

08007d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a3a      	ldr	r2, [pc, #232]	@ (8007e5c <TIM_Base_SetConfig+0xfc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00f      	beq.n	8007d98 <TIM_Base_SetConfig+0x38>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d7e:	d00b      	beq.n	8007d98 <TIM_Base_SetConfig+0x38>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a37      	ldr	r2, [pc, #220]	@ (8007e60 <TIM_Base_SetConfig+0x100>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d007      	beq.n	8007d98 <TIM_Base_SetConfig+0x38>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a36      	ldr	r2, [pc, #216]	@ (8007e64 <TIM_Base_SetConfig+0x104>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d003      	beq.n	8007d98 <TIM_Base_SetConfig+0x38>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a35      	ldr	r2, [pc, #212]	@ (8007e68 <TIM_Base_SetConfig+0x108>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d108      	bne.n	8007daa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a2b      	ldr	r2, [pc, #172]	@ (8007e5c <TIM_Base_SetConfig+0xfc>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d01b      	beq.n	8007dea <TIM_Base_SetConfig+0x8a>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db8:	d017      	beq.n	8007dea <TIM_Base_SetConfig+0x8a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a28      	ldr	r2, [pc, #160]	@ (8007e60 <TIM_Base_SetConfig+0x100>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <TIM_Base_SetConfig+0x8a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a27      	ldr	r2, [pc, #156]	@ (8007e64 <TIM_Base_SetConfig+0x104>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00f      	beq.n	8007dea <TIM_Base_SetConfig+0x8a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a26      	ldr	r2, [pc, #152]	@ (8007e68 <TIM_Base_SetConfig+0x108>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00b      	beq.n	8007dea <TIM_Base_SetConfig+0x8a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a25      	ldr	r2, [pc, #148]	@ (8007e6c <TIM_Base_SetConfig+0x10c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d007      	beq.n	8007dea <TIM_Base_SetConfig+0x8a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a24      	ldr	r2, [pc, #144]	@ (8007e70 <TIM_Base_SetConfig+0x110>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d003      	beq.n	8007dea <TIM_Base_SetConfig+0x8a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a23      	ldr	r2, [pc, #140]	@ (8007e74 <TIM_Base_SetConfig+0x114>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d108      	bne.n	8007dfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a0e      	ldr	r2, [pc, #56]	@ (8007e5c <TIM_Base_SetConfig+0xfc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d103      	bne.n	8007e30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	691a      	ldr	r2, [r3, #16]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d105      	bne.n	8007e4e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f023 0201 	bic.w	r2, r3, #1
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	611a      	str	r2, [r3, #16]
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	40000400 	.word	0x40000400
 8007e64:	40000800 	.word	0x40000800
 8007e68:	40000c00 	.word	0x40000c00
 8007e6c:	40014000 	.word	0x40014000
 8007e70:	40014400 	.word	0x40014400
 8007e74:	40014800 	.word	0x40014800

08007e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	f023 0201 	bic.w	r2, r3, #1
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f023 030a 	bic.w	r3, r3, #10
 8007eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	621a      	str	r2, [r3, #32]
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b087      	sub	sp, #28
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	f023 0210 	bic.w	r2, r3, #16
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	031b      	lsls	r3, r3, #12
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	621a      	str	r2, [r3, #32]
}
 8007f2a:	bf00      	nop
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f043 0307 	orr.w	r3, r3, #7
 8007f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	609a      	str	r2, [r3, #8]
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	021a      	lsls	r2, r3, #8
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	609a      	str	r2, [r3, #8]
}
 8007fa0:	bf00      	nop
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e050      	b.n	8008066 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a1c      	ldr	r2, [pc, #112]	@ (8008074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d018      	beq.n	800803a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008010:	d013      	beq.n	800803a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a18      	ldr	r2, [pc, #96]	@ (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00e      	beq.n	800803a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a16      	ldr	r2, [pc, #88]	@ (800807c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d009      	beq.n	800803a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a15      	ldr	r2, [pc, #84]	@ (8008080 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d004      	beq.n	800803a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a13      	ldr	r2, [pc, #76]	@ (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d10c      	bne.n	8008054 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	4313      	orrs	r3, r2
 800804a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	40010000 	.word	0x40010000
 8008078:	40000400 	.word	0x40000400
 800807c:	40000800 	.word	0x40000800
 8008080:	40000c00 	.word	0x40000c00
 8008084:	40014000 	.word	0x40014000

08008088 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e042      	b.n	8008148 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fb fc32 	bl	8003940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2224      	movs	r2, #36	@ 0x24
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f973 	bl	80083e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691a      	ldr	r2, [r3, #16]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695a      	ldr	r2, [r3, #20]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b08a      	sub	sp, #40	@ 0x28
 8008154:	af02      	add	r7, sp, #8
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	603b      	str	r3, [r7, #0]
 800815c:	4613      	mov	r3, r2
 800815e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b20      	cmp	r3, #32
 800816e:	d175      	bne.n	800825c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <HAL_UART_Transmit+0x2c>
 8008176:	88fb      	ldrh	r3, [r7, #6]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e06e      	b.n	800825e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2221      	movs	r2, #33	@ 0x21
 800818a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800818e:	f7fb fdd7 	bl	8003d40 <HAL_GetTick>
 8008192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	88fa      	ldrh	r2, [r7, #6]
 8008198:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	88fa      	ldrh	r2, [r7, #6]
 800819e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081a8:	d108      	bne.n	80081bc <HAL_UART_Transmit+0x6c>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d104      	bne.n	80081bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	61bb      	str	r3, [r7, #24]
 80081ba:	e003      	b.n	80081c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081c4:	e02e      	b.n	8008224 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	2200      	movs	r2, #0
 80081ce:	2180      	movs	r1, #128	@ 0x80
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 f848 	bl	8008266 <UART_WaitOnFlagUntilTimeout>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e03a      	b.n	800825e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10b      	bne.n	8008206 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	3302      	adds	r3, #2
 8008202:	61bb      	str	r3, [r7, #24]
 8008204:	e007      	b.n	8008216 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	781a      	ldrb	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	3301      	adds	r3, #1
 8008214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800821a:	b29b      	uxth	r3, r3
 800821c:	3b01      	subs	r3, #1
 800821e:	b29a      	uxth	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1cb      	bne.n	80081c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2200      	movs	r2, #0
 8008236:	2140      	movs	r1, #64	@ 0x40
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f814 	bl	8008266 <UART_WaitOnFlagUntilTimeout>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d005      	beq.n	8008250 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e006      	b.n	800825e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2220      	movs	r2, #32
 8008254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	e000      	b.n	800825e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800825c:	2302      	movs	r3, #2
  }
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b086      	sub	sp, #24
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	603b      	str	r3, [r7, #0]
 8008272:	4613      	mov	r3, r2
 8008274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008276:	e03b      	b.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827e:	d037      	beq.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008280:	f7fb fd5e 	bl	8003d40 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	6a3a      	ldr	r2, [r7, #32]
 800828c:	429a      	cmp	r2, r3
 800828e:	d302      	bcc.n	8008296 <UART_WaitOnFlagUntilTimeout+0x30>
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e03a      	b.n	8008310 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d023      	beq.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b80      	cmp	r3, #128	@ 0x80
 80082ac:	d020      	beq.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b40      	cmp	r3, #64	@ 0x40
 80082b2:	d01d      	beq.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0308 	and.w	r3, r3, #8
 80082be:	2b08      	cmp	r3, #8
 80082c0:	d116      	bne.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	617b      	str	r3, [r7, #20]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	617b      	str	r3, [r7, #20]
 80082d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f81d 	bl	8008318 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2208      	movs	r2, #8
 80082e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e00f      	b.n	8008310 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	4013      	ands	r3, r2
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	bf0c      	ite	eq
 8008300:	2301      	moveq	r3, #1
 8008302:	2300      	movne	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	461a      	mov	r2, r3
 8008308:	79fb      	ldrb	r3, [r7, #7]
 800830a:	429a      	cmp	r2, r3
 800830c:	d0b4      	beq.n	8008278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b095      	sub	sp, #84	@ 0x54
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	330c      	adds	r3, #12
 8008326:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	330c      	adds	r3, #12
 800833e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008340:	643a      	str	r2, [r7, #64]	@ 0x40
 8008342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008348:	e841 2300 	strex	r3, r2, [r1]
 800834c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e5      	bne.n	8008320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3314      	adds	r3, #20
 800835a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	61fb      	str	r3, [r7, #28]
   return(result);
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f023 0301 	bic.w	r3, r3, #1
 800836a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3314      	adds	r3, #20
 8008372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008374:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008376:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800837a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e5      	bne.n	8008354 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838c:	2b01      	cmp	r3, #1
 800838e:	d119      	bne.n	80083c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	330c      	adds	r3, #12
 8008396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	60bb      	str	r3, [r7, #8]
   return(result);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f023 0310 	bic.w	r3, r3, #16
 80083a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	330c      	adds	r3, #12
 80083ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083b0:	61ba      	str	r2, [r7, #24]
 80083b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b4:	6979      	ldr	r1, [r7, #20]
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	e841 2300 	strex	r3, r2, [r1]
 80083bc:	613b      	str	r3, [r7, #16]
   return(result);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e5      	bne.n	8008390 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80083d2:	bf00      	nop
 80083d4:	3754      	adds	r7, #84	@ 0x54
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
	...

080083e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083e4:	b0c0      	sub	sp, #256	@ 0x100
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80083f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083fc:	68d9      	ldr	r1, [r3, #12]
 80083fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	ea40 0301 	orr.w	r3, r0, r1
 8008408:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800840a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	431a      	orrs	r2, r3
 8008418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	431a      	orrs	r2, r3
 8008420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	4313      	orrs	r3, r2
 8008428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800842c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008438:	f021 010c 	bic.w	r1, r1, #12
 800843c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008446:	430b      	orrs	r3, r1
 8008448:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800844a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845a:	6999      	ldr	r1, [r3, #24]
 800845c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	ea40 0301 	orr.w	r3, r0, r1
 8008466:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	4b8f      	ldr	r3, [pc, #572]	@ (80086ac <UART_SetConfig+0x2cc>)
 8008470:	429a      	cmp	r2, r3
 8008472:	d005      	beq.n	8008480 <UART_SetConfig+0xa0>
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4b8d      	ldr	r3, [pc, #564]	@ (80086b0 <UART_SetConfig+0x2d0>)
 800847c:	429a      	cmp	r2, r3
 800847e:	d104      	bne.n	800848a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008480:	f7fe f83e 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 8008484:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008488:	e003      	b.n	8008492 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800848a:	f7fe f825 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 800848e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800849c:	f040 810c 	bne.w	80086b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80084aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80084ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80084b2:	4622      	mov	r2, r4
 80084b4:	462b      	mov	r3, r5
 80084b6:	1891      	adds	r1, r2, r2
 80084b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80084ba:	415b      	adcs	r3, r3
 80084bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80084c2:	4621      	mov	r1, r4
 80084c4:	eb12 0801 	adds.w	r8, r2, r1
 80084c8:	4629      	mov	r1, r5
 80084ca:	eb43 0901 	adc.w	r9, r3, r1
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	f04f 0300 	mov.w	r3, #0
 80084d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084e2:	4690      	mov	r8, r2
 80084e4:	4699      	mov	r9, r3
 80084e6:	4623      	mov	r3, r4
 80084e8:	eb18 0303 	adds.w	r3, r8, r3
 80084ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80084f0:	462b      	mov	r3, r5
 80084f2:	eb49 0303 	adc.w	r3, r9, r3
 80084f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008506:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800850a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800850e:	460b      	mov	r3, r1
 8008510:	18db      	adds	r3, r3, r3
 8008512:	653b      	str	r3, [r7, #80]	@ 0x50
 8008514:	4613      	mov	r3, r2
 8008516:	eb42 0303 	adc.w	r3, r2, r3
 800851a:	657b      	str	r3, [r7, #84]	@ 0x54
 800851c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008520:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008524:	f7f8 fb48 	bl	8000bb8 <__aeabi_uldivmod>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4b61      	ldr	r3, [pc, #388]	@ (80086b4 <UART_SetConfig+0x2d4>)
 800852e:	fba3 2302 	umull	r2, r3, r3, r2
 8008532:	095b      	lsrs	r3, r3, #5
 8008534:	011c      	lsls	r4, r3, #4
 8008536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800853a:	2200      	movs	r2, #0
 800853c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008540:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008544:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008548:	4642      	mov	r2, r8
 800854a:	464b      	mov	r3, r9
 800854c:	1891      	adds	r1, r2, r2
 800854e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008550:	415b      	adcs	r3, r3
 8008552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008554:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008558:	4641      	mov	r1, r8
 800855a:	eb12 0a01 	adds.w	sl, r2, r1
 800855e:	4649      	mov	r1, r9
 8008560:	eb43 0b01 	adc.w	fp, r3, r1
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	f04f 0300 	mov.w	r3, #0
 800856c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008570:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008578:	4692      	mov	sl, r2
 800857a:	469b      	mov	fp, r3
 800857c:	4643      	mov	r3, r8
 800857e:	eb1a 0303 	adds.w	r3, sl, r3
 8008582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008586:	464b      	mov	r3, r9
 8008588:	eb4b 0303 	adc.w	r3, fp, r3
 800858c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800859c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80085a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80085a4:	460b      	mov	r3, r1
 80085a6:	18db      	adds	r3, r3, r3
 80085a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80085aa:	4613      	mov	r3, r2
 80085ac:	eb42 0303 	adc.w	r3, r2, r3
 80085b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80085b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80085ba:	f7f8 fafd 	bl	8000bb8 <__aeabi_uldivmod>
 80085be:	4602      	mov	r2, r0
 80085c0:	460b      	mov	r3, r1
 80085c2:	4611      	mov	r1, r2
 80085c4:	4b3b      	ldr	r3, [pc, #236]	@ (80086b4 <UART_SetConfig+0x2d4>)
 80085c6:	fba3 2301 	umull	r2, r3, r3, r1
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	2264      	movs	r2, #100	@ 0x64
 80085ce:	fb02 f303 	mul.w	r3, r2, r3
 80085d2:	1acb      	subs	r3, r1, r3
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80085da:	4b36      	ldr	r3, [pc, #216]	@ (80086b4 <UART_SetConfig+0x2d4>)
 80085dc:	fba3 2302 	umull	r2, r3, r3, r2
 80085e0:	095b      	lsrs	r3, r3, #5
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80085e8:	441c      	add	r4, r3
 80085ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80085f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80085fc:	4642      	mov	r2, r8
 80085fe:	464b      	mov	r3, r9
 8008600:	1891      	adds	r1, r2, r2
 8008602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008604:	415b      	adcs	r3, r3
 8008606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800860c:	4641      	mov	r1, r8
 800860e:	1851      	adds	r1, r2, r1
 8008610:	6339      	str	r1, [r7, #48]	@ 0x30
 8008612:	4649      	mov	r1, r9
 8008614:	414b      	adcs	r3, r1
 8008616:	637b      	str	r3, [r7, #52]	@ 0x34
 8008618:	f04f 0200 	mov.w	r2, #0
 800861c:	f04f 0300 	mov.w	r3, #0
 8008620:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008624:	4659      	mov	r1, fp
 8008626:	00cb      	lsls	r3, r1, #3
 8008628:	4651      	mov	r1, sl
 800862a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800862e:	4651      	mov	r1, sl
 8008630:	00ca      	lsls	r2, r1, #3
 8008632:	4610      	mov	r0, r2
 8008634:	4619      	mov	r1, r3
 8008636:	4603      	mov	r3, r0
 8008638:	4642      	mov	r2, r8
 800863a:	189b      	adds	r3, r3, r2
 800863c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008640:	464b      	mov	r3, r9
 8008642:	460a      	mov	r2, r1
 8008644:	eb42 0303 	adc.w	r3, r2, r3
 8008648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800864c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008658:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800865c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008660:	460b      	mov	r3, r1
 8008662:	18db      	adds	r3, r3, r3
 8008664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008666:	4613      	mov	r3, r2
 8008668:	eb42 0303 	adc.w	r3, r2, r3
 800866c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800866e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008672:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008676:	f7f8 fa9f 	bl	8000bb8 <__aeabi_uldivmod>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4b0d      	ldr	r3, [pc, #52]	@ (80086b4 <UART_SetConfig+0x2d4>)
 8008680:	fba3 1302 	umull	r1, r3, r3, r2
 8008684:	095b      	lsrs	r3, r3, #5
 8008686:	2164      	movs	r1, #100	@ 0x64
 8008688:	fb01 f303 	mul.w	r3, r1, r3
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	3332      	adds	r3, #50	@ 0x32
 8008692:	4a08      	ldr	r2, [pc, #32]	@ (80086b4 <UART_SetConfig+0x2d4>)
 8008694:	fba2 2303 	umull	r2, r3, r2, r3
 8008698:	095b      	lsrs	r3, r3, #5
 800869a:	f003 0207 	and.w	r2, r3, #7
 800869e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4422      	add	r2, r4
 80086a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086a8:	e106      	b.n	80088b8 <UART_SetConfig+0x4d8>
 80086aa:	bf00      	nop
 80086ac:	40011000 	.word	0x40011000
 80086b0:	40011400 	.word	0x40011400
 80086b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086bc:	2200      	movs	r2, #0
 80086be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80086c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80086c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80086ca:	4642      	mov	r2, r8
 80086cc:	464b      	mov	r3, r9
 80086ce:	1891      	adds	r1, r2, r2
 80086d0:	6239      	str	r1, [r7, #32]
 80086d2:	415b      	adcs	r3, r3
 80086d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086da:	4641      	mov	r1, r8
 80086dc:	1854      	adds	r4, r2, r1
 80086de:	4649      	mov	r1, r9
 80086e0:	eb43 0501 	adc.w	r5, r3, r1
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	f04f 0300 	mov.w	r3, #0
 80086ec:	00eb      	lsls	r3, r5, #3
 80086ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086f2:	00e2      	lsls	r2, r4, #3
 80086f4:	4614      	mov	r4, r2
 80086f6:	461d      	mov	r5, r3
 80086f8:	4643      	mov	r3, r8
 80086fa:	18e3      	adds	r3, r4, r3
 80086fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008700:	464b      	mov	r3, r9
 8008702:	eb45 0303 	adc.w	r3, r5, r3
 8008706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800870a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008726:	4629      	mov	r1, r5
 8008728:	008b      	lsls	r3, r1, #2
 800872a:	4621      	mov	r1, r4
 800872c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008730:	4621      	mov	r1, r4
 8008732:	008a      	lsls	r2, r1, #2
 8008734:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008738:	f7f8 fa3e 	bl	8000bb8 <__aeabi_uldivmod>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4b60      	ldr	r3, [pc, #384]	@ (80088c4 <UART_SetConfig+0x4e4>)
 8008742:	fba3 2302 	umull	r2, r3, r3, r2
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	011c      	lsls	r4, r3, #4
 800874a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800874e:	2200      	movs	r2, #0
 8008750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008754:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008758:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800875c:	4642      	mov	r2, r8
 800875e:	464b      	mov	r3, r9
 8008760:	1891      	adds	r1, r2, r2
 8008762:	61b9      	str	r1, [r7, #24]
 8008764:	415b      	adcs	r3, r3
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800876c:	4641      	mov	r1, r8
 800876e:	1851      	adds	r1, r2, r1
 8008770:	6139      	str	r1, [r7, #16]
 8008772:	4649      	mov	r1, r9
 8008774:	414b      	adcs	r3, r1
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	f04f 0200 	mov.w	r2, #0
 800877c:	f04f 0300 	mov.w	r3, #0
 8008780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008784:	4659      	mov	r1, fp
 8008786:	00cb      	lsls	r3, r1, #3
 8008788:	4651      	mov	r1, sl
 800878a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800878e:	4651      	mov	r1, sl
 8008790:	00ca      	lsls	r2, r1, #3
 8008792:	4610      	mov	r0, r2
 8008794:	4619      	mov	r1, r3
 8008796:	4603      	mov	r3, r0
 8008798:	4642      	mov	r2, r8
 800879a:	189b      	adds	r3, r3, r2
 800879c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087a0:	464b      	mov	r3, r9
 80087a2:	460a      	mov	r2, r1
 80087a4:	eb42 0303 	adc.w	r3, r2, r3
 80087a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80087b8:	f04f 0200 	mov.w	r2, #0
 80087bc:	f04f 0300 	mov.w	r3, #0
 80087c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80087c4:	4649      	mov	r1, r9
 80087c6:	008b      	lsls	r3, r1, #2
 80087c8:	4641      	mov	r1, r8
 80087ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087ce:	4641      	mov	r1, r8
 80087d0:	008a      	lsls	r2, r1, #2
 80087d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80087d6:	f7f8 f9ef 	bl	8000bb8 <__aeabi_uldivmod>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	4b38      	ldr	r3, [pc, #224]	@ (80088c4 <UART_SetConfig+0x4e4>)
 80087e2:	fba3 2301 	umull	r2, r3, r3, r1
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	2264      	movs	r2, #100	@ 0x64
 80087ea:	fb02 f303 	mul.w	r3, r2, r3
 80087ee:	1acb      	subs	r3, r1, r3
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	3332      	adds	r3, #50	@ 0x32
 80087f4:	4a33      	ldr	r2, [pc, #204]	@ (80088c4 <UART_SetConfig+0x4e4>)
 80087f6:	fba2 2303 	umull	r2, r3, r2, r3
 80087fa:	095b      	lsrs	r3, r3, #5
 80087fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008800:	441c      	add	r4, r3
 8008802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008806:	2200      	movs	r2, #0
 8008808:	673b      	str	r3, [r7, #112]	@ 0x70
 800880a:	677a      	str	r2, [r7, #116]	@ 0x74
 800880c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008810:	4642      	mov	r2, r8
 8008812:	464b      	mov	r3, r9
 8008814:	1891      	adds	r1, r2, r2
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	415b      	adcs	r3, r3
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008820:	4641      	mov	r1, r8
 8008822:	1851      	adds	r1, r2, r1
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	4649      	mov	r1, r9
 8008828:	414b      	adcs	r3, r1
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	f04f 0200 	mov.w	r2, #0
 8008830:	f04f 0300 	mov.w	r3, #0
 8008834:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008838:	4659      	mov	r1, fp
 800883a:	00cb      	lsls	r3, r1, #3
 800883c:	4651      	mov	r1, sl
 800883e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008842:	4651      	mov	r1, sl
 8008844:	00ca      	lsls	r2, r1, #3
 8008846:	4610      	mov	r0, r2
 8008848:	4619      	mov	r1, r3
 800884a:	4603      	mov	r3, r0
 800884c:	4642      	mov	r2, r8
 800884e:	189b      	adds	r3, r3, r2
 8008850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008852:	464b      	mov	r3, r9
 8008854:	460a      	mov	r2, r1
 8008856:	eb42 0303 	adc.w	r3, r2, r3
 800885a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800885c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	663b      	str	r3, [r7, #96]	@ 0x60
 8008866:	667a      	str	r2, [r7, #100]	@ 0x64
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008874:	4649      	mov	r1, r9
 8008876:	008b      	lsls	r3, r1, #2
 8008878:	4641      	mov	r1, r8
 800887a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800887e:	4641      	mov	r1, r8
 8008880:	008a      	lsls	r2, r1, #2
 8008882:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008886:	f7f8 f997 	bl	8000bb8 <__aeabi_uldivmod>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4b0d      	ldr	r3, [pc, #52]	@ (80088c4 <UART_SetConfig+0x4e4>)
 8008890:	fba3 1302 	umull	r1, r3, r3, r2
 8008894:	095b      	lsrs	r3, r3, #5
 8008896:	2164      	movs	r1, #100	@ 0x64
 8008898:	fb01 f303 	mul.w	r3, r1, r3
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	3332      	adds	r3, #50	@ 0x32
 80088a2:	4a08      	ldr	r2, [pc, #32]	@ (80088c4 <UART_SetConfig+0x4e4>)
 80088a4:	fba2 2303 	umull	r2, r3, r2, r3
 80088a8:	095b      	lsrs	r3, r3, #5
 80088aa:	f003 020f 	and.w	r2, r3, #15
 80088ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4422      	add	r2, r4
 80088b6:	609a      	str	r2, [r3, #8]
}
 80088b8:	bf00      	nop
 80088ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80088be:	46bd      	mov	sp, r7
 80088c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088c4:	51eb851f 	.word	0x51eb851f

080088c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80088cc:	4904      	ldr	r1, [pc, #16]	@ (80088e0 <MX_FATFS_Init+0x18>)
 80088ce:	4805      	ldr	r0, [pc, #20]	@ (80088e4 <MX_FATFS_Init+0x1c>)
 80088d0:	f002 fcc0 	bl	800b254 <FATFS_LinkDriver>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	4b03      	ldr	r3, [pc, #12]	@ (80088e8 <MX_FATFS_Init+0x20>)
 80088da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80088dc:	bf00      	nop
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20000918 	.word	0x20000918
 80088e4:	20000024 	.word	0x20000024
 80088e8:	20000914 	.word	0x20000914

080088ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80088ec:	b480      	push	{r7}
 80088ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80088f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <SPI_TxRx>:
#endif
};

/* Wysylanie i odbieranie pojedynczego bajtu przez SPI */
static uint8_t SPI_TxRx(uint8_t data)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af02      	add	r7, sp, #8
 8008902:	4603      	mov	r3, r0
 8008904:	71fb      	strb	r3, [r7, #7]
    uint8_t rx;
    HAL_SPI_TransmitReceive(&hspi1, &data, &rx, 1, HAL_MAX_DELAY);
 8008906:	f107 020f 	add.w	r2, r7, #15
 800890a:	1df9      	adds	r1, r7, #7
 800890c:	f04f 33ff 	mov.w	r3, #4294967295
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	2301      	movs	r3, #1
 8008914:	4803      	ldr	r0, [pc, #12]	@ (8008924 <SPI_TxRx+0x28>)
 8008916:	f7fe fd0c 	bl	8007332 <HAL_SPI_TransmitReceive>
    return rx;
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	200002f8 	.word	0x200002f8

08008928 <SD_SendCommand>:

static void SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	6039      	str	r1, [r7, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
 8008934:	4613      	mov	r3, r2
 8008936:	71bb      	strb	r3, [r7, #6]
    SPI_TxRx(0xFF);
 8008938:	20ff      	movs	r0, #255	@ 0xff
 800893a:	f7ff ffdf 	bl	80088fc <SPI_TxRx>
    SPI_TxRx(0x40 | cmd);
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008944:	b2db      	uxtb	r3, r3
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff ffd8 	bl	80088fc <SPI_TxRx>
    SPI_TxRx(arg >> 24);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	0e1b      	lsrs	r3, r3, #24
 8008950:	b2db      	uxtb	r3, r3
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff ffd2 	bl	80088fc <SPI_TxRx>
    SPI_TxRx(arg >> 16);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	0c1b      	lsrs	r3, r3, #16
 800895c:	b2db      	uxtb	r3, r3
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff ffcc 	bl	80088fc <SPI_TxRx>
    SPI_TxRx(arg >> 8);
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	b2db      	uxtb	r3, r3
 800896a:	4618      	mov	r0, r3
 800896c:	f7ff ffc6 	bl	80088fc <SPI_TxRx>
    SPI_TxRx(arg);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff ffc1 	bl	80088fc <SPI_TxRx>
    SPI_TxRx(crc);
 800897a:	79bb      	ldrb	r3, [r7, #6]
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff ffbd 	bl	80088fc <SPI_TxRx>
}
 8008982:	bf00      	nop
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
	...

0800898c <USER_initialize>:
    return res;
}

/* Inicjalizacja SD */
DSTATUS USER_initialize(BYTE lun)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	71fb      	strb	r3, [r7, #7]
    uint8_t i, r1;

    CS_HIGH();
 8008996:	2201      	movs	r2, #1
 8008998:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800899c:	4824      	ldr	r0, [pc, #144]	@ (8008a30 <USER_initialize+0xa4>)
 800899e:	f7fb fc95 	bl	80042cc <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SPI_TxRx(0xFF); // 80 taktów
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]
 80089a6:	e005      	b.n	80089b4 <USER_initialize+0x28>
 80089a8:	20ff      	movs	r0, #255	@ 0xff
 80089aa:	f7ff ffa7 	bl	80088fc <SPI_TxRx>
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	3301      	adds	r3, #1
 80089b2:	73fb      	strb	r3, [r7, #15]
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	2b09      	cmp	r3, #9
 80089b8:	d9f6      	bls.n	80089a8 <USER_initialize+0x1c>

    CS_LOW();
 80089ba:	2200      	movs	r2, #0
 80089bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80089c0:	481b      	ldr	r0, [pc, #108]	@ (8008a30 <USER_initialize+0xa4>)
 80089c2:	f7fb fc83 	bl	80042cc <HAL_GPIO_WritePin>
    SD_SendCommand(0, 0, 0x95);  // CMD0: reset
 80089c6:	2295      	movs	r2, #149	@ 0x95
 80089c8:	2100      	movs	r1, #0
 80089ca:	2000      	movs	r0, #0
 80089cc:	f7ff ffac 	bl	8008928 <SD_SendCommand>
    for (i = 0; i < 10; i++) {
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
 80089d4:	e00a      	b.n	80089ec <USER_initialize+0x60>
        r1 = SPI_TxRx(0xFF);
 80089d6:	20ff      	movs	r0, #255	@ 0xff
 80089d8:	f7ff ff90 	bl	80088fc <SPI_TxRx>
 80089dc:	4603      	mov	r3, r0
 80089de:	73bb      	strb	r3, [r7, #14]
        if (r1 == 0x01) break;
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d006      	beq.n	80089f4 <USER_initialize+0x68>
    for (i = 0; i < 10; i++) {
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	3301      	adds	r3, #1
 80089ea:	73fb      	strb	r3, [r7, #15]
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	2b09      	cmp	r3, #9
 80089f0:	d9f1      	bls.n	80089d6 <USER_initialize+0x4a>
 80089f2:	e000      	b.n	80089f6 <USER_initialize+0x6a>
        if (r1 == 0x01) break;
 80089f4:	bf00      	nop
    }

    CS_HIGH();
 80089f6:	2201      	movs	r2, #1
 80089f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80089fc:	480c      	ldr	r0, [pc, #48]	@ (8008a30 <USER_initialize+0xa4>)
 80089fe:	f7fb fc65 	bl	80042cc <HAL_GPIO_WritePin>
    SPI_TxRx(0xFF);
 8008a02:	20ff      	movs	r0, #255	@ 0xff
 8008a04:	f7ff ff7a 	bl	80088fc <SPI_TxRx>

    if (r1 != 0x01) {
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d003      	beq.n	8008a16 <USER_initialize+0x8a>
        Stat = STA_NOINIT;
 8008a0e:	4b09      	ldr	r3, [pc, #36]	@ (8008a34 <USER_initialize+0xa8>)
 8008a10:	2201      	movs	r2, #1
 8008a12:	701a      	strb	r2, [r3, #0]
 8008a14:	e006      	b.n	8008a24 <USER_initialize+0x98>
    } else {
        Stat &= ~STA_NOINIT;
 8008a16:	4b07      	ldr	r3, [pc, #28]	@ (8008a34 <USER_initialize+0xa8>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	f023 0301 	bic.w	r3, r3, #1
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	4b04      	ldr	r3, [pc, #16]	@ (8008a34 <USER_initialize+0xa8>)
 8008a22:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 8008a24:	4b03      	ldr	r3, [pc, #12]	@ (8008a34 <USER_initialize+0xa8>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40020400 	.word	0x40020400
 8008a34:	20000021 	.word	0x20000021

08008a38 <USER_status>:

/* Status dysku */
DSTATUS USER_status(BYTE lun)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	71fb      	strb	r3, [r7, #7]
    return Stat;
 8008a42:	4b04      	ldr	r3, [pc, #16]	@ (8008a54 <USER_status+0x1c>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000021 	.word	0x20000021

08008a58 <USER_read>:

/* Odczyt sektorów */
DRESULT USER_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
    return RES_ERROR; // do implementacji pełnej obsługi SD przez SPI
 8008a68:	2301      	movs	r3, #1
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USER_write>:

/* Zapis sektorów */
#if _USE_WRITE == 1
DRESULT USER_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b085      	sub	sp, #20
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
 8008a82:	4603      	mov	r3, r0
 8008a84:	73fb      	strb	r3, [r7, #15]
    return RES_ERROR; // do implementacji pełnej obsługi SD przez SPI
 8008a86:	2301      	movs	r3, #1
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USER_ioctl>:
#endif /* _USE_WRITE == 1 */

/* Komendy sterujące */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	603a      	str	r2, [r7, #0]
 8008a9e:	71fb      	strb	r3, [r7, #7]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	71bb      	strb	r3, [r7, #6]
    switch (cmd) {
 8008aa4:	79bb      	ldrb	r3, [r7, #6]
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d81d      	bhi.n	8008ae6 <USER_ioctl+0x52>
 8008aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab0 <USER_ioctl+0x1c>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008ac1 	.word	0x08008ac1
 8008ab4:	08008adb 	.word	0x08008adb
 8008ab8:	08008ac5 	.word	0x08008ac5
 8008abc:	08008ad1 	.word	0x08008ad1
    case CTRL_SYNC:
        return RES_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e011      	b.n	8008ae8 <USER_ioctl+0x54>
    case GET_SECTOR_SIZE:
        *(WORD*)buff = 512;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008aca:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e00b      	b.n	8008ae8 <USER_ioctl+0x54>
    case GET_BLOCK_SIZE:
        *(DWORD*)buff = 1;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e006      	b.n	8008ae8 <USER_ioctl+0x54>
    case GET_SECTOR_COUNT:
        *(DWORD*)buff = 32768; // przykładowa liczba sektorów
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008ae0:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e000      	b.n	8008ae8 <USER_ioctl+0x54>
    }
    return RES_PARERR;
 8008ae6:	2304      	movs	r3, #4
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	4a08      	ldr	r2, [pc, #32]	@ (8008b24 <disk_status+0x30>)
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	79fa      	ldrb	r2, [r7, #7]
 8008b0c:	4905      	ldr	r1, [pc, #20]	@ (8008b24 <disk_status+0x30>)
 8008b0e:	440a      	add	r2, r1
 8008b10:	7a12      	ldrb	r2, [r2, #8]
 8008b12:	4610      	mov	r0, r2
 8008b14:	4798      	blx	r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000944 	.word	0x20000944

08008b28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008b36:	79fb      	ldrb	r3, [r7, #7]
 8008b38:	4a0e      	ldr	r2, [pc, #56]	@ (8008b74 <disk_initialize+0x4c>)
 8008b3a:	5cd3      	ldrb	r3, [r2, r3]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d114      	bne.n	8008b6a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	4a0c      	ldr	r2, [pc, #48]	@ (8008b74 <disk_initialize+0x4c>)
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	79fa      	ldrb	r2, [r7, #7]
 8008b4e:	4909      	ldr	r1, [pc, #36]	@ (8008b74 <disk_initialize+0x4c>)
 8008b50:	440a      	add	r2, r1
 8008b52:	7a12      	ldrb	r2, [r2, #8]
 8008b54:	4610      	mov	r0, r2
 8008b56:	4798      	blx	r3
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d103      	bne.n	8008b6a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	4a03      	ldr	r2, [pc, #12]	@ (8008b74 <disk_initialize+0x4c>)
 8008b66:	2101      	movs	r1, #1
 8008b68:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20000944 	.word	0x20000944

08008b78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60b9      	str	r1, [r7, #8]
 8008b80:	607a      	str	r2, [r7, #4]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008bb4 <disk_read+0x3c>)
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	689c      	ldr	r4, [r3, #8]
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	4a07      	ldr	r2, [pc, #28]	@ (8008bb4 <disk_read+0x3c>)
 8008b98:	4413      	add	r3, r2
 8008b9a:	7a18      	ldrb	r0, [r3, #8]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	47a0      	blx	r4
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd90      	pop	{r4, r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000944 	.word	0x20000944

08008bb8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008bb8:	b590      	push	{r4, r7, lr}
 8008bba:	b087      	sub	sp, #28
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	4a0a      	ldr	r2, [pc, #40]	@ (8008bf4 <disk_write+0x3c>)
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	68dc      	ldr	r4, [r3, #12]
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	4a07      	ldr	r2, [pc, #28]	@ (8008bf4 <disk_write+0x3c>)
 8008bd8:	4413      	add	r3, r2
 8008bda:	7a18      	ldrb	r0, [r3, #8]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	47a0      	blx	r4
 8008be4:	4603      	mov	r3, r0
 8008be6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd90      	pop	{r4, r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000944 	.word	0x20000944

08008bf8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	603a      	str	r2, [r7, #0]
 8008c02:	71fb      	strb	r3, [r7, #7]
 8008c04:	460b      	mov	r3, r1
 8008c06:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c08:	79fb      	ldrb	r3, [r7, #7]
 8008c0a:	4a09      	ldr	r2, [pc, #36]	@ (8008c30 <disk_ioctl+0x38>)
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	79fa      	ldrb	r2, [r7, #7]
 8008c16:	4906      	ldr	r1, [pc, #24]	@ (8008c30 <disk_ioctl+0x38>)
 8008c18:	440a      	add	r2, r1
 8008c1a:	7a10      	ldrb	r0, [r2, #8]
 8008c1c:	79b9      	ldrb	r1, [r7, #6]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	4798      	blx	r3
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]
  return res;
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000944 	.word	0x20000944

08008c34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008c44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	b21a      	sxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b21b      	sxth	r3, r3
 8008c52:	4313      	orrs	r3, r2
 8008c54:	b21b      	sxth	r3, r3
 8008c56:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c58:	89fb      	ldrh	r3, [r7, #14]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3303      	adds	r3, #3
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	3202      	adds	r2, #2
 8008c7e:	7812      	ldrb	r2, [r2, #0]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	021b      	lsls	r3, r3, #8
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	3201      	adds	r2, #1
 8008c8c:	7812      	ldrb	r2, [r2, #0]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	7812      	ldrb	r2, [r2, #0]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	60fb      	str	r3, [r7, #12]
	return rv;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	887a      	ldrh	r2, [r7, #2]
 8008cc0:	b2d2      	uxtb	r2, r2
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	887b      	ldrh	r3, [r7, #2]
 8008cc6:	0a1b      	lsrs	r3, r3, #8
 8008cc8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	887a      	ldrh	r2, [r7, #2]
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	701a      	strb	r2, [r3, #0]
}
 8008cd6:	bf00      	nop
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b083      	sub	sp, #12
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	607a      	str	r2, [r7, #4]
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	b2d2      	uxtb	r2, r2
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	b2d2      	uxtb	r2, r2
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	0a1b      	lsrs	r3, r3, #8
 8008d0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	607a      	str	r2, [r7, #4]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	b2d2      	uxtb	r2, r2
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	683a      	ldr	r2, [r7, #0]
 8008d2a:	b2d2      	uxtb	r2, r2
 8008d2c:	701a      	strb	r2, [r3, #0]
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008d3a:	b480      	push	{r7}
 8008d3c:	b087      	sub	sp, #28
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00d      	beq.n	8008d70 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	1c53      	adds	r3, r2, #1
 8008d58:	613b      	str	r3, [r7, #16]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	1c59      	adds	r1, r3, #1
 8008d5e:	6179      	str	r1, [r7, #20]
 8008d60:	7812      	ldrb	r2, [r2, #0]
 8008d62:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	607b      	str	r3, [r7, #4]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1f1      	bne.n	8008d54 <mem_cpy+0x1a>
	}
}
 8008d70:	bf00      	nop
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	617a      	str	r2, [r7, #20]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	b2d2      	uxtb	r2, r2
 8008d96:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	607b      	str	r3, [r7, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1f3      	bne.n	8008d8c <mem_set+0x10>
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	371c      	adds	r7, #28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008db2:	b480      	push	{r7}
 8008db4:	b089      	sub	sp, #36	@ 0x24
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	61fb      	str	r3, [r7, #28]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	61fa      	str	r2, [r7, #28]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	61ba      	str	r2, [r7, #24]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	1acb      	subs	r3, r1, r3
 8008dde:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	607b      	str	r3, [r7, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <mem_cmp+0x40>
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0eb      	beq.n	8008dca <mem_cmp+0x18>

	return r;
 8008df2:	697b      	ldr	r3, [r7, #20]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3724      	adds	r7, #36	@ 0x24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008e0a:	e002      	b.n	8008e12 <chk_chr+0x12>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	607b      	str	r3, [r7, #4]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d005      	beq.n	8008e26 <chk_chr+0x26>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d1f2      	bne.n	8008e0c <chk_chr+0xc>
	return *str;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	781b      	ldrb	r3, [r3, #0]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	370c      	adds	r7, #12
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
	...

08008e38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e42:	2300      	movs	r3, #0
 8008e44:	60bb      	str	r3, [r7, #8]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	e029      	b.n	8008ea0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008e4c:	4a27      	ldr	r2, [pc, #156]	@ (8008eec <chk_lock+0xb4>)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	011b      	lsls	r3, r3, #4
 8008e52:	4413      	add	r3, r2
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d01d      	beq.n	8008e96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e5a:	4a24      	ldr	r2, [pc, #144]	@ (8008eec <chk_lock+0xb4>)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	011b      	lsls	r3, r3, #4
 8008e60:	4413      	add	r3, r2
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d116      	bne.n	8008e9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8008eec <chk_lock+0xb4>)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	4413      	add	r3, r2
 8008e74:	3304      	adds	r3, #4
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d10c      	bne.n	8008e9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008e80:	4a1a      	ldr	r2, [pc, #104]	@ (8008eec <chk_lock+0xb4>)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	4413      	add	r3, r2
 8008e88:	3308      	adds	r3, #8
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d102      	bne.n	8008e9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008e94:	e007      	b.n	8008ea6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008e96:	2301      	movs	r3, #1
 8008e98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d9d2      	bls.n	8008e4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d109      	bne.n	8008ec0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <chk_lock+0x80>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d101      	bne.n	8008ebc <chk_lock+0x84>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e010      	b.n	8008ede <chk_lock+0xa6>
 8008ebc:	2312      	movs	r3, #18
 8008ebe:	e00e      	b.n	8008ede <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d108      	bne.n	8008ed8 <chk_lock+0xa0>
 8008ec6:	4a09      	ldr	r2, [pc, #36]	@ (8008eec <chk_lock+0xb4>)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	4413      	add	r3, r2
 8008ece:	330c      	adds	r3, #12
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ed6:	d101      	bne.n	8008edc <chk_lock+0xa4>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	e000      	b.n	8008ede <chk_lock+0xa6>
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20000924 	.word	0x20000924

08008ef0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	607b      	str	r3, [r7, #4]
 8008efa:	e002      	b.n	8008f02 <enq_lock+0x12>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3301      	adds	r3, #1
 8008f00:	607b      	str	r3, [r7, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d806      	bhi.n	8008f16 <enq_lock+0x26>
 8008f08:	4a09      	ldr	r2, [pc, #36]	@ (8008f30 <enq_lock+0x40>)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	011b      	lsls	r3, r3, #4
 8008f0e:	4413      	add	r3, r2
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1f2      	bne.n	8008efc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	bf14      	ite	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	2300      	moveq	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20000924 	.word	0x20000924

08008f34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	e01f      	b.n	8008f84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008f44:	4a41      	ldr	r2, [pc, #260]	@ (800904c <inc_lock+0x118>)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	4413      	add	r3, r2
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d113      	bne.n	8008f7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008f56:	4a3d      	ldr	r2, [pc, #244]	@ (800904c <inc_lock+0x118>)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	4413      	add	r3, r2
 8008f5e:	3304      	adds	r3, #4
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d109      	bne.n	8008f7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008f6a:	4a38      	ldr	r2, [pc, #224]	@ (800904c <inc_lock+0x118>)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	4413      	add	r3, r2
 8008f72:	3308      	adds	r3, #8
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d006      	beq.n	8008f8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3301      	adds	r3, #1
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d9dc      	bls.n	8008f44 <inc_lock+0x10>
 8008f8a:	e000      	b.n	8008f8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008f8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d132      	bne.n	8008ffa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f94:	2300      	movs	r3, #0
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	e002      	b.n	8008fa0 <inc_lock+0x6c>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d806      	bhi.n	8008fb4 <inc_lock+0x80>
 8008fa6:	4a29      	ldr	r2, [pc, #164]	@ (800904c <inc_lock+0x118>)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	4413      	add	r3, r2
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1f2      	bne.n	8008f9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d101      	bne.n	8008fbe <inc_lock+0x8a>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	e040      	b.n	8009040 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	4922      	ldr	r1, [pc, #136]	@ (800904c <inc_lock+0x118>)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	440b      	add	r3, r1
 8008fca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	491e      	ldr	r1, [pc, #120]	@ (800904c <inc_lock+0x118>)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	440b      	add	r3, r1
 8008fd8:	3304      	adds	r3, #4
 8008fda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	695a      	ldr	r2, [r3, #20]
 8008fe0:	491a      	ldr	r1, [pc, #104]	@ (800904c <inc_lock+0x118>)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	440b      	add	r3, r1
 8008fe8:	3308      	adds	r3, #8
 8008fea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008fec:	4a17      	ldr	r2, [pc, #92]	@ (800904c <inc_lock+0x118>)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	011b      	lsls	r3, r3, #4
 8008ff2:	4413      	add	r3, r2
 8008ff4:	330c      	adds	r3, #12
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d009      	beq.n	8009014 <inc_lock+0xe0>
 8009000:	4a12      	ldr	r2, [pc, #72]	@ (800904c <inc_lock+0x118>)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	4413      	add	r3, r2
 8009008:	330c      	adds	r3, #12
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <inc_lock+0xe0>
 8009010:	2300      	movs	r3, #0
 8009012:	e015      	b.n	8009040 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d108      	bne.n	800902c <inc_lock+0xf8>
 800901a:	4a0c      	ldr	r2, [pc, #48]	@ (800904c <inc_lock+0x118>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	4413      	add	r3, r2
 8009022:	330c      	adds	r3, #12
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	3301      	adds	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	e001      	b.n	8009030 <inc_lock+0xfc>
 800902c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009030:	4906      	ldr	r1, [pc, #24]	@ (800904c <inc_lock+0x118>)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	011b      	lsls	r3, r3, #4
 8009036:	440b      	add	r3, r1
 8009038:	330c      	adds	r3, #12
 800903a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3301      	adds	r3, #1
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	20000924 	.word	0x20000924

08009050 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3b01      	subs	r3, #1
 800905c:	607b      	str	r3, [r7, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d825      	bhi.n	80090b0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009064:	4a17      	ldr	r2, [pc, #92]	@ (80090c4 <dec_lock+0x74>)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	4413      	add	r3, r2
 800906c:	330c      	adds	r3, #12
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009072:	89fb      	ldrh	r3, [r7, #14]
 8009074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009078:	d101      	bne.n	800907e <dec_lock+0x2e>
 800907a:	2300      	movs	r3, #0
 800907c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800907e:	89fb      	ldrh	r3, [r7, #14]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <dec_lock+0x3a>
 8009084:	89fb      	ldrh	r3, [r7, #14]
 8009086:	3b01      	subs	r3, #1
 8009088:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800908a:	4a0e      	ldr	r2, [pc, #56]	@ (80090c4 <dec_lock+0x74>)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	4413      	add	r3, r2
 8009092:	330c      	adds	r3, #12
 8009094:	89fa      	ldrh	r2, [r7, #14]
 8009096:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009098:	89fb      	ldrh	r3, [r7, #14]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d105      	bne.n	80090aa <dec_lock+0x5a>
 800909e:	4a09      	ldr	r2, [pc, #36]	@ (80090c4 <dec_lock+0x74>)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	4413      	add	r3, r2
 80090a6:	2200      	movs	r2, #0
 80090a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	737b      	strb	r3, [r7, #13]
 80090ae:	e001      	b.n	80090b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80090b0:	2302      	movs	r3, #2
 80090b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80090b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	20000924 	.word	0x20000924

080090c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e010      	b.n	80090f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80090d6:	4a0d      	ldr	r2, [pc, #52]	@ (800910c <clear_lock+0x44>)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	4413      	add	r3, r2
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d105      	bne.n	80090f2 <clear_lock+0x2a>
 80090e6:	4a09      	ldr	r2, [pc, #36]	@ (800910c <clear_lock+0x44>)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	011b      	lsls	r3, r3, #4
 80090ec:	4413      	add	r3, r2
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3301      	adds	r3, #1
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d9eb      	bls.n	80090d6 <clear_lock+0xe>
	}
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	20000924 	.word	0x20000924

08009110 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	78db      	ldrb	r3, [r3, #3]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d034      	beq.n	800918e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009128:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	7858      	ldrb	r0, [r3, #1]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009134:	2301      	movs	r3, #1
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	f7ff fd3e 	bl	8008bb8 <disk_write>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009142:	2301      	movs	r3, #1
 8009144:	73fb      	strb	r3, [r7, #15]
 8009146:	e022      	b.n	800918e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	1ad2      	subs	r2, r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	429a      	cmp	r2, r3
 800915c:	d217      	bcs.n	800918e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	789b      	ldrb	r3, [r3, #2]
 8009162:	613b      	str	r3, [r7, #16]
 8009164:	e010      	b.n	8009188 <sync_window+0x78>
					wsect += fs->fsize;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	4413      	add	r3, r2
 800916e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	7858      	ldrb	r0, [r3, #1]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800917a:	2301      	movs	r3, #1
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	f7ff fd1b 	bl	8008bb8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	3b01      	subs	r3, #1
 8009186:	613b      	str	r3, [r7, #16]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d8eb      	bhi.n	8009166 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d01b      	beq.n	80091e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7ff ffad 	bl	8009110 <sync_window>
 80091b6:	4603      	mov	r3, r0
 80091b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d113      	bne.n	80091e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7858      	ldrb	r0, [r3, #1]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80091ca:	2301      	movs	r3, #1
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	f7ff fcd3 	bl	8008b78 <disk_read>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d004      	beq.n	80091e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80091d8:	f04f 33ff 	mov.w	r3, #4294967295
 80091dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80091de:	2301      	movs	r3, #1
 80091e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
	...

080091f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff ff87 	bl	8009110 <sync_window>
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d158      	bne.n	80092be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d148      	bne.n	80092a6 <sync_fs+0xb2>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d144      	bne.n	80092a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3330      	adds	r3, #48	@ 0x30
 8009220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009224:	2100      	movs	r1, #0
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff fda8 	bl	8008d7c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3330      	adds	r3, #48	@ 0x30
 8009230:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009234:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff fd37 	bl	8008cac <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3330      	adds	r3, #48	@ 0x30
 8009242:	4921      	ldr	r1, [pc, #132]	@ (80092c8 <sync_fs+0xd4>)
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff fd4c 	bl	8008ce2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	3330      	adds	r3, #48	@ 0x30
 800924e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009252:	491e      	ldr	r1, [pc, #120]	@ (80092cc <sync_fs+0xd8>)
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff fd44 	bl	8008ce2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3330      	adds	r3, #48	@ 0x30
 800925e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	4619      	mov	r1, r3
 8009268:	4610      	mov	r0, r2
 800926a:	f7ff fd3a 	bl	8008ce2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3330      	adds	r3, #48	@ 0x30
 8009272:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f7ff fd30 	bl	8008ce2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7858      	ldrb	r0, [r3, #1]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800929a:	2301      	movs	r3, #1
 800929c:	f7ff fc8c 	bl	8008bb8 <disk_write>
			fs->fsi_flag = 0;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	2200      	movs	r2, #0
 80092ac:	2100      	movs	r1, #0
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff fca2 	bl	8008bf8 <disk_ioctl>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <sync_fs+0xca>
 80092ba:	2301      	movs	r3, #1
 80092bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	41615252 	.word	0x41615252
 80092cc:	61417272 	.word	0x61417272

080092d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	3b02      	subs	r3, #2
 80092de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	3b02      	subs	r3, #2
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d301      	bcc.n	80092f0 <clust2sect+0x20>
 80092ec:	2300      	movs	r3, #0
 80092ee:	e008      	b.n	8009302 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	895b      	ldrh	r3, [r3, #10]
 80092f4:	461a      	mov	r2, r3
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	fb03 f202 	mul.w	r2, r3, r2
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009300:	4413      	add	r3, r2
}
 8009302:	4618      	mov	r0, r3
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b086      	sub	sp, #24
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d904      	bls.n	800932e <get_fat+0x20>
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d302      	bcc.n	8009334 <get_fat+0x26>
		val = 1;	/* Internal error */
 800932e:	2301      	movs	r3, #1
 8009330:	617b      	str	r3, [r7, #20]
 8009332:	e08e      	b.n	8009452 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009334:	f04f 33ff 	mov.w	r3, #4294967295
 8009338:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b03      	cmp	r3, #3
 8009340:	d061      	beq.n	8009406 <get_fat+0xf8>
 8009342:	2b03      	cmp	r3, #3
 8009344:	dc7b      	bgt.n	800943e <get_fat+0x130>
 8009346:	2b01      	cmp	r3, #1
 8009348:	d002      	beq.n	8009350 <get_fat+0x42>
 800934a:	2b02      	cmp	r3, #2
 800934c:	d041      	beq.n	80093d2 <get_fat+0xc4>
 800934e:	e076      	b.n	800943e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	085b      	lsrs	r3, r3, #1
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	6a1a      	ldr	r2, [r3, #32]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	0a5b      	lsrs	r3, r3, #9
 8009366:	4413      	add	r3, r2
 8009368:	4619      	mov	r1, r3
 800936a:	6938      	ldr	r0, [r7, #16]
 800936c:	f7ff ff14 	bl	8009198 <move_window>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d166      	bne.n	8009444 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	60fa      	str	r2, [r7, #12]
 800937c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	4413      	add	r3, r2
 8009384:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009388:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6a1a      	ldr	r2, [r3, #32]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	0a5b      	lsrs	r3, r3, #9
 8009392:	4413      	add	r3, r2
 8009394:	4619      	mov	r1, r3
 8009396:	6938      	ldr	r0, [r7, #16]
 8009398:	f7ff fefe 	bl	8009198 <move_window>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d152      	bne.n	8009448 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	4413      	add	r3, r2
 80093ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80093b0:	021b      	lsls	r3, r3, #8
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <get_fat+0xba>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	091b      	lsrs	r3, r3, #4
 80093c6:	e002      	b.n	80093ce <get_fat+0xc0>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ce:	617b      	str	r3, [r7, #20]
			break;
 80093d0:	e03f      	b.n	8009452 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6a1a      	ldr	r2, [r3, #32]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	0a1b      	lsrs	r3, r3, #8
 80093da:	4413      	add	r3, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	6938      	ldr	r0, [r7, #16]
 80093e0:	f7ff feda 	bl	8009198 <move_window>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d130      	bne.n	800944c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80093f8:	4413      	add	r3, r2
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff fc1a 	bl	8008c34 <ld_word>
 8009400:	4603      	mov	r3, r0
 8009402:	617b      	str	r3, [r7, #20]
			break;
 8009404:	e025      	b.n	8009452 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6a1a      	ldr	r2, [r3, #32]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	09db      	lsrs	r3, r3, #7
 800940e:	4413      	add	r3, r2
 8009410:	4619      	mov	r1, r3
 8009412:	6938      	ldr	r0, [r7, #16]
 8009414:	f7ff fec0 	bl	8009198 <move_window>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d118      	bne.n	8009450 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800942c:	4413      	add	r3, r2
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff fc19 	bl	8008c66 <ld_dword>
 8009434:	4603      	mov	r3, r0
 8009436:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800943a:	617b      	str	r3, [r7, #20]
			break;
 800943c:	e009      	b.n	8009452 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800943e:	2301      	movs	r3, #1
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	e006      	b.n	8009452 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009444:	bf00      	nop
 8009446:	e004      	b.n	8009452 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009448:	bf00      	nop
 800944a:	e002      	b.n	8009452 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800944c:	bf00      	nop
 800944e:	e000      	b.n	8009452 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009450:	bf00      	nop
		}
	}

	return val;
 8009452:	697b      	ldr	r3, [r7, #20]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800945c:	b590      	push	{r4, r7, lr}
 800945e:	b089      	sub	sp, #36	@ 0x24
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009468:	2302      	movs	r3, #2
 800946a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2b01      	cmp	r3, #1
 8009470:	f240 80d9 	bls.w	8009626 <put_fat+0x1ca>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	429a      	cmp	r2, r3
 800947c:	f080 80d3 	bcs.w	8009626 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	2b03      	cmp	r3, #3
 8009486:	f000 8096 	beq.w	80095b6 <put_fat+0x15a>
 800948a:	2b03      	cmp	r3, #3
 800948c:	f300 80cb 	bgt.w	8009626 <put_fat+0x1ca>
 8009490:	2b01      	cmp	r3, #1
 8009492:	d002      	beq.n	800949a <put_fat+0x3e>
 8009494:	2b02      	cmp	r3, #2
 8009496:	d06e      	beq.n	8009576 <put_fat+0x11a>
 8009498:	e0c5      	b.n	8009626 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	61bb      	str	r3, [r7, #24]
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	085b      	lsrs	r3, r3, #1
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	4413      	add	r3, r2
 80094a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a1a      	ldr	r2, [r3, #32]
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	0a5b      	lsrs	r3, r3, #9
 80094b0:	4413      	add	r3, r2
 80094b2:	4619      	mov	r1, r3
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7ff fe6f 	bl	8009198 <move_window>
 80094ba:	4603      	mov	r3, r0
 80094bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094be:	7ffb      	ldrb	r3, [r7, #31]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f040 80a9 	bne.w	8009618 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	1c59      	adds	r1, r3, #1
 80094d0:	61b9      	str	r1, [r7, #24]
 80094d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d6:	4413      	add	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00d      	beq.n	8009500 <put_fat+0xa4>
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	b25b      	sxtb	r3, r3
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	b25a      	sxtb	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	b25b      	sxtb	r3, r3
 80094f4:	011b      	lsls	r3, r3, #4
 80094f6:	b25b      	sxtb	r3, r3
 80094f8:	4313      	orrs	r3, r2
 80094fa:	b25b      	sxtb	r3, r3
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	e001      	b.n	8009504 <put_fat+0xa8>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2201      	movs	r2, #1
 800950c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6a1a      	ldr	r2, [r3, #32]
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	0a5b      	lsrs	r3, r3, #9
 8009516:	4413      	add	r3, r2
 8009518:	4619      	mov	r1, r3
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff fe3c 	bl	8009198 <move_window>
 8009520:	4603      	mov	r3, r0
 8009522:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009524:	7ffb      	ldrb	r3, [r7, #31]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d178      	bne.n	800961c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009536:	4413      	add	r3, r2
 8009538:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <put_fat+0xf0>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	091b      	lsrs	r3, r3, #4
 8009548:	b2db      	uxtb	r3, r3
 800954a:	e00e      	b.n	800956a <put_fat+0x10e>
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	b25b      	sxtb	r3, r3
 8009552:	f023 030f 	bic.w	r3, r3, #15
 8009556:	b25a      	sxtb	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	0a1b      	lsrs	r3, r3, #8
 800955c:	b25b      	sxtb	r3, r3
 800955e:	f003 030f 	and.w	r3, r3, #15
 8009562:	b25b      	sxtb	r3, r3
 8009564:	4313      	orrs	r3, r2
 8009566:	b25b      	sxtb	r3, r3
 8009568:	b2db      	uxtb	r3, r3
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2201      	movs	r2, #1
 8009572:	70da      	strb	r2, [r3, #3]
			break;
 8009574:	e057      	b.n	8009626 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a1a      	ldr	r2, [r3, #32]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	0a1b      	lsrs	r3, r3, #8
 800957e:	4413      	add	r3, r2
 8009580:	4619      	mov	r1, r3
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f7ff fe08 	bl	8009198 <move_window>
 8009588:	4603      	mov	r3, r0
 800958a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800958c:	7ffb      	ldrb	r3, [r7, #31]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d146      	bne.n	8009620 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	005b      	lsls	r3, r3, #1
 800959c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80095a0:	4413      	add	r3, r2
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	b292      	uxth	r2, r2
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff fb7f 	bl	8008cac <st_word>
			fs->wflag = 1;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	70da      	strb	r2, [r3, #3]
			break;
 80095b4:	e037      	b.n	8009626 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a1a      	ldr	r2, [r3, #32]
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	09db      	lsrs	r3, r3, #7
 80095be:	4413      	add	r3, r2
 80095c0:	4619      	mov	r1, r3
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff fde8 	bl	8009198 <move_window>
 80095c8:	4603      	mov	r3, r0
 80095ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095cc:	7ffb      	ldrb	r3, [r7, #31]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d128      	bne.n	8009624 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80095e6:	4413      	add	r3, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fb3c 	bl	8008c66 <ld_dword>
 80095ee:	4603      	mov	r3, r0
 80095f0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80095f4:	4323      	orrs	r3, r4
 80095f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009606:	4413      	add	r3, r2
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff fb69 	bl	8008ce2 <st_dword>
			fs->wflag = 1;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2201      	movs	r2, #1
 8009614:	70da      	strb	r2, [r3, #3]
			break;
 8009616:	e006      	b.n	8009626 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009618:	bf00      	nop
 800961a:	e004      	b.n	8009626 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800961c:	bf00      	nop
 800961e:	e002      	b.n	8009626 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009620:	bf00      	nop
 8009622:	e000      	b.n	8009626 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8009624:	bf00      	nop
		}
	}
	return res;
 8009626:	7ffb      	ldrb	r3, [r7, #31]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3724      	adds	r7, #36	@ 0x24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd90      	pop	{r4, r7, pc}

08009630 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d904      	bls.n	8009656 <remove_chain+0x26>
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	429a      	cmp	r2, r3
 8009654:	d301      	bcc.n	800965a <remove_chain+0x2a>
 8009656:	2302      	movs	r3, #2
 8009658:	e04b      	b.n	80096f2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00c      	beq.n	800967a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009660:	f04f 32ff 	mov.w	r2, #4294967295
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	69b8      	ldr	r0, [r7, #24]
 8009668:	f7ff fef8 	bl	800945c <put_fat>
 800966c:	4603      	mov	r3, r0
 800966e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009670:	7ffb      	ldrb	r3, [r7, #31]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <remove_chain+0x4a>
 8009676:	7ffb      	ldrb	r3, [r7, #31]
 8009678:	e03b      	b.n	80096f2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f7ff fe46 	bl	800930e <get_fat>
 8009682:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d031      	beq.n	80096ee <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d101      	bne.n	8009694 <remove_chain+0x64>
 8009690:	2302      	movs	r3, #2
 8009692:	e02e      	b.n	80096f2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d101      	bne.n	80096a0 <remove_chain+0x70>
 800969c:	2301      	movs	r3, #1
 800969e:	e028      	b.n	80096f2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80096a0:	2200      	movs	r2, #0
 80096a2:	68b9      	ldr	r1, [r7, #8]
 80096a4:	69b8      	ldr	r0, [r7, #24]
 80096a6:	f7ff fed9 	bl	800945c <put_fat>
 80096aa:	4603      	mov	r3, r0
 80096ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80096ae:	7ffb      	ldrb	r3, [r7, #31]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <remove_chain+0x88>
 80096b4:	7ffb      	ldrb	r3, [r7, #31]
 80096b6:	e01c      	b.n	80096f2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	691a      	ldr	r2, [r3, #16]
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	3b02      	subs	r3, #2
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d20b      	bcs.n	80096de <remove_chain+0xae>
			fs->free_clst++;
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	791b      	ldrb	r3, [r3, #4]
 80096d4:	f043 0301 	orr.w	r3, r3, #1
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d3c6      	bcc.n	800967a <remove_chain+0x4a>
 80096ec:	e000      	b.n	80096f0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80096ee:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3720      	adds	r7, #32
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b088      	sub	sp, #32
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10d      	bne.n	800972c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d004      	beq.n	8009726 <create_chain+0x2c>
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	429a      	cmp	r2, r3
 8009724:	d31b      	bcc.n	800975e <create_chain+0x64>
 8009726:	2301      	movs	r3, #1
 8009728:	61bb      	str	r3, [r7, #24]
 800972a:	e018      	b.n	800975e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7ff fded 	bl	800930e <get_fat>
 8009734:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d801      	bhi.n	8009740 <create_chain+0x46>
 800973c:	2301      	movs	r3, #1
 800973e:	e070      	b.n	8009822 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009746:	d101      	bne.n	800974c <create_chain+0x52>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	e06a      	b.n	8009822 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	429a      	cmp	r2, r3
 8009754:	d201      	bcs.n	800975a <create_chain+0x60>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	e063      	b.n	8009822 <create_chain+0x128>
		scl = clst;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	3301      	adds	r3, #1
 8009766:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	695b      	ldr	r3, [r3, #20]
 800976c:	69fa      	ldr	r2, [r7, #28]
 800976e:	429a      	cmp	r2, r3
 8009770:	d307      	bcc.n	8009782 <create_chain+0x88>
				ncl = 2;
 8009772:	2302      	movs	r3, #2
 8009774:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009776:	69fa      	ldr	r2, [r7, #28]
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	429a      	cmp	r2, r3
 800977c:	d901      	bls.n	8009782 <create_chain+0x88>
 800977e:	2300      	movs	r3, #0
 8009780:	e04f      	b.n	8009822 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009782:	69f9      	ldr	r1, [r7, #28]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff fdc2 	bl	800930e <get_fat>
 800978a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00e      	beq.n	80097b0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d003      	beq.n	80097a0 <create_chain+0xa6>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979e:	d101      	bne.n	80097a4 <create_chain+0xaa>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	e03e      	b.n	8009822 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80097a4:	69fa      	ldr	r2, [r7, #28]
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d1da      	bne.n	8009762 <create_chain+0x68>
 80097ac:	2300      	movs	r3, #0
 80097ae:	e038      	b.n	8009822 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80097b0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80097b2:	f04f 32ff 	mov.w	r2, #4294967295
 80097b6:	69f9      	ldr	r1, [r7, #28]
 80097b8:	6938      	ldr	r0, [r7, #16]
 80097ba:	f7ff fe4f 	bl	800945c <put_fat>
 80097be:	4603      	mov	r3, r0
 80097c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d109      	bne.n	80097dc <create_chain+0xe2>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d006      	beq.n	80097dc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80097ce:	69fa      	ldr	r2, [r7, #28]
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6938      	ldr	r0, [r7, #16]
 80097d4:	f7ff fe42 	bl	800945c <put_fat>
 80097d8:	4603      	mov	r3, r0
 80097da:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80097dc:	7dfb      	ldrb	r3, [r7, #23]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d116      	bne.n	8009810 <create_chain+0x116>
		fs->last_clst = ncl;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	69fa      	ldr	r2, [r7, #28]
 80097e6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	691a      	ldr	r2, [r3, #16]
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	3b02      	subs	r3, #2
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d804      	bhi.n	8009800 <create_chain+0x106>
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	1e5a      	subs	r2, r3, #1
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	791b      	ldrb	r3, [r3, #4]
 8009804:	f043 0301 	orr.w	r3, r3, #1
 8009808:	b2da      	uxtb	r2, r3
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	711a      	strb	r2, [r3, #4]
 800980e:	e007      	b.n	8009820 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d102      	bne.n	800981c <create_chain+0x122>
 8009816:	f04f 33ff 	mov.w	r3, #4294967295
 800981a:	e000      	b.n	800981e <create_chain+0x124>
 800981c:	2301      	movs	r3, #1
 800981e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009820:	69fb      	ldr	r3, [r7, #28]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3720      	adds	r7, #32
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800982a:	b480      	push	{r7}
 800982c:	b087      	sub	sp, #28
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983e:	3304      	adds	r3, #4
 8009840:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	0a5b      	lsrs	r3, r3, #9
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	8952      	ldrh	r2, [r2, #10]
 800984a:	fbb3 f3f2 	udiv	r3, r3, r2
 800984e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	613a      	str	r2, [r7, #16]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <clmt_clust+0x3a>
 8009860:	2300      	movs	r3, #0
 8009862:	e010      	b.n	8009886 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	429a      	cmp	r2, r3
 800986a:	d307      	bcc.n	800987c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	3304      	adds	r3, #4
 8009878:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800987a:	e7e9      	b.n	8009850 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800987c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	4413      	add	r3, r2
}
 8009886:	4618      	mov	r0, r3
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b086      	sub	sp, #24
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098a8:	d204      	bcs.n	80098b4 <dir_sdi+0x22>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	f003 031f 	and.w	r3, r3, #31
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80098b4:	2302      	movs	r3, #2
 80098b6:	e063      	b.n	8009980 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d106      	bne.n	80098d8 <dir_sdi+0x46>
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d902      	bls.n	80098d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10c      	bne.n	80098f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	095b      	lsrs	r3, r3, #5
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	8912      	ldrh	r2, [r2, #8]
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d301      	bcc.n	80098ee <dir_sdi+0x5c>
 80098ea:	2302      	movs	r3, #2
 80098ec:	e048      	b.n	8009980 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	61da      	str	r2, [r3, #28]
 80098f6:	e029      	b.n	800994c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	895b      	ldrh	r3, [r3, #10]
 80098fc:	025b      	lsls	r3, r3, #9
 80098fe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009900:	e019      	b.n	8009936 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6979      	ldr	r1, [r7, #20]
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fd01 	bl	800930e <get_fat>
 800990c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d101      	bne.n	800991a <dir_sdi+0x88>
 8009916:	2301      	movs	r3, #1
 8009918:	e032      	b.n	8009980 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d904      	bls.n	800992a <dir_sdi+0x98>
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	429a      	cmp	r2, r3
 8009928:	d301      	bcc.n	800992e <dir_sdi+0x9c>
 800992a:	2302      	movs	r3, #2
 800992c:	e028      	b.n	8009980 <dir_sdi+0xee>
			ofs -= csz;
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	429a      	cmp	r2, r3
 800993c:	d2e1      	bcs.n	8009902 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800993e:	6979      	ldr	r1, [r7, #20]
 8009940:	6938      	ldr	r0, [r7, #16]
 8009942:	f7ff fcc5 	bl	80092d0 <clust2sect>
 8009946:	4602      	mov	r2, r0
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <dir_sdi+0xcc>
 800995a:	2302      	movs	r3, #2
 800995c:	e010      	b.n	8009980 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	69da      	ldr	r2, [r3, #28]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	0a5b      	lsrs	r3, r3, #9
 8009966:	441a      	add	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009978:	441a      	add	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3718      	adds	r7, #24
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	3320      	adds	r3, #32
 800999e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <dir_next+0x28>
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099ae:	d301      	bcc.n	80099b4 <dir_next+0x2c>
 80099b0:	2304      	movs	r3, #4
 80099b2:	e0aa      	b.n	8009b0a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f040 8098 	bne.w	8009af0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	69db      	ldr	r3, [r3, #28]
 80099c4:	1c5a      	adds	r2, r3, #1
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10b      	bne.n	80099ea <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	095b      	lsrs	r3, r3, #5
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	8912      	ldrh	r2, [r2, #8]
 80099da:	4293      	cmp	r3, r2
 80099dc:	f0c0 8088 	bcc.w	8009af0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	61da      	str	r2, [r3, #28]
 80099e6:	2304      	movs	r3, #4
 80099e8:	e08f      	b.n	8009b0a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	0a5b      	lsrs	r3, r3, #9
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	8952      	ldrh	r2, [r2, #10]
 80099f2:	3a01      	subs	r2, #1
 80099f4:	4013      	ands	r3, r2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d17a      	bne.n	8009af0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	4619      	mov	r1, r3
 8009a02:	4610      	mov	r0, r2
 8009a04:	f7ff fc83 	bl	800930e <get_fat>
 8009a08:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d801      	bhi.n	8009a14 <dir_next+0x8c>
 8009a10:	2302      	movs	r3, #2
 8009a12:	e07a      	b.n	8009b0a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d101      	bne.n	8009a20 <dir_next+0x98>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e074      	b.n	8009b0a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d358      	bcc.n	8009adc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d104      	bne.n	8009a3a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	61da      	str	r2, [r3, #28]
 8009a36:	2304      	movs	r3, #4
 8009a38:	e067      	b.n	8009b0a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	4619      	mov	r1, r3
 8009a42:	4610      	mov	r0, r2
 8009a44:	f7ff fe59 	bl	80096fa <create_chain>
 8009a48:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <dir_next+0xcc>
 8009a50:	2307      	movs	r3, #7
 8009a52:	e05a      	b.n	8009b0a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d101      	bne.n	8009a5e <dir_next+0xd6>
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e055      	b.n	8009b0a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a64:	d101      	bne.n	8009a6a <dir_next+0xe2>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e04f      	b.n	8009b0a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7ff fb50 	bl	8009110 <sync_window>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <dir_next+0xf2>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e047      	b.n	8009b0a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3330      	adds	r3, #48	@ 0x30
 8009a7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a82:	2100      	movs	r1, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff f979 	bl	8008d7c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	613b      	str	r3, [r7, #16]
 8009a8e:	6979      	ldr	r1, [r7, #20]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7ff fc1d 	bl	80092d0 <clust2sect>
 8009a96:	4602      	mov	r2, r0
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009a9c:	e012      	b.n	8009ac4 <dir_next+0x13c>
						fs->wflag = 1;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f7ff fb33 	bl	8009110 <sync_window>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <dir_next+0x12c>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e02a      	b.n	8009b0a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	895b      	ldrh	r3, [r3, #10]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d3e6      	bcc.n	8009a9e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	1ad2      	subs	r2, r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009ae2:	6979      	ldr	r1, [r7, #20]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff fbf3 	bl	80092d0 <clust2sect>
 8009aea:	4602      	mov	r2, r0
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b02:	441a      	add	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b086      	sub	sp, #24
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b22:	2100      	movs	r1, #0
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff feb4 	bl	8009892 <dir_sdi>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d12b      	bne.n	8009b8c <dir_alloc+0x7a>
		n = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f7ff fb2a 	bl	8009198 <move_window>
 8009b44:	4603      	mov	r3, r0
 8009b46:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b48:	7dfb      	ldrb	r3, [r7, #23]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d11d      	bne.n	8009b8a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2be5      	cmp	r3, #229	@ 0xe5
 8009b56:	d004      	beq.n	8009b62 <dir_alloc+0x50>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a1b      	ldr	r3, [r3, #32]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d107      	bne.n	8009b72 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	3301      	adds	r3, #1
 8009b66:	613b      	str	r3, [r7, #16]
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d102      	bne.n	8009b76 <dir_alloc+0x64>
 8009b70:	e00c      	b.n	8009b8c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b72:	2300      	movs	r3, #0
 8009b74:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b76:	2101      	movs	r1, #1
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff ff05 	bl	8009988 <dir_next>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0d7      	beq.n	8009b38 <dir_alloc+0x26>
 8009b88:	e000      	b.n	8009b8c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009b8a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d101      	bne.n	8009b96 <dir_alloc+0x84>
 8009b92:	2307      	movs	r3, #7
 8009b94:	75fb      	strb	r3, [r7, #23]
	return res;
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	331a      	adds	r3, #26
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7ff f840 	bl	8008c34 <ld_word>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d109      	bne.n	8009bd4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	3314      	adds	r3, #20
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7ff f835 	bl	8008c34 <ld_word>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	041b      	lsls	r3, r3, #16
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	60f8      	str	r0, [r7, #12]
 8009be6:	60b9      	str	r1, [r7, #8]
 8009be8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	331a      	adds	r3, #26
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	b292      	uxth	r2, r2
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff f859 	bl	8008cac <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d109      	bne.n	8009c16 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f103 0214 	add.w	r2, r3, #20
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	0c1b      	lsrs	r3, r3, #16
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4610      	mov	r0, r2
 8009c12:	f7ff f84b 	bl	8008cac <st_word>
	}
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b086      	sub	sp, #24
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff fe2f 	bl	8009892 <dir_sdi>
 8009c34:	4603      	mov	r3, r0
 8009c36:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <dir_find+0x24>
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
 8009c40:	e03e      	b.n	8009cc0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6938      	ldr	r0, [r7, #16]
 8009c4a:	f7ff faa5 	bl	8009198 <move_window>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d12f      	bne.n	8009cb8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d102      	bne.n	8009c6c <dir_find+0x4e>
 8009c66:	2304      	movs	r3, #4
 8009c68:	75fb      	strb	r3, [r7, #23]
 8009c6a:	e028      	b.n	8009cbe <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	330b      	adds	r3, #11
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	330b      	adds	r3, #11
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	f003 0308 	and.w	r3, r3, #8
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10a      	bne.n	8009ca4 <dir_find+0x86>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a18      	ldr	r0, [r3, #32]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3324      	adds	r3, #36	@ 0x24
 8009c96:	220b      	movs	r2, #11
 8009c98:	4619      	mov	r1, r3
 8009c9a:	f7ff f88a 	bl	8008db2 <mem_cmp>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7ff fe6e 	bl	8009988 <dir_next>
 8009cac:	4603      	mov	r3, r0
 8009cae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0c5      	beq.n	8009c42 <dir_find+0x24>
 8009cb6:	e002      	b.n	8009cbe <dir_find+0xa0>
		if (res != FR_OK) break;
 8009cb8:	bf00      	nop
 8009cba:	e000      	b.n	8009cbe <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009cbc:	bf00      	nop

	return res;
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff ff1a 	bl	8009b12 <dir_alloc>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d11c      	bne.n	8009d22 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	4619      	mov	r1, r3
 8009cee:	68b8      	ldr	r0, [r7, #8]
 8009cf0:	f7ff fa52 	bl	8009198 <move_window>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d111      	bne.n	8009d22 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	2220      	movs	r2, #32
 8009d04:	2100      	movs	r1, #0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7ff f838 	bl	8008d7c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a18      	ldr	r0, [r3, #32]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3324      	adds	r3, #36	@ 0x24
 8009d14:	220b      	movs	r2, #11
 8009d16:	4619      	mov	r1, r3
 8009d18:	f7ff f80f 	bl	8008d3a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3324      	adds	r3, #36	@ 0x24
 8009d40:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009d42:	220b      	movs	r2, #11
 8009d44:	2120      	movs	r1, #32
 8009d46:	68b8      	ldr	r0, [r7, #8]
 8009d48:	f7ff f818 	bl	8008d7c <mem_set>
	si = i = 0; ni = 8;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	613b      	str	r3, [r7, #16]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	2308      	movs	r3, #8
 8009d56:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	1c5a      	adds	r2, r3, #1
 8009d5c:	61fa      	str	r2, [r7, #28]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	4413      	add	r3, r2
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d66:	7efb      	ldrb	r3, [r7, #27]
 8009d68:	2b20      	cmp	r3, #32
 8009d6a:	d94e      	bls.n	8009e0a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009d6c:	7efb      	ldrb	r3, [r7, #27]
 8009d6e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d70:	d006      	beq.n	8009d80 <create_name+0x54>
 8009d72:	7efb      	ldrb	r3, [r7, #27]
 8009d74:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d76:	d110      	bne.n	8009d9a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d78:	e002      	b.n	8009d80 <create_name+0x54>
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	61fb      	str	r3, [r7, #28]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	4413      	add	r3, r2
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d8a:	d0f6      	beq.n	8009d7a <create_name+0x4e>
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d96:	d0f0      	beq.n	8009d7a <create_name+0x4e>
			break;
 8009d98:	e038      	b.n	8009e0c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009d9a:	7efb      	ldrb	r3, [r7, #27]
 8009d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d9e:	d003      	beq.n	8009da8 <create_name+0x7c>
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d30c      	bcc.n	8009dc2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b0b      	cmp	r3, #11
 8009dac:	d002      	beq.n	8009db4 <create_name+0x88>
 8009dae:	7efb      	ldrb	r3, [r7, #27]
 8009db0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009db2:	d001      	beq.n	8009db8 <create_name+0x8c>
 8009db4:	2306      	movs	r3, #6
 8009db6:	e044      	b.n	8009e42 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009db8:	2308      	movs	r3, #8
 8009dba:	613b      	str	r3, [r7, #16]
 8009dbc:	230b      	movs	r3, #11
 8009dbe:	617b      	str	r3, [r7, #20]
			continue;
 8009dc0:	e022      	b.n	8009e08 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009dc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	da04      	bge.n	8009dd4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009dca:	7efb      	ldrb	r3, [r7, #27]
 8009dcc:	3b80      	subs	r3, #128	@ 0x80
 8009dce:	4a1f      	ldr	r2, [pc, #124]	@ (8009e4c <create_name+0x120>)
 8009dd0:	5cd3      	ldrb	r3, [r2, r3]
 8009dd2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009dd4:	7efb      	ldrb	r3, [r7, #27]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	481d      	ldr	r0, [pc, #116]	@ (8009e50 <create_name+0x124>)
 8009dda:	f7ff f811 	bl	8008e00 <chk_chr>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <create_name+0xbc>
 8009de4:	2306      	movs	r3, #6
 8009de6:	e02c      	b.n	8009e42 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009de8:	7efb      	ldrb	r3, [r7, #27]
 8009dea:	2b60      	cmp	r3, #96	@ 0x60
 8009dec:	d905      	bls.n	8009dfa <create_name+0xce>
 8009dee:	7efb      	ldrb	r3, [r7, #27]
 8009df0:	2b7a      	cmp	r3, #122	@ 0x7a
 8009df2:	d802      	bhi.n	8009dfa <create_name+0xce>
 8009df4:	7efb      	ldrb	r3, [r7, #27]
 8009df6:	3b20      	subs	r3, #32
 8009df8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	613a      	str	r2, [r7, #16]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	4413      	add	r3, r2
 8009e04:	7efa      	ldrb	r2, [r7, #27]
 8009e06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009e08:	e7a6      	b.n	8009d58 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	441a      	add	r2, r3
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <create_name+0xf4>
 8009e1c:	2306      	movs	r3, #6
 8009e1e:	e010      	b.n	8009e42 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	2be5      	cmp	r3, #229	@ 0xe5
 8009e26:	d102      	bne.n	8009e2e <create_name+0x102>
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2205      	movs	r2, #5
 8009e2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e2e:	7efb      	ldrb	r3, [r7, #27]
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	d801      	bhi.n	8009e38 <create_name+0x10c>
 8009e34:	2204      	movs	r2, #4
 8009e36:	e000      	b.n	8009e3a <create_name+0x10e>
 8009e38:	2200      	movs	r2, #0
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	330b      	adds	r3, #11
 8009e3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009e40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	0800fb84 	.word	0x0800fb84
 8009e50:	0800dffc 	.word	0x0800dffc

08009e54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009e68:	e002      	b.n	8009e70 <follow_path+0x1c>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e76:	d0f8      	beq.n	8009e6a <follow_path+0x16>
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e7e:	d0f4      	beq.n	8009e6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	2200      	movs	r2, #0
 8009e84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	2b1f      	cmp	r3, #31
 8009e8c:	d80a      	bhi.n	8009ea4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2280      	movs	r2, #128	@ 0x80
 8009e92:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009e96:	2100      	movs	r1, #0
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff fcfa 	bl	8009892 <dir_sdi>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	75fb      	strb	r3, [r7, #23]
 8009ea2:	e043      	b.n	8009f2c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ea4:	463b      	mov	r3, r7
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f7ff ff3f 	bl	8009d2c <create_name>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d134      	bne.n	8009f22 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff feb0 	bl	8009c1e <dir_find>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009ec8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009eca:	7dfb      	ldrb	r3, [r7, #23]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00a      	beq.n	8009ee6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009ed0:	7dfb      	ldrb	r3, [r7, #23]
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	d127      	bne.n	8009f26 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ed6:	7afb      	ldrb	r3, [r7, #11]
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d122      	bne.n	8009f26 <follow_path+0xd2>
 8009ee0:	2305      	movs	r3, #5
 8009ee2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ee4:	e01f      	b.n	8009f26 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ee6:	7afb      	ldrb	r3, [r7, #11]
 8009ee8:	f003 0304 	and.w	r3, r3, #4
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d11c      	bne.n	8009f2a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	799b      	ldrb	r3, [r3, #6]
 8009ef4:	f003 0310 	and.w	r3, r3, #16
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009efc:	2305      	movs	r3, #5
 8009efe:	75fb      	strb	r3, [r7, #23]
 8009f00:	e014      	b.n	8009f2c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f10:	4413      	add	r3, r2
 8009f12:	4619      	mov	r1, r3
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff fe43 	bl	8009ba0 <ld_clust>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f20:	e7c0      	b.n	8009ea4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009f22:	bf00      	nop
 8009f24:	e002      	b.n	8009f2c <follow_path+0xd8>
				break;
 8009f26:	bf00      	nop
 8009f28:	e000      	b.n	8009f2c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f2a:	bf00      	nop
			}
		}
	}

	return res;
 8009f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b087      	sub	sp, #28
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d031      	beq.n	8009fb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	617b      	str	r3, [r7, #20]
 8009f52:	e002      	b.n	8009f5a <get_ldnumber+0x24>
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	3301      	adds	r3, #1
 8009f58:	617b      	str	r3, [r7, #20]
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b20      	cmp	r3, #32
 8009f60:	d903      	bls.n	8009f6a <get_ldnumber+0x34>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	2b3a      	cmp	r3, #58	@ 0x3a
 8009f68:	d1f4      	bne.n	8009f54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009f70:	d11c      	bne.n	8009fac <get_ldnumber+0x76>
			tp = *path;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	60fa      	str	r2, [r7, #12]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	3b30      	subs	r3, #48	@ 0x30
 8009f82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2b09      	cmp	r3, #9
 8009f88:	d80e      	bhi.n	8009fa8 <get_ldnumber+0x72>
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d10a      	bne.n	8009fa8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d107      	bne.n	8009fa8 <get_ldnumber+0x72>
					vol = (int)i;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	617b      	str	r3, [r7, #20]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	e002      	b.n	8009fb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009fac:	2300      	movs	r3, #0
 8009fae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009fb0:	693b      	ldr	r3, [r7, #16]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	371c      	adds	r7, #28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
	...

08009fc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	70da      	strb	r2, [r3, #3]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff f8dc 	bl	8009198 <move_window>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <check_fs+0x2a>
 8009fe6:	2304      	movs	r3, #4
 8009fe8:	e038      	b.n	800a05c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3330      	adds	r3, #48	@ 0x30
 8009fee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe fe1e 	bl	8008c34 <ld_word>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a000:	429a      	cmp	r2, r3
 800a002:	d001      	beq.n	800a008 <check_fs+0x48>
 800a004:	2303      	movs	r3, #3
 800a006:	e029      	b.n	800a05c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a00e:	2be9      	cmp	r3, #233	@ 0xe9
 800a010:	d009      	beq.n	800a026 <check_fs+0x66>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a018:	2beb      	cmp	r3, #235	@ 0xeb
 800a01a:	d11e      	bne.n	800a05a <check_fs+0x9a>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a022:	2b90      	cmp	r3, #144	@ 0x90
 800a024:	d119      	bne.n	800a05a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3330      	adds	r3, #48	@ 0x30
 800a02a:	3336      	adds	r3, #54	@ 0x36
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe fe1a 	bl	8008c66 <ld_dword>
 800a032:	4603      	mov	r3, r0
 800a034:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a038:	4a0a      	ldr	r2, [pc, #40]	@ (800a064 <check_fs+0xa4>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d101      	bne.n	800a042 <check_fs+0x82>
 800a03e:	2300      	movs	r3, #0
 800a040:	e00c      	b.n	800a05c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3330      	adds	r3, #48	@ 0x30
 800a046:	3352      	adds	r3, #82	@ 0x52
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fe fe0c 	bl	8008c66 <ld_dword>
 800a04e:	4603      	mov	r3, r0
 800a050:	4a05      	ldr	r2, [pc, #20]	@ (800a068 <check_fs+0xa8>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d101      	bne.n	800a05a <check_fs+0x9a>
 800a056:	2300      	movs	r3, #0
 800a058:	e000      	b.n	800a05c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a05a:	2302      	movs	r3, #2
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	00544146 	.word	0x00544146
 800a068:	33544146 	.word	0x33544146

0800a06c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b096      	sub	sp, #88	@ 0x58
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	4613      	mov	r3, r2
 800a078:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2200      	movs	r2, #0
 800a07e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7ff ff58 	bl	8009f36 <get_ldnumber>
 800a086:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	da01      	bge.n	800a092 <find_volume+0x26>
 800a08e:	230b      	movs	r3, #11
 800a090:	e22d      	b.n	800a4ee <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a092:	4aa1      	ldr	r2, [pc, #644]	@ (800a318 <find_volume+0x2ac>)
 800a094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a09a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <find_volume+0x3a>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	e223      	b.n	800a4ee <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	f023 0301 	bic.w	r3, r3, #1
 800a0b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d01a      	beq.n	800a0f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	785b      	ldrb	r3, [r3, #1]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fe fd17 	bl	8008af4 <disk_status>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a0cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0d0:	f003 0301 	and.w	r3, r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10c      	bne.n	800a0f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d007      	beq.n	800a0ee <find_volume+0x82>
 800a0de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0e2:	f003 0304 	and.w	r3, r3, #4
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a0ea:	230a      	movs	r3, #10
 800a0ec:	e1ff      	b.n	800a4ee <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e1fd      	b.n	800a4ee <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0fa:	b2da      	uxtb	r2, r3
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a102:	785b      	ldrb	r3, [r3, #1]
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe fd0f 	bl	8008b28 <disk_initialize>
 800a10a:	4603      	mov	r3, r0
 800a10c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a110:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a114:	f003 0301 	and.w	r3, r3, #1
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a11c:	2303      	movs	r3, #3
 800a11e:	e1e6      	b.n	800a4ee <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d007      	beq.n	800a136 <find_volume+0xca>
 800a126:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a12a:	f003 0304 	and.w	r3, r3, #4
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a132:	230a      	movs	r3, #10
 800a134:	e1db      	b.n	800a4ee <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a13a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a13c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a13e:	f7ff ff3f 	bl	8009fc0 <check_fs>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a148:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d149      	bne.n	800a1e4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a150:	2300      	movs	r3, #0
 800a152:	643b      	str	r3, [r7, #64]	@ 0x40
 800a154:	e01e      	b.n	800a194 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a158:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a15c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a164:	4413      	add	r3, r2
 800a166:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16a:	3304      	adds	r3, #4
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d006      	beq.n	800a180 <find_volume+0x114>
 800a172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a174:	3308      	adds	r3, #8
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fd75 	bl	8008c66 <ld_dword>
 800a17c:	4602      	mov	r2, r0
 800a17e:	e000      	b.n	800a182 <find_volume+0x116>
 800a180:	2200      	movs	r2, #0
 800a182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	3358      	adds	r3, #88	@ 0x58
 800a188:	443b      	add	r3, r7
 800a18a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a18e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a190:	3301      	adds	r3, #1
 800a192:	643b      	str	r3, [r7, #64]	@ 0x40
 800a194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a196:	2b03      	cmp	r3, #3
 800a198:	d9dd      	bls.n	800a156 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a19a:	2300      	movs	r3, #0
 800a19c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a19e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <find_volume+0x13e>
 800a1a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	3358      	adds	r3, #88	@ 0x58
 800a1b0:	443b      	add	r3, r7
 800a1b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a1b6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a1b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <find_volume+0x15e>
 800a1be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a1c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1c2:	f7ff fefd 	bl	8009fc0 <check_fs>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	e000      	b.n	800a1cc <find_volume+0x160>
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a1d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d905      	bls.n	800a1e4 <find_volume+0x178>
 800a1d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1da:	3301      	adds	r3, #1
 800a1dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d9e2      	bls.n	800a1aa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a1e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	d101      	bne.n	800a1f0 <find_volume+0x184>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e17e      	b.n	800a4ee <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a1f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d901      	bls.n	800a1fc <find_volume+0x190>
 800a1f8:	230d      	movs	r3, #13
 800a1fa:	e178      	b.n	800a4ee <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fe:	3330      	adds	r3, #48	@ 0x30
 800a200:	330b      	adds	r3, #11
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fd16 	bl	8008c34 <ld_word>
 800a208:	4603      	mov	r3, r0
 800a20a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a20e:	d001      	beq.n	800a214 <find_volume+0x1a8>
 800a210:	230d      	movs	r3, #13
 800a212:	e16c      	b.n	800a4ee <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a216:	3330      	adds	r3, #48	@ 0x30
 800a218:	3316      	adds	r3, #22
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe fd0a 	bl	8008c34 <ld_word>
 800a220:	4603      	mov	r3, r0
 800a222:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <find_volume+0x1cc>
 800a22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22c:	3330      	adds	r3, #48	@ 0x30
 800a22e:	3324      	adds	r3, #36	@ 0x24
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe fd18 	bl	8008c66 <ld_dword>
 800a236:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a23c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a240:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24a:	789b      	ldrb	r3, [r3, #2]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d005      	beq.n	800a25c <find_volume+0x1f0>
 800a250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a252:	789b      	ldrb	r3, [r3, #2]
 800a254:	2b02      	cmp	r3, #2
 800a256:	d001      	beq.n	800a25c <find_volume+0x1f0>
 800a258:	230d      	movs	r3, #13
 800a25a:	e148      	b.n	800a4ee <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25e:	789b      	ldrb	r3, [r3, #2]
 800a260:	461a      	mov	r2, r3
 800a262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a264:	fb02 f303 	mul.w	r3, r2, r3
 800a268:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a270:	461a      	mov	r2, r3
 800a272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a274:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a278:	895b      	ldrh	r3, [r3, #10]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d008      	beq.n	800a290 <find_volume+0x224>
 800a27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a280:	895b      	ldrh	r3, [r3, #10]
 800a282:	461a      	mov	r2, r3
 800a284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a286:	895b      	ldrh	r3, [r3, #10]
 800a288:	3b01      	subs	r3, #1
 800a28a:	4013      	ands	r3, r2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d001      	beq.n	800a294 <find_volume+0x228>
 800a290:	230d      	movs	r3, #13
 800a292:	e12c      	b.n	800a4ee <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a296:	3330      	adds	r3, #48	@ 0x30
 800a298:	3311      	adds	r3, #17
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe fcca 	bl	8008c34 <ld_word>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2aa:	891b      	ldrh	r3, [r3, #8]
 800a2ac:	f003 030f 	and.w	r3, r3, #15
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <find_volume+0x24e>
 800a2b6:	230d      	movs	r3, #13
 800a2b8:	e119      	b.n	800a4ee <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	3330      	adds	r3, #48	@ 0x30
 800a2be:	3313      	adds	r3, #19
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe fcb7 	bl	8008c34 <ld_word>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a2ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d106      	bne.n	800a2de <find_volume+0x272>
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d2:	3330      	adds	r3, #48	@ 0x30
 800a2d4:	3320      	adds	r3, #32
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe fcc5 	bl	8008c66 <ld_dword>
 800a2dc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e0:	3330      	adds	r3, #48	@ 0x30
 800a2e2:	330e      	adds	r3, #14
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fe fca5 	bl	8008c34 <ld_word>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a2ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <find_volume+0x28c>
 800a2f4:	230d      	movs	r3, #13
 800a2f6:	e0fa      	b.n	800a4ee <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a2f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a2fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2fc:	4413      	add	r3, r2
 800a2fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a300:	8912      	ldrh	r2, [r2, #8]
 800a302:	0912      	lsrs	r2, r2, #4
 800a304:	b292      	uxth	r2, r2
 800a306:	4413      	add	r3, r2
 800a308:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a30a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30e:	429a      	cmp	r2, r3
 800a310:	d204      	bcs.n	800a31c <find_volume+0x2b0>
 800a312:	230d      	movs	r3, #13
 800a314:	e0eb      	b.n	800a4ee <find_volume+0x482>
 800a316:	bf00      	nop
 800a318:	2000091c 	.word	0x2000091c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a31c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a324:	8952      	ldrh	r2, [r2, #10]
 800a326:	fbb3 f3f2 	udiv	r3, r3, r2
 800a32a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <find_volume+0x2ca>
 800a332:	230d      	movs	r3, #13
 800a334:	e0db      	b.n	800a4ee <find_volume+0x482>
		fmt = FS_FAT32;
 800a336:	2303      	movs	r3, #3
 800a338:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a342:	4293      	cmp	r3, r2
 800a344:	d802      	bhi.n	800a34c <find_volume+0x2e0>
 800a346:	2302      	movs	r3, #2
 800a348:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a352:	4293      	cmp	r3, r2
 800a354:	d802      	bhi.n	800a35c <find_volume+0x2f0>
 800a356:	2301      	movs	r3, #1
 800a358:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35e:	1c9a      	adds	r2, r3, #2
 800a360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a362:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a366:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a368:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a36a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a36c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a36e:	441a      	add	r2, r3
 800a370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a372:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a374:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a378:	441a      	add	r2, r3
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a37e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a382:	2b03      	cmp	r3, #3
 800a384:	d11e      	bne.n	800a3c4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	3330      	adds	r3, #48	@ 0x30
 800a38a:	332a      	adds	r3, #42	@ 0x2a
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe fc51 	bl	8008c34 <ld_word>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <find_volume+0x330>
 800a398:	230d      	movs	r3, #13
 800a39a:	e0a8      	b.n	800a4ee <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39e:	891b      	ldrh	r3, [r3, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <find_volume+0x33c>
 800a3a4:	230d      	movs	r3, #13
 800a3a6:	e0a2      	b.n	800a4ee <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3aa:	3330      	adds	r3, #48	@ 0x30
 800a3ac:	332c      	adds	r3, #44	@ 0x2c
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fc59 	bl	8008c66 <ld_dword>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3c2:	e01f      	b.n	800a404 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c6:	891b      	ldrh	r3, [r3, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <find_volume+0x364>
 800a3cc:	230d      	movs	r3, #13
 800a3ce:	e08e      	b.n	800a4ee <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	6a1a      	ldr	r2, [r3, #32]
 800a3d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3d6:	441a      	add	r2, r3
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3da:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a3dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d103      	bne.n	800a3ec <find_volume+0x380>
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	e00a      	b.n	800a402 <find_volume+0x396>
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ee:	695a      	ldr	r2, [r3, #20]
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	4413      	add	r3, r2
 800a3f6:	085a      	lsrs	r2, r3, #1
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a402:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a40a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a40e:	0a5b      	lsrs	r3, r3, #9
 800a410:	429a      	cmp	r2, r3
 800a412:	d201      	bcs.n	800a418 <find_volume+0x3ac>
 800a414:	230d      	movs	r3, #13
 800a416:	e06a      	b.n	800a4ee <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	f04f 32ff 	mov.w	r2, #4294967295
 800a41e:	611a      	str	r2, [r3, #16]
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	691a      	ldr	r2, [r3, #16]
 800a424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a426:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42a:	2280      	movs	r2, #128	@ 0x80
 800a42c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a42e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a432:	2b03      	cmp	r3, #3
 800a434:	d149      	bne.n	800a4ca <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a438:	3330      	adds	r3, #48	@ 0x30
 800a43a:	3330      	adds	r3, #48	@ 0x30
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe fbf9 	bl	8008c34 <ld_word>
 800a442:	4603      	mov	r3, r0
 800a444:	2b01      	cmp	r3, #1
 800a446:	d140      	bne.n	800a4ca <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a44a:	3301      	adds	r3, #1
 800a44c:	4619      	mov	r1, r3
 800a44e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a450:	f7fe fea2 	bl	8009198 <move_window>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d137      	bne.n	800a4ca <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45c:	2200      	movs	r2, #0
 800a45e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a462:	3330      	adds	r3, #48	@ 0x30
 800a464:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fe fbe3 	bl	8008c34 <ld_word>
 800a46e:	4603      	mov	r3, r0
 800a470:	461a      	mov	r2, r3
 800a472:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a476:	429a      	cmp	r2, r3
 800a478:	d127      	bne.n	800a4ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47c:	3330      	adds	r3, #48	@ 0x30
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe fbf1 	bl	8008c66 <ld_dword>
 800a484:	4603      	mov	r3, r0
 800a486:	4a1c      	ldr	r2, [pc, #112]	@ (800a4f8 <find_volume+0x48c>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d11e      	bne.n	800a4ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	3330      	adds	r3, #48	@ 0x30
 800a490:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a494:	4618      	mov	r0, r3
 800a496:	f7fe fbe6 	bl	8008c66 <ld_dword>
 800a49a:	4603      	mov	r3, r0
 800a49c:	4a17      	ldr	r2, [pc, #92]	@ (800a4fc <find_volume+0x490>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d113      	bne.n	800a4ca <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a4:	3330      	adds	r3, #48	@ 0x30
 800a4a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe fbdb 	bl	8008c66 <ld_dword>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b8:	3330      	adds	r3, #48	@ 0x30
 800a4ba:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fbd1 	bl	8008c66 <ld_dword>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4cc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a4d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a500 <find_volume+0x494>)
 800a4d4:	881b      	ldrh	r3, [r3, #0]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	4b09      	ldr	r3, [pc, #36]	@ (800a500 <find_volume+0x494>)
 800a4dc:	801a      	strh	r2, [r3, #0]
 800a4de:	4b08      	ldr	r3, [pc, #32]	@ (800a500 <find_volume+0x494>)
 800a4e0:	881a      	ldrh	r2, [r3, #0]
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a4e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a4e8:	f7fe fdee 	bl	80090c8 <clear_lock>
#endif
	return FR_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3758      	adds	r7, #88	@ 0x58
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	41615252 	.word	0x41615252
 800a4fc:	61417272 	.word	0x61417272
 800a500:	20000920 	.word	0x20000920

0800a504 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a50e:	2309      	movs	r3, #9
 800a510:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d01c      	beq.n	800a552 <validate+0x4e>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d018      	beq.n	800a552 <validate+0x4e>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d013      	beq.n	800a552 <validate+0x4e>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	889a      	ldrh	r2, [r3, #4]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	88db      	ldrh	r3, [r3, #6]
 800a534:	429a      	cmp	r2, r3
 800a536:	d10c      	bne.n	800a552 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	785b      	ldrb	r3, [r3, #1]
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fad8 	bl	8008af4 <disk_status>
 800a544:	4603      	mov	r3, r0
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <validate+0x4e>
			res = FR_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d102      	bne.n	800a55e <validate+0x5a>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	e000      	b.n	800a560 <validate+0x5c>
 800a55e:	2300      	movs	r3, #0
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	6013      	str	r3, [r2, #0]
	return res;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	4613      	mov	r3, r2
 800a57c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a582:	f107 0310 	add.w	r3, r7, #16
 800a586:	4618      	mov	r0, r3
 800a588:	f7ff fcd5 	bl	8009f36 <get_ldnumber>
 800a58c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	2b00      	cmp	r3, #0
 800a592:	da01      	bge.n	800a598 <f_mount+0x28>
 800a594:	230b      	movs	r3, #11
 800a596:	e02b      	b.n	800a5f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a598:	4a17      	ldr	r2, [pc, #92]	@ (800a5f8 <f_mount+0x88>)
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d005      	beq.n	800a5b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a5a8:	69b8      	ldr	r0, [r7, #24]
 800a5aa:	f7fe fd8d 	bl	80090c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d002      	beq.n	800a5c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	490d      	ldr	r1, [pc, #52]	@ (800a5f8 <f_mount+0x88>)
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <f_mount+0x66>
 800a5d0:	79fb      	ldrb	r3, [r7, #7]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d001      	beq.n	800a5da <f_mount+0x6a>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e00a      	b.n	800a5f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a5da:	f107 010c 	add.w	r1, r7, #12
 800a5de:	f107 0308 	add.w	r3, r7, #8
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7ff fd41 	bl	800a06c <find_volume>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3720      	adds	r7, #32
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	2000091c 	.word	0x2000091c

0800a5fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b098      	sub	sp, #96	@ 0x60
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	4613      	mov	r3, r2
 800a608:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <f_open+0x18>
 800a610:	2309      	movs	r3, #9
 800a612:	e1a9      	b.n	800a968 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a614:	79fb      	ldrb	r3, [r7, #7]
 800a616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a61a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a61c:	79fa      	ldrb	r2, [r7, #7]
 800a61e:	f107 0110 	add.w	r1, r7, #16
 800a622:	f107 0308 	add.w	r3, r7, #8
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff fd20 	bl	800a06c <find_volume>
 800a62c:	4603      	mov	r3, r0
 800a62e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a632:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a636:	2b00      	cmp	r3, #0
 800a638:	f040 818d 	bne.w	800a956 <f_open+0x35a>
		dj.obj.fs = fs;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	f107 0314 	add.w	r3, r7, #20
 800a646:	4611      	mov	r1, r2
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff fc03 	bl	8009e54 <follow_path>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a654:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d118      	bne.n	800a68e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a65c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a660:	b25b      	sxtb	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	da03      	bge.n	800a66e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a666:	2306      	movs	r3, #6
 800a668:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a66c:	e00f      	b.n	800a68e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	2b01      	cmp	r3, #1
 800a672:	bf8c      	ite	hi
 800a674:	2301      	movhi	r3, #1
 800a676:	2300      	movls	r3, #0
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	461a      	mov	r2, r3
 800a67c:	f107 0314 	add.w	r3, r7, #20
 800a680:	4611      	mov	r1, r2
 800a682:	4618      	mov	r0, r3
 800a684:	f7fe fbd8 	bl	8008e38 <chk_lock>
 800a688:	4603      	mov	r3, r0
 800a68a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a68e:	79fb      	ldrb	r3, [r7, #7]
 800a690:	f003 031c 	and.w	r3, r3, #28
 800a694:	2b00      	cmp	r3, #0
 800a696:	d07f      	beq.n	800a798 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a698:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d017      	beq.n	800a6d0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a6a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6a4:	2b04      	cmp	r3, #4
 800a6a6:	d10e      	bne.n	800a6c6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a6a8:	f7fe fc22 	bl	8008ef0 <enq_lock>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d006      	beq.n	800a6c0 <f_open+0xc4>
 800a6b2:	f107 0314 	add.w	r3, r7, #20
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7ff fb06 	bl	8009cc8 <dir_register>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	e000      	b.n	800a6c2 <f_open+0xc6>
 800a6c0:	2312      	movs	r3, #18
 800a6c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a6c6:	79fb      	ldrb	r3, [r7, #7]
 800a6c8:	f043 0308 	orr.w	r3, r3, #8
 800a6cc:	71fb      	strb	r3, [r7, #7]
 800a6ce:	e010      	b.n	800a6f2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a6d0:	7ebb      	ldrb	r3, [r7, #26]
 800a6d2:	f003 0311 	and.w	r3, r3, #17
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <f_open+0xe6>
					res = FR_DENIED;
 800a6da:	2307      	movs	r3, #7
 800a6dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a6e0:	e007      	b.n	800a6f2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a6e2:	79fb      	ldrb	r3, [r7, #7]
 800a6e4:	f003 0304 	and.w	r3, r3, #4
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <f_open+0xf6>
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d168      	bne.n	800a7cc <f_open+0x1d0>
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	f003 0308 	and.w	r3, r3, #8
 800a700:	2b00      	cmp	r3, #0
 800a702:	d063      	beq.n	800a7cc <f_open+0x1d0>
				dw = GET_FATTIME();
 800a704:	f7fe f8f2 	bl	80088ec <get_fattime>
 800a708:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a70a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a70c:	330e      	adds	r3, #14
 800a70e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a710:	4618      	mov	r0, r3
 800a712:	f7fe fae6 	bl	8008ce2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a718:	3316      	adds	r3, #22
 800a71a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fe fae0 	bl	8008ce2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a724:	330b      	adds	r3, #11
 800a726:	2220      	movs	r2, #32
 800a728:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff fa35 	bl	8009ba0 <ld_clust>
 800a736:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a73c:	2200      	movs	r2, #0
 800a73e:	4618      	mov	r0, r3
 800a740:	f7ff fa4d 	bl	8009bde <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a746:	331c      	adds	r3, #28
 800a748:	2100      	movs	r1, #0
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fac9 	bl	8008ce2 <st_dword>
					fs->wflag = 1;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	2201      	movs	r2, #1
 800a754:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d037      	beq.n	800a7cc <f_open+0x1d0>
						dw = fs->winsect;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a760:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a762:	f107 0314 	add.w	r3, r7, #20
 800a766:	2200      	movs	r2, #0
 800a768:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe ff60 	bl	8009630 <remove_chain>
 800a770:	4603      	mov	r3, r0
 800a772:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a776:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d126      	bne.n	800a7cc <f_open+0x1d0>
							res = move_window(fs, dw);
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fd08 	bl	8009198 <move_window>
 800a788:	4603      	mov	r3, r0
 800a78a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a792:	3a01      	subs	r2, #1
 800a794:	60da      	str	r2, [r3, #12]
 800a796:	e019      	b.n	800a7cc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a798:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d115      	bne.n	800a7cc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a7a0:	7ebb      	ldrb	r3, [r7, #26]
 800a7a2:	f003 0310 	and.w	r3, r3, #16
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d003      	beq.n	800a7b2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a7aa:	2304      	movs	r3, #4
 800a7ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a7b0:	e00c      	b.n	800a7cc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	f003 0302 	and.w	r3, r3, #2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d007      	beq.n	800a7cc <f_open+0x1d0>
 800a7bc:	7ebb      	ldrb	r3, [r7, #26]
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <f_open+0x1d0>
						res = FR_DENIED;
 800a7c6:	2307      	movs	r3, #7
 800a7c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a7cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d126      	bne.n	800a822 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	f003 0308 	and.w	r3, r3, #8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d003      	beq.n	800a7e6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a7ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	bf8c      	ite	hi
 800a7fa:	2301      	movhi	r3, #1
 800a7fc:	2300      	movls	r3, #0
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	461a      	mov	r2, r3
 800a802:	f107 0314 	add.w	r3, r7, #20
 800a806:	4611      	mov	r1, r2
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fe fb93 	bl	8008f34 <inc_lock>
 800a80e:	4602      	mov	r2, r0
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d102      	bne.n	800a822 <f_open+0x226>
 800a81c:	2302      	movs	r3, #2
 800a81e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a822:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a826:	2b00      	cmp	r3, #0
 800a828:	f040 8095 	bne.w	800a956 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff f9b4 	bl	8009ba0 <ld_clust>
 800a838:	4602      	mov	r2, r0
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a83e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a840:	331c      	adds	r3, #28
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe fa0f 	bl	8008c66 <ld_dword>
 800a848:	4602      	mov	r2, r0
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	88da      	ldrh	r2, [r3, #6]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	79fa      	ldrb	r2, [r7, #7]
 800a866:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3330      	adds	r3, #48	@ 0x30
 800a87e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a882:	2100      	movs	r1, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe fa79 	bl	8008d7c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	f003 0320 	and.w	r3, r3, #32
 800a890:	2b00      	cmp	r3, #0
 800a892:	d060      	beq.n	800a956 <f_open+0x35a>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d05c      	beq.n	800a956 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	68da      	ldr	r2, [r3, #12]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	895b      	ldrh	r3, [r3, #10]
 800a8a8:	025b      	lsls	r3, r3, #9
 800a8aa:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8b8:	e016      	b.n	800a8e8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fe fd25 	bl	800930e <get_fat>
 800a8c4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a8c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d802      	bhi.n	800a8d2 <f_open+0x2d6>
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a8d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d8:	d102      	bne.n	800a8e0 <f_open+0x2e4>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d103      	bne.n	800a8f8 <f_open+0x2fc>
 800a8f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d8e0      	bhi.n	800a8ba <f_open+0x2be>
				}
				fp->clust = clst;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a8fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a902:	2b00      	cmp	r3, #0
 800a904:	d127      	bne.n	800a956 <f_open+0x35a>
 800a906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d022      	beq.n	800a956 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe fcdb 	bl	80092d0 <clust2sect>
 800a91a:	6478      	str	r0, [r7, #68]	@ 0x44
 800a91c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d103      	bne.n	800a92a <f_open+0x32e>
						res = FR_INT_ERR;
 800a922:	2302      	movs	r3, #2
 800a924:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a928:	e015      	b.n	800a956 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a92a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a92c:	0a5a      	lsrs	r2, r3, #9
 800a92e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a930:	441a      	add	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	7858      	ldrb	r0, [r3, #1]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6a1a      	ldr	r2, [r3, #32]
 800a944:	2301      	movs	r3, #1
 800a946:	f7fe f917 	bl	8008b78 <disk_read>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <f_open+0x35a>
 800a950:	2301      	movs	r3, #1
 800a952:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a956:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <f_open+0x368>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a964:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3760      	adds	r7, #96	@ 0x60
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08c      	sub	sp, #48	@ 0x30
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f107 0210 	add.w	r2, r7, #16
 800a98e:	4611      	mov	r1, r2
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff fdb7 	bl	800a504 <validate>
 800a996:	4603      	mov	r3, r0
 800a998:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a99c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d107      	bne.n	800a9b4 <f_write+0x44>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	7d5b      	ldrb	r3, [r3, #21]
 800a9a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <f_write+0x4a>
 800a9b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9b8:	e14b      	b.n	800ac52 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	7d1b      	ldrb	r3, [r3, #20]
 800a9be:	f003 0302 	and.w	r3, r3, #2
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <f_write+0x5a>
 800a9c6:	2307      	movs	r3, #7
 800a9c8:	e143      	b.n	800ac52 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	699a      	ldr	r2, [r3, #24]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	441a      	add	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	f080 812d 	bcs.w	800ac36 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	43db      	mvns	r3, r3
 800a9e2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a9e4:	e127      	b.n	800ac36 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f040 80e3 	bne.w	800abba <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	0a5b      	lsrs	r3, r3, #9
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	8952      	ldrh	r2, [r2, #10]
 800a9fe:	3a01      	subs	r2, #1
 800aa00:	4013      	ands	r3, r2
 800aa02:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d143      	bne.n	800aa92 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10c      	bne.n	800aa2c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aa18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d11a      	bne.n	800aa54 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2100      	movs	r1, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fe69 	bl	80096fa <create_chain>
 800aa28:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aa2a:	e013      	b.n	800aa54 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d007      	beq.n	800aa44 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7fe fef5 	bl	800982a <clmt_clust>
 800aa40:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aa42:	e007      	b.n	800aa54 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	f7fe fe54 	bl	80096fa <create_chain>
 800aa52:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aa54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 80f2 	beq.w	800ac40 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d104      	bne.n	800aa6c <f_write+0xfc>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2202      	movs	r2, #2
 800aa66:	755a      	strb	r2, [r3, #21]
 800aa68:	2302      	movs	r3, #2
 800aa6a:	e0f2      	b.n	800ac52 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa72:	d104      	bne.n	800aa7e <f_write+0x10e>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2201      	movs	r2, #1
 800aa78:	755a      	strb	r2, [r3, #21]
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e0e9      	b.n	800ac52 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa82:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <f_write+0x122>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa90:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	7d1b      	ldrb	r3, [r3, #20]
 800aa96:	b25b      	sxtb	r3, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	da18      	bge.n	800aace <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	7858      	ldrb	r0, [r3, #1]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6a1a      	ldr	r2, [r3, #32]
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f7fe f884 	bl	8008bb8 <disk_write>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d004      	beq.n	800aac0 <f_write+0x150>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2201      	movs	r2, #1
 800aaba:	755a      	strb	r2, [r3, #21]
 800aabc:	2301      	movs	r3, #1
 800aabe:	e0c8      	b.n	800ac52 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	7d1b      	ldrb	r3, [r3, #20]
 800aac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	4619      	mov	r1, r3
 800aad6:	4610      	mov	r0, r2
 800aad8:	f7fe fbfa 	bl	80092d0 <clust2sect>
 800aadc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <f_write+0x17e>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2202      	movs	r2, #2
 800aae8:	755a      	strb	r2, [r3, #21]
 800aaea:	2302      	movs	r3, #2
 800aaec:	e0b1      	b.n	800ac52 <f_write+0x2e2>
			sect += csect;
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	0a5b      	lsrs	r3, r3, #9
 800aafa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d03c      	beq.n	800ab7c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	4413      	add	r3, r2
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	8952      	ldrh	r2, [r2, #10]
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d905      	bls.n	800ab1c <f_write+0x1ac>
					cc = fs->csize - csect;
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	895b      	ldrh	r3, [r3, #10]
 800ab14:	461a      	mov	r2, r3
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	7858      	ldrb	r0, [r3, #1]
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	69f9      	ldr	r1, [r7, #28]
 800ab26:	f7fe f847 	bl	8008bb8 <disk_write>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d004      	beq.n	800ab3a <f_write+0x1ca>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2201      	movs	r2, #1
 800ab34:	755a      	strb	r2, [r3, #21]
 800ab36:	2301      	movs	r3, #1
 800ab38:	e08b      	b.n	800ac52 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6a1a      	ldr	r2, [r3, #32]
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	6a3a      	ldr	r2, [r7, #32]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d915      	bls.n	800ab74 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6a1a      	ldr	r2, [r3, #32]
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	025b      	lsls	r3, r3, #9
 800ab58:	69fa      	ldr	r2, [r7, #28]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab60:	4619      	mov	r1, r3
 800ab62:	f7fe f8ea 	bl	8008d3a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	7d1b      	ldrb	r3, [r3, #20]
 800ab6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	025b      	lsls	r3, r3, #9
 800ab78:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ab7a:	e03f      	b.n	800abfc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d016      	beq.n	800abb4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	699a      	ldr	r2, [r3, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d210      	bcs.n	800abb4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	7858      	ldrb	r0, [r3, #1]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	f7fd ffea 	bl	8008b78 <disk_read>
 800aba4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d004      	beq.n	800abb4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2201      	movs	r2, #1
 800abae:	755a      	strb	r2, [r3, #21]
 800abb0:	2301      	movs	r3, #1
 800abb2:	e04e      	b.n	800ac52 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800abc6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800abc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d901      	bls.n	800abd4 <f_write+0x264>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	699b      	ldr	r3, [r3, #24]
 800abde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abe2:	4413      	add	r3, r2
 800abe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abe6:	69f9      	ldr	r1, [r7, #28]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fe f8a6 	bl	8008d3a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	7d1b      	ldrb	r3, [r3, #20]
 800abf2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800abfc:	69fa      	ldr	r2, [r7, #28]
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac00:	4413      	add	r3, r2
 800ac02:	61fb      	str	r3, [r7, #28]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	699a      	ldr	r2, [r3, #24]
 800ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0a:	441a      	add	r2, r3
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	619a      	str	r2, [r3, #24]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	68da      	ldr	r2, [r3, #12]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	bf38      	it	cc
 800ac1c:	461a      	movcc	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	60da      	str	r2, [r3, #12]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	441a      	add	r2, r3
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f47f aed4 	bne.w	800a9e6 <f_write+0x76>
 800ac3e:	e000      	b.n	800ac42 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac40:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	7d1b      	ldrb	r3, [r3, #20]
 800ac46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3730      	adds	r7, #48	@ 0x30
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b086      	sub	sp, #24
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f107 0208 	add.w	r2, r7, #8
 800ac68:	4611      	mov	r1, r2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7ff fc4a 	bl	800a504 <validate>
 800ac70:	4603      	mov	r3, r0
 800ac72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d168      	bne.n	800ad4c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	7d1b      	ldrb	r3, [r3, #20]
 800ac7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d062      	beq.n	800ad4c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	7d1b      	ldrb	r3, [r3, #20]
 800ac8a:	b25b      	sxtb	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	da15      	bge.n	800acbc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	7858      	ldrb	r0, [r3, #1]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1a      	ldr	r2, [r3, #32]
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f7fd ff8a 	bl	8008bb8 <disk_write>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <f_sync+0x54>
 800acaa:	2301      	movs	r3, #1
 800acac:	e04f      	b.n	800ad4e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	7d1b      	ldrb	r3, [r3, #20]
 800acb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800acbc:	f7fd fe16 	bl	80088ec <get_fattime>
 800acc0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f7fe fa64 	bl	8009198 <move_window>
 800acd0:	4603      	mov	r3, r0
 800acd2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d138      	bne.n	800ad4c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acde:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	330b      	adds	r3, #11
 800ace4:	781a      	ldrb	r2, [r3, #0]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	330b      	adds	r3, #11
 800acea:	f042 0220 	orr.w	r2, r2, #32
 800acee:	b2d2      	uxtb	r2, r2
 800acf0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6818      	ldr	r0, [r3, #0]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	461a      	mov	r2, r3
 800acfc:	68f9      	ldr	r1, [r7, #12]
 800acfe:	f7fe ff6e 	bl	8009bde <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f103 021c 	add.w	r2, r3, #28
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4610      	mov	r0, r2
 800ad10:	f7fd ffe7 	bl	8008ce2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	3316      	adds	r3, #22
 800ad18:	6939      	ldr	r1, [r7, #16]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fd ffe1 	bl	8008ce2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3312      	adds	r3, #18
 800ad24:	2100      	movs	r1, #0
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fd ffc0 	bl	8008cac <st_word>
					fs->wflag = 1;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fe fa5d 	bl	80091f4 <sync_fs>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	7d1b      	ldrb	r3, [r3, #20]
 800ad42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7ff ff7b 	bl	800ac5a <f_sync>
 800ad64:	4603      	mov	r3, r0
 800ad66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d118      	bne.n	800ada0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f107 0208 	add.w	r2, r7, #8
 800ad74:	4611      	mov	r1, r2
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7ff fbc4 	bl	800a504 <validate>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad80:	7bfb      	ldrb	r3, [r7, #15]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10c      	bne.n	800ada0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe f960 	bl	8009050 <dec_lock>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b090      	sub	sp, #64	@ 0x40
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f107 0208 	add.w	r2, r7, #8
 800adba:	4611      	mov	r1, r2
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff fba1 	bl	800a504 <validate>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800adc8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d103      	bne.n	800add8 <f_lseek+0x2e>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	7d5b      	ldrb	r3, [r3, #21]
 800add4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800add8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <f_lseek+0x3c>
 800ade0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ade4:	e1e6      	b.n	800b1b4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 80d1 	beq.w	800af92 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf6:	d15a      	bne.n	800aeae <f_lseek+0x104>
			tbl = fp->cltbl;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfc:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800adfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae00:	1d1a      	adds	r2, r3, #4
 800ae02:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	2302      	movs	r3, #2
 800ae0a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ae12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d03a      	beq.n	800ae8e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ae18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1a:	613b      	str	r3, [r7, #16]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae22:	3302      	adds	r3, #2
 800ae24:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ae26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fe fa6a 	bl	800930e <get_fat>
 800ae3a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d804      	bhi.n	800ae4c <f_lseek+0xa2>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2202      	movs	r2, #2
 800ae46:	755a      	strb	r2, [r3, #21]
 800ae48:	2302      	movs	r3, #2
 800ae4a:	e1b3      	b.n	800b1b4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	d104      	bne.n	800ae5e <f_lseek+0xb4>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	755a      	strb	r2, [r3, #21]
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e1aa      	b.n	800b1b4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3301      	adds	r3, #1
 800ae62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d0de      	beq.n	800ae26 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ae68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d809      	bhi.n	800ae84 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae72:	1d1a      	adds	r2, r3, #4
 800ae74:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7c:	1d1a      	adds	r2, r3, #4
 800ae7e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d3c4      	bcc.n	800ae18 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae94:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ae96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d803      	bhi.n	800aea6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	e184      	b.n	800b1b0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800aea6:	2311      	movs	r3, #17
 800aea8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800aeac:	e180      	b.n	800b1b0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d902      	bls.n	800aebe <f_lseek+0x114>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 8172 	beq.w	800b1b0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	3b01      	subs	r3, #1
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7fe fca9 	bl	800982a <clmt_clust>
 800aed8:	4602      	mov	r2, r0
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	69db      	ldr	r3, [r3, #28]
 800aee4:	4619      	mov	r1, r3
 800aee6:	4610      	mov	r0, r2
 800aee8:	f7fe f9f2 	bl	80092d0 <clust2sect>
 800aeec:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d104      	bne.n	800aefe <f_lseek+0x154>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	755a      	strb	r2, [r3, #21]
 800aefa:	2302      	movs	r3, #2
 800aefc:	e15a      	b.n	800b1b4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	3b01      	subs	r3, #1
 800af02:	0a5b      	lsrs	r3, r3, #9
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	8952      	ldrh	r2, [r2, #10]
 800af08:	3a01      	subs	r2, #1
 800af0a:	4013      	ands	r3, r2
 800af0c:	69ba      	ldr	r2, [r7, #24]
 800af0e:	4413      	add	r3, r2
 800af10:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f000 8148 	beq.w	800b1b0 <f_lseek+0x406>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	429a      	cmp	r2, r3
 800af28:	f000 8142 	beq.w	800b1b0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	7d1b      	ldrb	r3, [r3, #20]
 800af30:	b25b      	sxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	da18      	bge.n	800af68 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	7858      	ldrb	r0, [r3, #1]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a1a      	ldr	r2, [r3, #32]
 800af44:	2301      	movs	r3, #1
 800af46:	f7fd fe37 	bl	8008bb8 <disk_write>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d004      	beq.n	800af5a <f_lseek+0x1b0>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	755a      	strb	r2, [r3, #21]
 800af56:	2301      	movs	r3, #1
 800af58:	e12c      	b.n	800b1b4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	7d1b      	ldrb	r3, [r3, #20]
 800af5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af62:	b2da      	uxtb	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	7858      	ldrb	r0, [r3, #1]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af72:	2301      	movs	r3, #1
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	f7fd fdff 	bl	8008b78 <disk_read>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d004      	beq.n	800af8a <f_lseek+0x1e0>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	755a      	strb	r2, [r3, #21]
 800af86:	2301      	movs	r3, #1
 800af88:	e114      	b.n	800b1b4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	69ba      	ldr	r2, [r7, #24]
 800af8e:	621a      	str	r2, [r3, #32]
 800af90:	e10e      	b.n	800b1b0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d908      	bls.n	800afae <f_lseek+0x204>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	7d1b      	ldrb	r3, [r3, #20]
 800afa0:	f003 0302 	and.w	r3, r3, #2
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d102      	bne.n	800afae <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afbc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 80a7 	beq.w	800b114 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	895b      	ldrh	r3, [r3, #10]
 800afca:	025b      	lsls	r3, r3, #9
 800afcc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d01b      	beq.n	800b00c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	1e5a      	subs	r2, r3, #1
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	fbb2 f2f3 	udiv	r2, r2, r3
 800afde:	6a3b      	ldr	r3, [r7, #32]
 800afe0:	1e59      	subs	r1, r3, #1
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800afe8:	429a      	cmp	r2, r3
 800afea:	d30f      	bcc.n	800b00c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	1e5a      	subs	r2, r3, #1
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	425b      	negs	r3, r3
 800aff4:	401a      	ands	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	69db      	ldr	r3, [r3, #28]
 800b008:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b00a:	e022      	b.n	800b052 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b014:	2b00      	cmp	r3, #0
 800b016:	d119      	bne.n	800b04c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2100      	movs	r1, #0
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fe fb6c 	bl	80096fa <create_chain>
 800b022:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b026:	2b01      	cmp	r3, #1
 800b028:	d104      	bne.n	800b034 <f_lseek+0x28a>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2202      	movs	r2, #2
 800b02e:	755a      	strb	r2, [r3, #21]
 800b030:	2302      	movs	r3, #2
 800b032:	e0bf      	b.n	800b1b4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03a:	d104      	bne.n	800b046 <f_lseek+0x29c>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	755a      	strb	r2, [r3, #21]
 800b042:	2301      	movs	r3, #1
 800b044:	e0b6      	b.n	800b1b4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b04a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b050:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b054:	2b00      	cmp	r3, #0
 800b056:	d05d      	beq.n	800b114 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b058:	e03a      	b.n	800b0d0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	603b      	str	r3, [r7, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	699a      	ldr	r2, [r3, #24]
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	441a      	add	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	7d1b      	ldrb	r3, [r3, #20]
 800b072:	f003 0302 	and.w	r3, r3, #2
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00b      	beq.n	800b092 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fe fb3b 	bl	80096fa <create_chain>
 800b084:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d108      	bne.n	800b09e <f_lseek+0x2f4>
							ofs = 0; break;
 800b08c:	2300      	movs	r3, #0
 800b08e:	603b      	str	r3, [r7, #0]
 800b090:	e022      	b.n	800b0d8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe f939 	bl	800930e <get_fat>
 800b09c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a4:	d104      	bne.n	800b0b0 <f_lseek+0x306>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	755a      	strb	r2, [r3, #21]
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e081      	b.n	800b1b4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d904      	bls.n	800b0c0 <f_lseek+0x316>
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d304      	bcc.n	800b0ca <f_lseek+0x320>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	755a      	strb	r2, [r3, #21]
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e074      	b.n	800b1b4 <f_lseek+0x40a>
					fp->clust = clst;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0ce:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d8c0      	bhi.n	800b05a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	699a      	ldr	r2, [r3, #24]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	441a      	add	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d012      	beq.n	800b114 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fe f8ec 	bl	80092d0 <clust2sect>
 800b0f8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d104      	bne.n	800b10a <f_lseek+0x360>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2202      	movs	r2, #2
 800b104:	755a      	strb	r2, [r3, #21]
 800b106:	2302      	movs	r3, #2
 800b108:	e054      	b.n	800b1b4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	0a5b      	lsrs	r3, r3, #9
 800b10e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b110:	4413      	add	r3, r2
 800b112:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	699a      	ldr	r2, [r3, #24]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d90a      	bls.n	800b136 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	699a      	ldr	r2, [r3, #24]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	7d1b      	ldrb	r3, [r3, #20]
 800b12c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b130:	b2da      	uxtb	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d036      	beq.n	800b1b0 <f_lseek+0x406>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b148:	429a      	cmp	r2, r3
 800b14a:	d031      	beq.n	800b1b0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	7d1b      	ldrb	r3, [r3, #20]
 800b150:	b25b      	sxtb	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	da18      	bge.n	800b188 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	7858      	ldrb	r0, [r3, #1]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a1a      	ldr	r2, [r3, #32]
 800b164:	2301      	movs	r3, #1
 800b166:	f7fd fd27 	bl	8008bb8 <disk_write>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d004      	beq.n	800b17a <f_lseek+0x3d0>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	755a      	strb	r2, [r3, #21]
 800b176:	2301      	movs	r3, #1
 800b178:	e01c      	b.n	800b1b4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	7d1b      	ldrb	r3, [r3, #20]
 800b17e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b182:	b2da      	uxtb	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	7858      	ldrb	r0, [r3, #1]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b192:	2301      	movs	r3, #1
 800b194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b196:	f7fd fcef 	bl	8008b78 <disk_read>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d004      	beq.n	800b1aa <f_lseek+0x400>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	755a      	strb	r2, [r3, #21]
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e004      	b.n	800b1b4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1ae:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b1b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3740      	adds	r7, #64	@ 0x40
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b087      	sub	sp, #28
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b1d2:	4b1f      	ldr	r3, [pc, #124]	@ (800b250 <FATFS_LinkDriverEx+0x94>)
 800b1d4:	7a5b      	ldrb	r3, [r3, #9]
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d131      	bne.n	800b240 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b1dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b250 <FATFS_LinkDriverEx+0x94>)
 800b1de:	7a5b      	ldrb	r3, [r3, #9]
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b250 <FATFS_LinkDriverEx+0x94>)
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b1ea:	4b19      	ldr	r3, [pc, #100]	@ (800b250 <FATFS_LinkDriverEx+0x94>)
 800b1ec:	7a5b      	ldrb	r3, [r3, #9]
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	4a17      	ldr	r2, [pc, #92]	@ (800b250 <FATFS_LinkDriverEx+0x94>)
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b1fa:	4b15      	ldr	r3, [pc, #84]	@ (800b250 <FATFS_LinkDriverEx+0x94>)
 800b1fc:	7a5b      	ldrb	r3, [r3, #9]
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	461a      	mov	r2, r3
 800b202:	4b13      	ldr	r3, [pc, #76]	@ (800b250 <FATFS_LinkDriverEx+0x94>)
 800b204:	4413      	add	r3, r2
 800b206:	79fa      	ldrb	r2, [r7, #7]
 800b208:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b20a:	4b11      	ldr	r3, [pc, #68]	@ (800b250 <FATFS_LinkDriverEx+0x94>)
 800b20c:	7a5b      	ldrb	r3, [r3, #9]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	b2d1      	uxtb	r1, r2
 800b214:	4a0e      	ldr	r2, [pc, #56]	@ (800b250 <FATFS_LinkDriverEx+0x94>)
 800b216:	7251      	strb	r1, [r2, #9]
 800b218:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b21a:	7dbb      	ldrb	r3, [r7, #22]
 800b21c:	3330      	adds	r3, #48	@ 0x30
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	3301      	adds	r3, #1
 800b228:	223a      	movs	r2, #58	@ 0x3a
 800b22a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	3302      	adds	r3, #2
 800b230:	222f      	movs	r2, #47	@ 0x2f
 800b232:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	3303      	adds	r3, #3
 800b238:	2200      	movs	r2, #0
 800b23a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b240:	7dfb      	ldrb	r3, [r7, #23]
}
 800b242:	4618      	mov	r0, r3
 800b244:	371c      	adds	r7, #28
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	20000944 	.word	0x20000944

0800b254 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b25e:	2200      	movs	r2, #0
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff ffaa 	bl	800b1bc <FATFS_LinkDriverEx>
 800b268:	4603      	mov	r3, r0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <__cvt>:
 800b272:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b276:	ec57 6b10 	vmov	r6, r7, d0
 800b27a:	2f00      	cmp	r7, #0
 800b27c:	460c      	mov	r4, r1
 800b27e:	4619      	mov	r1, r3
 800b280:	463b      	mov	r3, r7
 800b282:	bfbb      	ittet	lt
 800b284:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b288:	461f      	movlt	r7, r3
 800b28a:	2300      	movge	r3, #0
 800b28c:	232d      	movlt	r3, #45	@ 0x2d
 800b28e:	700b      	strb	r3, [r1, #0]
 800b290:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b292:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b296:	4691      	mov	r9, r2
 800b298:	f023 0820 	bic.w	r8, r3, #32
 800b29c:	bfbc      	itt	lt
 800b29e:	4632      	movlt	r2, r6
 800b2a0:	4616      	movlt	r6, r2
 800b2a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2a6:	d005      	beq.n	800b2b4 <__cvt+0x42>
 800b2a8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b2ac:	d100      	bne.n	800b2b0 <__cvt+0x3e>
 800b2ae:	3401      	adds	r4, #1
 800b2b0:	2102      	movs	r1, #2
 800b2b2:	e000      	b.n	800b2b6 <__cvt+0x44>
 800b2b4:	2103      	movs	r1, #3
 800b2b6:	ab03      	add	r3, sp, #12
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	ab02      	add	r3, sp, #8
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	ec47 6b10 	vmov	d0, r6, r7
 800b2c2:	4653      	mov	r3, sl
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	f000 fe5b 	bl	800bf80 <_dtoa_r>
 800b2ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	d119      	bne.n	800b306 <__cvt+0x94>
 800b2d2:	f019 0f01 	tst.w	r9, #1
 800b2d6:	d00e      	beq.n	800b2f6 <__cvt+0x84>
 800b2d8:	eb00 0904 	add.w	r9, r0, r4
 800b2dc:	2200      	movs	r2, #0
 800b2de:	2300      	movs	r3, #0
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f5 fbf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2e8:	b108      	cbz	r0, 800b2ee <__cvt+0x7c>
 800b2ea:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2ee:	2230      	movs	r2, #48	@ 0x30
 800b2f0:	9b03      	ldr	r3, [sp, #12]
 800b2f2:	454b      	cmp	r3, r9
 800b2f4:	d31e      	bcc.n	800b334 <__cvt+0xc2>
 800b2f6:	9b03      	ldr	r3, [sp, #12]
 800b2f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2fa:	1b5b      	subs	r3, r3, r5
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	6013      	str	r3, [r2, #0]
 800b300:	b004      	add	sp, #16
 800b302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b306:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b30a:	eb00 0904 	add.w	r9, r0, r4
 800b30e:	d1e5      	bne.n	800b2dc <__cvt+0x6a>
 800b310:	7803      	ldrb	r3, [r0, #0]
 800b312:	2b30      	cmp	r3, #48	@ 0x30
 800b314:	d10a      	bne.n	800b32c <__cvt+0xba>
 800b316:	2200      	movs	r2, #0
 800b318:	2300      	movs	r3, #0
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f5 fbdb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b322:	b918      	cbnz	r0, 800b32c <__cvt+0xba>
 800b324:	f1c4 0401 	rsb	r4, r4, #1
 800b328:	f8ca 4000 	str.w	r4, [sl]
 800b32c:	f8da 3000 	ldr.w	r3, [sl]
 800b330:	4499      	add	r9, r3
 800b332:	e7d3      	b.n	800b2dc <__cvt+0x6a>
 800b334:	1c59      	adds	r1, r3, #1
 800b336:	9103      	str	r1, [sp, #12]
 800b338:	701a      	strb	r2, [r3, #0]
 800b33a:	e7d9      	b.n	800b2f0 <__cvt+0x7e>

0800b33c <__exponent>:
 800b33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b33e:	2900      	cmp	r1, #0
 800b340:	bfba      	itte	lt
 800b342:	4249      	neglt	r1, r1
 800b344:	232d      	movlt	r3, #45	@ 0x2d
 800b346:	232b      	movge	r3, #43	@ 0x2b
 800b348:	2909      	cmp	r1, #9
 800b34a:	7002      	strb	r2, [r0, #0]
 800b34c:	7043      	strb	r3, [r0, #1]
 800b34e:	dd29      	ble.n	800b3a4 <__exponent+0x68>
 800b350:	f10d 0307 	add.w	r3, sp, #7
 800b354:	461d      	mov	r5, r3
 800b356:	270a      	movs	r7, #10
 800b358:	461a      	mov	r2, r3
 800b35a:	fbb1 f6f7 	udiv	r6, r1, r7
 800b35e:	fb07 1416 	mls	r4, r7, r6, r1
 800b362:	3430      	adds	r4, #48	@ 0x30
 800b364:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b368:	460c      	mov	r4, r1
 800b36a:	2c63      	cmp	r4, #99	@ 0x63
 800b36c:	f103 33ff 	add.w	r3, r3, #4294967295
 800b370:	4631      	mov	r1, r6
 800b372:	dcf1      	bgt.n	800b358 <__exponent+0x1c>
 800b374:	3130      	adds	r1, #48	@ 0x30
 800b376:	1e94      	subs	r4, r2, #2
 800b378:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b37c:	1c41      	adds	r1, r0, #1
 800b37e:	4623      	mov	r3, r4
 800b380:	42ab      	cmp	r3, r5
 800b382:	d30a      	bcc.n	800b39a <__exponent+0x5e>
 800b384:	f10d 0309 	add.w	r3, sp, #9
 800b388:	1a9b      	subs	r3, r3, r2
 800b38a:	42ac      	cmp	r4, r5
 800b38c:	bf88      	it	hi
 800b38e:	2300      	movhi	r3, #0
 800b390:	3302      	adds	r3, #2
 800b392:	4403      	add	r3, r0
 800b394:	1a18      	subs	r0, r3, r0
 800b396:	b003      	add	sp, #12
 800b398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b39e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b3a2:	e7ed      	b.n	800b380 <__exponent+0x44>
 800b3a4:	2330      	movs	r3, #48	@ 0x30
 800b3a6:	3130      	adds	r1, #48	@ 0x30
 800b3a8:	7083      	strb	r3, [r0, #2]
 800b3aa:	70c1      	strb	r1, [r0, #3]
 800b3ac:	1d03      	adds	r3, r0, #4
 800b3ae:	e7f1      	b.n	800b394 <__exponent+0x58>

0800b3b0 <_printf_float>:
 800b3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b4:	b08d      	sub	sp, #52	@ 0x34
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b3bc:	4616      	mov	r6, r2
 800b3be:	461f      	mov	r7, r3
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	f000 fcdb 	bl	800bd7c <_localeconv_r>
 800b3c6:	6803      	ldr	r3, [r0, #0]
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7f4 ff58 	bl	8000280 <strlen>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3d8:	9005      	str	r0, [sp, #20]
 800b3da:	3307      	adds	r3, #7
 800b3dc:	f023 0307 	bic.w	r3, r3, #7
 800b3e0:	f103 0208 	add.w	r2, r3, #8
 800b3e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b3e8:	f8d4 b000 	ldr.w	fp, [r4]
 800b3ec:	f8c8 2000 	str.w	r2, [r8]
 800b3f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b3f8:	9307      	str	r3, [sp, #28]
 800b3fa:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b406:	4b9c      	ldr	r3, [pc, #624]	@ (800b678 <_printf_float+0x2c8>)
 800b408:	f04f 32ff 	mov.w	r2, #4294967295
 800b40c:	f7f5 fb96 	bl	8000b3c <__aeabi_dcmpun>
 800b410:	bb70      	cbnz	r0, 800b470 <_printf_float+0xc0>
 800b412:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b416:	4b98      	ldr	r3, [pc, #608]	@ (800b678 <_printf_float+0x2c8>)
 800b418:	f04f 32ff 	mov.w	r2, #4294967295
 800b41c:	f7f5 fb70 	bl	8000b00 <__aeabi_dcmple>
 800b420:	bb30      	cbnz	r0, 800b470 <_printf_float+0xc0>
 800b422:	2200      	movs	r2, #0
 800b424:	2300      	movs	r3, #0
 800b426:	4640      	mov	r0, r8
 800b428:	4649      	mov	r1, r9
 800b42a:	f7f5 fb5f 	bl	8000aec <__aeabi_dcmplt>
 800b42e:	b110      	cbz	r0, 800b436 <_printf_float+0x86>
 800b430:	232d      	movs	r3, #45	@ 0x2d
 800b432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b436:	4a91      	ldr	r2, [pc, #580]	@ (800b67c <_printf_float+0x2cc>)
 800b438:	4b91      	ldr	r3, [pc, #580]	@ (800b680 <_printf_float+0x2d0>)
 800b43a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b43e:	bf8c      	ite	hi
 800b440:	4690      	movhi	r8, r2
 800b442:	4698      	movls	r8, r3
 800b444:	2303      	movs	r3, #3
 800b446:	6123      	str	r3, [r4, #16]
 800b448:	f02b 0304 	bic.w	r3, fp, #4
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	f04f 0900 	mov.w	r9, #0
 800b452:	9700      	str	r7, [sp, #0]
 800b454:	4633      	mov	r3, r6
 800b456:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b458:	4621      	mov	r1, r4
 800b45a:	4628      	mov	r0, r5
 800b45c:	f000 f9d2 	bl	800b804 <_printf_common>
 800b460:	3001      	adds	r0, #1
 800b462:	f040 808d 	bne.w	800b580 <_printf_float+0x1d0>
 800b466:	f04f 30ff 	mov.w	r0, #4294967295
 800b46a:	b00d      	add	sp, #52	@ 0x34
 800b46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b470:	4642      	mov	r2, r8
 800b472:	464b      	mov	r3, r9
 800b474:	4640      	mov	r0, r8
 800b476:	4649      	mov	r1, r9
 800b478:	f7f5 fb60 	bl	8000b3c <__aeabi_dcmpun>
 800b47c:	b140      	cbz	r0, 800b490 <_printf_float+0xe0>
 800b47e:	464b      	mov	r3, r9
 800b480:	2b00      	cmp	r3, #0
 800b482:	bfbc      	itt	lt
 800b484:	232d      	movlt	r3, #45	@ 0x2d
 800b486:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b48a:	4a7e      	ldr	r2, [pc, #504]	@ (800b684 <_printf_float+0x2d4>)
 800b48c:	4b7e      	ldr	r3, [pc, #504]	@ (800b688 <_printf_float+0x2d8>)
 800b48e:	e7d4      	b.n	800b43a <_printf_float+0x8a>
 800b490:	6863      	ldr	r3, [r4, #4]
 800b492:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b496:	9206      	str	r2, [sp, #24]
 800b498:	1c5a      	adds	r2, r3, #1
 800b49a:	d13b      	bne.n	800b514 <_printf_float+0x164>
 800b49c:	2306      	movs	r3, #6
 800b49e:	6063      	str	r3, [r4, #4]
 800b4a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	6022      	str	r2, [r4, #0]
 800b4a8:	9303      	str	r3, [sp, #12]
 800b4aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800b4ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b4b0:	ab09      	add	r3, sp, #36	@ 0x24
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	6861      	ldr	r1, [r4, #4]
 800b4b6:	ec49 8b10 	vmov	d0, r8, r9
 800b4ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f7ff fed7 	bl	800b272 <__cvt>
 800b4c4:	9b06      	ldr	r3, [sp, #24]
 800b4c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4c8:	2b47      	cmp	r3, #71	@ 0x47
 800b4ca:	4680      	mov	r8, r0
 800b4cc:	d129      	bne.n	800b522 <_printf_float+0x172>
 800b4ce:	1cc8      	adds	r0, r1, #3
 800b4d0:	db02      	blt.n	800b4d8 <_printf_float+0x128>
 800b4d2:	6863      	ldr	r3, [r4, #4]
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	dd41      	ble.n	800b55c <_printf_float+0x1ac>
 800b4d8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b4dc:	fa5f fa8a 	uxtb.w	sl, sl
 800b4e0:	3901      	subs	r1, #1
 800b4e2:	4652      	mov	r2, sl
 800b4e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b4e8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4ea:	f7ff ff27 	bl	800b33c <__exponent>
 800b4ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4f0:	1813      	adds	r3, r2, r0
 800b4f2:	2a01      	cmp	r2, #1
 800b4f4:	4681      	mov	r9, r0
 800b4f6:	6123      	str	r3, [r4, #16]
 800b4f8:	dc02      	bgt.n	800b500 <_printf_float+0x150>
 800b4fa:	6822      	ldr	r2, [r4, #0]
 800b4fc:	07d2      	lsls	r2, r2, #31
 800b4fe:	d501      	bpl.n	800b504 <_printf_float+0x154>
 800b500:	3301      	adds	r3, #1
 800b502:	6123      	str	r3, [r4, #16]
 800b504:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0a2      	beq.n	800b452 <_printf_float+0xa2>
 800b50c:	232d      	movs	r3, #45	@ 0x2d
 800b50e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b512:	e79e      	b.n	800b452 <_printf_float+0xa2>
 800b514:	9a06      	ldr	r2, [sp, #24]
 800b516:	2a47      	cmp	r2, #71	@ 0x47
 800b518:	d1c2      	bne.n	800b4a0 <_printf_float+0xf0>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1c0      	bne.n	800b4a0 <_printf_float+0xf0>
 800b51e:	2301      	movs	r3, #1
 800b520:	e7bd      	b.n	800b49e <_printf_float+0xee>
 800b522:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b526:	d9db      	bls.n	800b4e0 <_printf_float+0x130>
 800b528:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b52c:	d118      	bne.n	800b560 <_printf_float+0x1b0>
 800b52e:	2900      	cmp	r1, #0
 800b530:	6863      	ldr	r3, [r4, #4]
 800b532:	dd0b      	ble.n	800b54c <_printf_float+0x19c>
 800b534:	6121      	str	r1, [r4, #16]
 800b536:	b913      	cbnz	r3, 800b53e <_printf_float+0x18e>
 800b538:	6822      	ldr	r2, [r4, #0]
 800b53a:	07d0      	lsls	r0, r2, #31
 800b53c:	d502      	bpl.n	800b544 <_printf_float+0x194>
 800b53e:	3301      	adds	r3, #1
 800b540:	440b      	add	r3, r1
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b546:	f04f 0900 	mov.w	r9, #0
 800b54a:	e7db      	b.n	800b504 <_printf_float+0x154>
 800b54c:	b913      	cbnz	r3, 800b554 <_printf_float+0x1a4>
 800b54e:	6822      	ldr	r2, [r4, #0]
 800b550:	07d2      	lsls	r2, r2, #31
 800b552:	d501      	bpl.n	800b558 <_printf_float+0x1a8>
 800b554:	3302      	adds	r3, #2
 800b556:	e7f4      	b.n	800b542 <_printf_float+0x192>
 800b558:	2301      	movs	r3, #1
 800b55a:	e7f2      	b.n	800b542 <_printf_float+0x192>
 800b55c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b562:	4299      	cmp	r1, r3
 800b564:	db05      	blt.n	800b572 <_printf_float+0x1c2>
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	6121      	str	r1, [r4, #16]
 800b56a:	07d8      	lsls	r0, r3, #31
 800b56c:	d5ea      	bpl.n	800b544 <_printf_float+0x194>
 800b56e:	1c4b      	adds	r3, r1, #1
 800b570:	e7e7      	b.n	800b542 <_printf_float+0x192>
 800b572:	2900      	cmp	r1, #0
 800b574:	bfd4      	ite	le
 800b576:	f1c1 0202 	rsble	r2, r1, #2
 800b57a:	2201      	movgt	r2, #1
 800b57c:	4413      	add	r3, r2
 800b57e:	e7e0      	b.n	800b542 <_printf_float+0x192>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	055a      	lsls	r2, r3, #21
 800b584:	d407      	bmi.n	800b596 <_printf_float+0x1e6>
 800b586:	6923      	ldr	r3, [r4, #16]
 800b588:	4642      	mov	r2, r8
 800b58a:	4631      	mov	r1, r6
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b8      	blx	r7
 800b590:	3001      	adds	r0, #1
 800b592:	d12b      	bne.n	800b5ec <_printf_float+0x23c>
 800b594:	e767      	b.n	800b466 <_printf_float+0xb6>
 800b596:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b59a:	f240 80dd 	bls.w	800b758 <_printf_float+0x3a8>
 800b59e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	f7f5 fa97 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d033      	beq.n	800b616 <_printf_float+0x266>
 800b5ae:	4a37      	ldr	r2, [pc, #220]	@ (800b68c <_printf_float+0x2dc>)
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	4631      	mov	r1, r6
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	47b8      	blx	r7
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	f43f af54 	beq.w	800b466 <_printf_float+0xb6>
 800b5be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b5c2:	4543      	cmp	r3, r8
 800b5c4:	db02      	blt.n	800b5cc <_printf_float+0x21c>
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	07d8      	lsls	r0, r3, #31
 800b5ca:	d50f      	bpl.n	800b5ec <_printf_float+0x23c>
 800b5cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	47b8      	blx	r7
 800b5d6:	3001      	adds	r0, #1
 800b5d8:	f43f af45 	beq.w	800b466 <_printf_float+0xb6>
 800b5dc:	f04f 0900 	mov.w	r9, #0
 800b5e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5e4:	f104 0a1a 	add.w	sl, r4, #26
 800b5e8:	45c8      	cmp	r8, r9
 800b5ea:	dc09      	bgt.n	800b600 <_printf_float+0x250>
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	079b      	lsls	r3, r3, #30
 800b5f0:	f100 8103 	bmi.w	800b7fa <_printf_float+0x44a>
 800b5f4:	68e0      	ldr	r0, [r4, #12]
 800b5f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5f8:	4298      	cmp	r0, r3
 800b5fa:	bfb8      	it	lt
 800b5fc:	4618      	movlt	r0, r3
 800b5fe:	e734      	b.n	800b46a <_printf_float+0xba>
 800b600:	2301      	movs	r3, #1
 800b602:	4652      	mov	r2, sl
 800b604:	4631      	mov	r1, r6
 800b606:	4628      	mov	r0, r5
 800b608:	47b8      	blx	r7
 800b60a:	3001      	adds	r0, #1
 800b60c:	f43f af2b 	beq.w	800b466 <_printf_float+0xb6>
 800b610:	f109 0901 	add.w	r9, r9, #1
 800b614:	e7e8      	b.n	800b5e8 <_printf_float+0x238>
 800b616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b618:	2b00      	cmp	r3, #0
 800b61a:	dc39      	bgt.n	800b690 <_printf_float+0x2e0>
 800b61c:	4a1b      	ldr	r2, [pc, #108]	@ (800b68c <_printf_float+0x2dc>)
 800b61e:	2301      	movs	r3, #1
 800b620:	4631      	mov	r1, r6
 800b622:	4628      	mov	r0, r5
 800b624:	47b8      	blx	r7
 800b626:	3001      	adds	r0, #1
 800b628:	f43f af1d 	beq.w	800b466 <_printf_float+0xb6>
 800b62c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b630:	ea59 0303 	orrs.w	r3, r9, r3
 800b634:	d102      	bne.n	800b63c <_printf_float+0x28c>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	07d9      	lsls	r1, r3, #31
 800b63a:	d5d7      	bpl.n	800b5ec <_printf_float+0x23c>
 800b63c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b640:	4631      	mov	r1, r6
 800b642:	4628      	mov	r0, r5
 800b644:	47b8      	blx	r7
 800b646:	3001      	adds	r0, #1
 800b648:	f43f af0d 	beq.w	800b466 <_printf_float+0xb6>
 800b64c:	f04f 0a00 	mov.w	sl, #0
 800b650:	f104 0b1a 	add.w	fp, r4, #26
 800b654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b656:	425b      	negs	r3, r3
 800b658:	4553      	cmp	r3, sl
 800b65a:	dc01      	bgt.n	800b660 <_printf_float+0x2b0>
 800b65c:	464b      	mov	r3, r9
 800b65e:	e793      	b.n	800b588 <_printf_float+0x1d8>
 800b660:	2301      	movs	r3, #1
 800b662:	465a      	mov	r2, fp
 800b664:	4631      	mov	r1, r6
 800b666:	4628      	mov	r0, r5
 800b668:	47b8      	blx	r7
 800b66a:	3001      	adds	r0, #1
 800b66c:	f43f aefb 	beq.w	800b466 <_printf_float+0xb6>
 800b670:	f10a 0a01 	add.w	sl, sl, #1
 800b674:	e7ee      	b.n	800b654 <_printf_float+0x2a4>
 800b676:	bf00      	nop
 800b678:	7fefffff 	.word	0x7fefffff
 800b67c:	0800fc08 	.word	0x0800fc08
 800b680:	0800fc04 	.word	0x0800fc04
 800b684:	0800fc10 	.word	0x0800fc10
 800b688:	0800fc0c 	.word	0x0800fc0c
 800b68c:	0800fc14 	.word	0x0800fc14
 800b690:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b692:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b696:	4553      	cmp	r3, sl
 800b698:	bfa8      	it	ge
 800b69a:	4653      	movge	r3, sl
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	4699      	mov	r9, r3
 800b6a0:	dc36      	bgt.n	800b710 <_printf_float+0x360>
 800b6a2:	f04f 0b00 	mov.w	fp, #0
 800b6a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6aa:	f104 021a 	add.w	r2, r4, #26
 800b6ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6b0:	9306      	str	r3, [sp, #24]
 800b6b2:	eba3 0309 	sub.w	r3, r3, r9
 800b6b6:	455b      	cmp	r3, fp
 800b6b8:	dc31      	bgt.n	800b71e <_printf_float+0x36e>
 800b6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6bc:	459a      	cmp	sl, r3
 800b6be:	dc3a      	bgt.n	800b736 <_printf_float+0x386>
 800b6c0:	6823      	ldr	r3, [r4, #0]
 800b6c2:	07da      	lsls	r2, r3, #31
 800b6c4:	d437      	bmi.n	800b736 <_printf_float+0x386>
 800b6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c8:	ebaa 0903 	sub.w	r9, sl, r3
 800b6cc:	9b06      	ldr	r3, [sp, #24]
 800b6ce:	ebaa 0303 	sub.w	r3, sl, r3
 800b6d2:	4599      	cmp	r9, r3
 800b6d4:	bfa8      	it	ge
 800b6d6:	4699      	movge	r9, r3
 800b6d8:	f1b9 0f00 	cmp.w	r9, #0
 800b6dc:	dc33      	bgt.n	800b746 <_printf_float+0x396>
 800b6de:	f04f 0800 	mov.w	r8, #0
 800b6e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6e6:	f104 0b1a 	add.w	fp, r4, #26
 800b6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ec:	ebaa 0303 	sub.w	r3, sl, r3
 800b6f0:	eba3 0309 	sub.w	r3, r3, r9
 800b6f4:	4543      	cmp	r3, r8
 800b6f6:	f77f af79 	ble.w	800b5ec <_printf_float+0x23c>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	465a      	mov	r2, fp
 800b6fe:	4631      	mov	r1, r6
 800b700:	4628      	mov	r0, r5
 800b702:	47b8      	blx	r7
 800b704:	3001      	adds	r0, #1
 800b706:	f43f aeae 	beq.w	800b466 <_printf_float+0xb6>
 800b70a:	f108 0801 	add.w	r8, r8, #1
 800b70e:	e7ec      	b.n	800b6ea <_printf_float+0x33a>
 800b710:	4642      	mov	r2, r8
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	d1c2      	bne.n	800b6a2 <_printf_float+0x2f2>
 800b71c:	e6a3      	b.n	800b466 <_printf_float+0xb6>
 800b71e:	2301      	movs	r3, #1
 800b720:	4631      	mov	r1, r6
 800b722:	4628      	mov	r0, r5
 800b724:	9206      	str	r2, [sp, #24]
 800b726:	47b8      	blx	r7
 800b728:	3001      	adds	r0, #1
 800b72a:	f43f ae9c 	beq.w	800b466 <_printf_float+0xb6>
 800b72e:	9a06      	ldr	r2, [sp, #24]
 800b730:	f10b 0b01 	add.w	fp, fp, #1
 800b734:	e7bb      	b.n	800b6ae <_printf_float+0x2fe>
 800b736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b73a:	4631      	mov	r1, r6
 800b73c:	4628      	mov	r0, r5
 800b73e:	47b8      	blx	r7
 800b740:	3001      	adds	r0, #1
 800b742:	d1c0      	bne.n	800b6c6 <_printf_float+0x316>
 800b744:	e68f      	b.n	800b466 <_printf_float+0xb6>
 800b746:	9a06      	ldr	r2, [sp, #24]
 800b748:	464b      	mov	r3, r9
 800b74a:	4442      	add	r2, r8
 800b74c:	4631      	mov	r1, r6
 800b74e:	4628      	mov	r0, r5
 800b750:	47b8      	blx	r7
 800b752:	3001      	adds	r0, #1
 800b754:	d1c3      	bne.n	800b6de <_printf_float+0x32e>
 800b756:	e686      	b.n	800b466 <_printf_float+0xb6>
 800b758:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b75c:	f1ba 0f01 	cmp.w	sl, #1
 800b760:	dc01      	bgt.n	800b766 <_printf_float+0x3b6>
 800b762:	07db      	lsls	r3, r3, #31
 800b764:	d536      	bpl.n	800b7d4 <_printf_float+0x424>
 800b766:	2301      	movs	r3, #1
 800b768:	4642      	mov	r2, r8
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	f43f ae78 	beq.w	800b466 <_printf_float+0xb6>
 800b776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b77a:	4631      	mov	r1, r6
 800b77c:	4628      	mov	r0, r5
 800b77e:	47b8      	blx	r7
 800b780:	3001      	adds	r0, #1
 800b782:	f43f ae70 	beq.w	800b466 <_printf_float+0xb6>
 800b786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b78a:	2200      	movs	r2, #0
 800b78c:	2300      	movs	r3, #0
 800b78e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b792:	f7f5 f9a1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b796:	b9c0      	cbnz	r0, 800b7ca <_printf_float+0x41a>
 800b798:	4653      	mov	r3, sl
 800b79a:	f108 0201 	add.w	r2, r8, #1
 800b79e:	4631      	mov	r1, r6
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	47b8      	blx	r7
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	d10c      	bne.n	800b7c2 <_printf_float+0x412>
 800b7a8:	e65d      	b.n	800b466 <_printf_float+0xb6>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	465a      	mov	r2, fp
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	47b8      	blx	r7
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	f43f ae56 	beq.w	800b466 <_printf_float+0xb6>
 800b7ba:	f108 0801 	add.w	r8, r8, #1
 800b7be:	45d0      	cmp	r8, sl
 800b7c0:	dbf3      	blt.n	800b7aa <_printf_float+0x3fa>
 800b7c2:	464b      	mov	r3, r9
 800b7c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b7c8:	e6df      	b.n	800b58a <_printf_float+0x1da>
 800b7ca:	f04f 0800 	mov.w	r8, #0
 800b7ce:	f104 0b1a 	add.w	fp, r4, #26
 800b7d2:	e7f4      	b.n	800b7be <_printf_float+0x40e>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	4642      	mov	r2, r8
 800b7d8:	e7e1      	b.n	800b79e <_printf_float+0x3ee>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	464a      	mov	r2, r9
 800b7de:	4631      	mov	r1, r6
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	47b8      	blx	r7
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	f43f ae3e 	beq.w	800b466 <_printf_float+0xb6>
 800b7ea:	f108 0801 	add.w	r8, r8, #1
 800b7ee:	68e3      	ldr	r3, [r4, #12]
 800b7f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7f2:	1a5b      	subs	r3, r3, r1
 800b7f4:	4543      	cmp	r3, r8
 800b7f6:	dcf0      	bgt.n	800b7da <_printf_float+0x42a>
 800b7f8:	e6fc      	b.n	800b5f4 <_printf_float+0x244>
 800b7fa:	f04f 0800 	mov.w	r8, #0
 800b7fe:	f104 0919 	add.w	r9, r4, #25
 800b802:	e7f4      	b.n	800b7ee <_printf_float+0x43e>

0800b804 <_printf_common>:
 800b804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b808:	4616      	mov	r6, r2
 800b80a:	4698      	mov	r8, r3
 800b80c:	688a      	ldr	r2, [r1, #8]
 800b80e:	690b      	ldr	r3, [r1, #16]
 800b810:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b814:	4293      	cmp	r3, r2
 800b816:	bfb8      	it	lt
 800b818:	4613      	movlt	r3, r2
 800b81a:	6033      	str	r3, [r6, #0]
 800b81c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b820:	4607      	mov	r7, r0
 800b822:	460c      	mov	r4, r1
 800b824:	b10a      	cbz	r2, 800b82a <_printf_common+0x26>
 800b826:	3301      	adds	r3, #1
 800b828:	6033      	str	r3, [r6, #0]
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	0699      	lsls	r1, r3, #26
 800b82e:	bf42      	ittt	mi
 800b830:	6833      	ldrmi	r3, [r6, #0]
 800b832:	3302      	addmi	r3, #2
 800b834:	6033      	strmi	r3, [r6, #0]
 800b836:	6825      	ldr	r5, [r4, #0]
 800b838:	f015 0506 	ands.w	r5, r5, #6
 800b83c:	d106      	bne.n	800b84c <_printf_common+0x48>
 800b83e:	f104 0a19 	add.w	sl, r4, #25
 800b842:	68e3      	ldr	r3, [r4, #12]
 800b844:	6832      	ldr	r2, [r6, #0]
 800b846:	1a9b      	subs	r3, r3, r2
 800b848:	42ab      	cmp	r3, r5
 800b84a:	dc26      	bgt.n	800b89a <_printf_common+0x96>
 800b84c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b850:	6822      	ldr	r2, [r4, #0]
 800b852:	3b00      	subs	r3, #0
 800b854:	bf18      	it	ne
 800b856:	2301      	movne	r3, #1
 800b858:	0692      	lsls	r2, r2, #26
 800b85a:	d42b      	bmi.n	800b8b4 <_printf_common+0xb0>
 800b85c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b860:	4641      	mov	r1, r8
 800b862:	4638      	mov	r0, r7
 800b864:	47c8      	blx	r9
 800b866:	3001      	adds	r0, #1
 800b868:	d01e      	beq.n	800b8a8 <_printf_common+0xa4>
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	6922      	ldr	r2, [r4, #16]
 800b86e:	f003 0306 	and.w	r3, r3, #6
 800b872:	2b04      	cmp	r3, #4
 800b874:	bf02      	ittt	eq
 800b876:	68e5      	ldreq	r5, [r4, #12]
 800b878:	6833      	ldreq	r3, [r6, #0]
 800b87a:	1aed      	subeq	r5, r5, r3
 800b87c:	68a3      	ldr	r3, [r4, #8]
 800b87e:	bf0c      	ite	eq
 800b880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b884:	2500      	movne	r5, #0
 800b886:	4293      	cmp	r3, r2
 800b888:	bfc4      	itt	gt
 800b88a:	1a9b      	subgt	r3, r3, r2
 800b88c:	18ed      	addgt	r5, r5, r3
 800b88e:	2600      	movs	r6, #0
 800b890:	341a      	adds	r4, #26
 800b892:	42b5      	cmp	r5, r6
 800b894:	d11a      	bne.n	800b8cc <_printf_common+0xc8>
 800b896:	2000      	movs	r0, #0
 800b898:	e008      	b.n	800b8ac <_printf_common+0xa8>
 800b89a:	2301      	movs	r3, #1
 800b89c:	4652      	mov	r2, sl
 800b89e:	4641      	mov	r1, r8
 800b8a0:	4638      	mov	r0, r7
 800b8a2:	47c8      	blx	r9
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	d103      	bne.n	800b8b0 <_printf_common+0xac>
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b0:	3501      	adds	r5, #1
 800b8b2:	e7c6      	b.n	800b842 <_printf_common+0x3e>
 800b8b4:	18e1      	adds	r1, r4, r3
 800b8b6:	1c5a      	adds	r2, r3, #1
 800b8b8:	2030      	movs	r0, #48	@ 0x30
 800b8ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8be:	4422      	add	r2, r4
 800b8c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8c8:	3302      	adds	r3, #2
 800b8ca:	e7c7      	b.n	800b85c <_printf_common+0x58>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	4622      	mov	r2, r4
 800b8d0:	4641      	mov	r1, r8
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	47c8      	blx	r9
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	d0e6      	beq.n	800b8a8 <_printf_common+0xa4>
 800b8da:	3601      	adds	r6, #1
 800b8dc:	e7d9      	b.n	800b892 <_printf_common+0x8e>
	...

0800b8e0 <_printf_i>:
 800b8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e4:	7e0f      	ldrb	r7, [r1, #24]
 800b8e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8e8:	2f78      	cmp	r7, #120	@ 0x78
 800b8ea:	4691      	mov	r9, r2
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	469a      	mov	sl, r3
 800b8f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8f6:	d807      	bhi.n	800b908 <_printf_i+0x28>
 800b8f8:	2f62      	cmp	r7, #98	@ 0x62
 800b8fa:	d80a      	bhi.n	800b912 <_printf_i+0x32>
 800b8fc:	2f00      	cmp	r7, #0
 800b8fe:	f000 80d1 	beq.w	800baa4 <_printf_i+0x1c4>
 800b902:	2f58      	cmp	r7, #88	@ 0x58
 800b904:	f000 80b8 	beq.w	800ba78 <_printf_i+0x198>
 800b908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b90c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b910:	e03a      	b.n	800b988 <_printf_i+0xa8>
 800b912:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b916:	2b15      	cmp	r3, #21
 800b918:	d8f6      	bhi.n	800b908 <_printf_i+0x28>
 800b91a:	a101      	add	r1, pc, #4	@ (adr r1, 800b920 <_printf_i+0x40>)
 800b91c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b920:	0800b979 	.word	0x0800b979
 800b924:	0800b98d 	.word	0x0800b98d
 800b928:	0800b909 	.word	0x0800b909
 800b92c:	0800b909 	.word	0x0800b909
 800b930:	0800b909 	.word	0x0800b909
 800b934:	0800b909 	.word	0x0800b909
 800b938:	0800b98d 	.word	0x0800b98d
 800b93c:	0800b909 	.word	0x0800b909
 800b940:	0800b909 	.word	0x0800b909
 800b944:	0800b909 	.word	0x0800b909
 800b948:	0800b909 	.word	0x0800b909
 800b94c:	0800ba8b 	.word	0x0800ba8b
 800b950:	0800b9b7 	.word	0x0800b9b7
 800b954:	0800ba45 	.word	0x0800ba45
 800b958:	0800b909 	.word	0x0800b909
 800b95c:	0800b909 	.word	0x0800b909
 800b960:	0800baad 	.word	0x0800baad
 800b964:	0800b909 	.word	0x0800b909
 800b968:	0800b9b7 	.word	0x0800b9b7
 800b96c:	0800b909 	.word	0x0800b909
 800b970:	0800b909 	.word	0x0800b909
 800b974:	0800ba4d 	.word	0x0800ba4d
 800b978:	6833      	ldr	r3, [r6, #0]
 800b97a:	1d1a      	adds	r2, r3, #4
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	6032      	str	r2, [r6, #0]
 800b980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b984:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b988:	2301      	movs	r3, #1
 800b98a:	e09c      	b.n	800bac6 <_printf_i+0x1e6>
 800b98c:	6833      	ldr	r3, [r6, #0]
 800b98e:	6820      	ldr	r0, [r4, #0]
 800b990:	1d19      	adds	r1, r3, #4
 800b992:	6031      	str	r1, [r6, #0]
 800b994:	0606      	lsls	r6, r0, #24
 800b996:	d501      	bpl.n	800b99c <_printf_i+0xbc>
 800b998:	681d      	ldr	r5, [r3, #0]
 800b99a:	e003      	b.n	800b9a4 <_printf_i+0xc4>
 800b99c:	0645      	lsls	r5, r0, #25
 800b99e:	d5fb      	bpl.n	800b998 <_printf_i+0xb8>
 800b9a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9a4:	2d00      	cmp	r5, #0
 800b9a6:	da03      	bge.n	800b9b0 <_printf_i+0xd0>
 800b9a8:	232d      	movs	r3, #45	@ 0x2d
 800b9aa:	426d      	negs	r5, r5
 800b9ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9b0:	4858      	ldr	r0, [pc, #352]	@ (800bb14 <_printf_i+0x234>)
 800b9b2:	230a      	movs	r3, #10
 800b9b4:	e011      	b.n	800b9da <_printf_i+0xfa>
 800b9b6:	6821      	ldr	r1, [r4, #0]
 800b9b8:	6833      	ldr	r3, [r6, #0]
 800b9ba:	0608      	lsls	r0, r1, #24
 800b9bc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9c0:	d402      	bmi.n	800b9c8 <_printf_i+0xe8>
 800b9c2:	0649      	lsls	r1, r1, #25
 800b9c4:	bf48      	it	mi
 800b9c6:	b2ad      	uxthmi	r5, r5
 800b9c8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9ca:	4852      	ldr	r0, [pc, #328]	@ (800bb14 <_printf_i+0x234>)
 800b9cc:	6033      	str	r3, [r6, #0]
 800b9ce:	bf14      	ite	ne
 800b9d0:	230a      	movne	r3, #10
 800b9d2:	2308      	moveq	r3, #8
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9da:	6866      	ldr	r6, [r4, #4]
 800b9dc:	60a6      	str	r6, [r4, #8]
 800b9de:	2e00      	cmp	r6, #0
 800b9e0:	db05      	blt.n	800b9ee <_printf_i+0x10e>
 800b9e2:	6821      	ldr	r1, [r4, #0]
 800b9e4:	432e      	orrs	r6, r5
 800b9e6:	f021 0104 	bic.w	r1, r1, #4
 800b9ea:	6021      	str	r1, [r4, #0]
 800b9ec:	d04b      	beq.n	800ba86 <_printf_i+0x1a6>
 800b9ee:	4616      	mov	r6, r2
 800b9f0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9f4:	fb03 5711 	mls	r7, r3, r1, r5
 800b9f8:	5dc7      	ldrb	r7, [r0, r7]
 800b9fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9fe:	462f      	mov	r7, r5
 800ba00:	42bb      	cmp	r3, r7
 800ba02:	460d      	mov	r5, r1
 800ba04:	d9f4      	bls.n	800b9f0 <_printf_i+0x110>
 800ba06:	2b08      	cmp	r3, #8
 800ba08:	d10b      	bne.n	800ba22 <_printf_i+0x142>
 800ba0a:	6823      	ldr	r3, [r4, #0]
 800ba0c:	07df      	lsls	r7, r3, #31
 800ba0e:	d508      	bpl.n	800ba22 <_printf_i+0x142>
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	6861      	ldr	r1, [r4, #4]
 800ba14:	4299      	cmp	r1, r3
 800ba16:	bfde      	ittt	le
 800ba18:	2330      	movle	r3, #48	@ 0x30
 800ba1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba22:	1b92      	subs	r2, r2, r6
 800ba24:	6122      	str	r2, [r4, #16]
 800ba26:	f8cd a000 	str.w	sl, [sp]
 800ba2a:	464b      	mov	r3, r9
 800ba2c:	aa03      	add	r2, sp, #12
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4640      	mov	r0, r8
 800ba32:	f7ff fee7 	bl	800b804 <_printf_common>
 800ba36:	3001      	adds	r0, #1
 800ba38:	d14a      	bne.n	800bad0 <_printf_i+0x1f0>
 800ba3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3e:	b004      	add	sp, #16
 800ba40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	f043 0320 	orr.w	r3, r3, #32
 800ba4a:	6023      	str	r3, [r4, #0]
 800ba4c:	4832      	ldr	r0, [pc, #200]	@ (800bb18 <_printf_i+0x238>)
 800ba4e:	2778      	movs	r7, #120	@ 0x78
 800ba50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba54:	6823      	ldr	r3, [r4, #0]
 800ba56:	6831      	ldr	r1, [r6, #0]
 800ba58:	061f      	lsls	r7, r3, #24
 800ba5a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba5e:	d402      	bmi.n	800ba66 <_printf_i+0x186>
 800ba60:	065f      	lsls	r7, r3, #25
 800ba62:	bf48      	it	mi
 800ba64:	b2ad      	uxthmi	r5, r5
 800ba66:	6031      	str	r1, [r6, #0]
 800ba68:	07d9      	lsls	r1, r3, #31
 800ba6a:	bf44      	itt	mi
 800ba6c:	f043 0320 	orrmi.w	r3, r3, #32
 800ba70:	6023      	strmi	r3, [r4, #0]
 800ba72:	b11d      	cbz	r5, 800ba7c <_printf_i+0x19c>
 800ba74:	2310      	movs	r3, #16
 800ba76:	e7ad      	b.n	800b9d4 <_printf_i+0xf4>
 800ba78:	4826      	ldr	r0, [pc, #152]	@ (800bb14 <_printf_i+0x234>)
 800ba7a:	e7e9      	b.n	800ba50 <_printf_i+0x170>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	f023 0320 	bic.w	r3, r3, #32
 800ba82:	6023      	str	r3, [r4, #0]
 800ba84:	e7f6      	b.n	800ba74 <_printf_i+0x194>
 800ba86:	4616      	mov	r6, r2
 800ba88:	e7bd      	b.n	800ba06 <_printf_i+0x126>
 800ba8a:	6833      	ldr	r3, [r6, #0]
 800ba8c:	6825      	ldr	r5, [r4, #0]
 800ba8e:	6961      	ldr	r1, [r4, #20]
 800ba90:	1d18      	adds	r0, r3, #4
 800ba92:	6030      	str	r0, [r6, #0]
 800ba94:	062e      	lsls	r6, r5, #24
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	d501      	bpl.n	800ba9e <_printf_i+0x1be>
 800ba9a:	6019      	str	r1, [r3, #0]
 800ba9c:	e002      	b.n	800baa4 <_printf_i+0x1c4>
 800ba9e:	0668      	lsls	r0, r5, #25
 800baa0:	d5fb      	bpl.n	800ba9a <_printf_i+0x1ba>
 800baa2:	8019      	strh	r1, [r3, #0]
 800baa4:	2300      	movs	r3, #0
 800baa6:	6123      	str	r3, [r4, #16]
 800baa8:	4616      	mov	r6, r2
 800baaa:	e7bc      	b.n	800ba26 <_printf_i+0x146>
 800baac:	6833      	ldr	r3, [r6, #0]
 800baae:	1d1a      	adds	r2, r3, #4
 800bab0:	6032      	str	r2, [r6, #0]
 800bab2:	681e      	ldr	r6, [r3, #0]
 800bab4:	6862      	ldr	r2, [r4, #4]
 800bab6:	2100      	movs	r1, #0
 800bab8:	4630      	mov	r0, r6
 800baba:	f7f4 fb91 	bl	80001e0 <memchr>
 800babe:	b108      	cbz	r0, 800bac4 <_printf_i+0x1e4>
 800bac0:	1b80      	subs	r0, r0, r6
 800bac2:	6060      	str	r0, [r4, #4]
 800bac4:	6863      	ldr	r3, [r4, #4]
 800bac6:	6123      	str	r3, [r4, #16]
 800bac8:	2300      	movs	r3, #0
 800baca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bace:	e7aa      	b.n	800ba26 <_printf_i+0x146>
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	4632      	mov	r2, r6
 800bad4:	4649      	mov	r1, r9
 800bad6:	4640      	mov	r0, r8
 800bad8:	47d0      	blx	sl
 800bada:	3001      	adds	r0, #1
 800badc:	d0ad      	beq.n	800ba3a <_printf_i+0x15a>
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	079b      	lsls	r3, r3, #30
 800bae2:	d413      	bmi.n	800bb0c <_printf_i+0x22c>
 800bae4:	68e0      	ldr	r0, [r4, #12]
 800bae6:	9b03      	ldr	r3, [sp, #12]
 800bae8:	4298      	cmp	r0, r3
 800baea:	bfb8      	it	lt
 800baec:	4618      	movlt	r0, r3
 800baee:	e7a6      	b.n	800ba3e <_printf_i+0x15e>
 800baf0:	2301      	movs	r3, #1
 800baf2:	4632      	mov	r2, r6
 800baf4:	4649      	mov	r1, r9
 800baf6:	4640      	mov	r0, r8
 800baf8:	47d0      	blx	sl
 800bafa:	3001      	adds	r0, #1
 800bafc:	d09d      	beq.n	800ba3a <_printf_i+0x15a>
 800bafe:	3501      	adds	r5, #1
 800bb00:	68e3      	ldr	r3, [r4, #12]
 800bb02:	9903      	ldr	r1, [sp, #12]
 800bb04:	1a5b      	subs	r3, r3, r1
 800bb06:	42ab      	cmp	r3, r5
 800bb08:	dcf2      	bgt.n	800baf0 <_printf_i+0x210>
 800bb0a:	e7eb      	b.n	800bae4 <_printf_i+0x204>
 800bb0c:	2500      	movs	r5, #0
 800bb0e:	f104 0619 	add.w	r6, r4, #25
 800bb12:	e7f5      	b.n	800bb00 <_printf_i+0x220>
 800bb14:	0800fc16 	.word	0x0800fc16
 800bb18:	0800fc27 	.word	0x0800fc27

0800bb1c <std>:
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	b510      	push	{r4, lr}
 800bb20:	4604      	mov	r4, r0
 800bb22:	e9c0 3300 	strd	r3, r3, [r0]
 800bb26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb2a:	6083      	str	r3, [r0, #8]
 800bb2c:	8181      	strh	r1, [r0, #12]
 800bb2e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb30:	81c2      	strh	r2, [r0, #14]
 800bb32:	6183      	str	r3, [r0, #24]
 800bb34:	4619      	mov	r1, r3
 800bb36:	2208      	movs	r2, #8
 800bb38:	305c      	adds	r0, #92	@ 0x5c
 800bb3a:	f000 f916 	bl	800bd6a <memset>
 800bb3e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb74 <std+0x58>)
 800bb40:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb42:	4b0d      	ldr	r3, [pc, #52]	@ (800bb78 <std+0x5c>)
 800bb44:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb46:	4b0d      	ldr	r3, [pc, #52]	@ (800bb7c <std+0x60>)
 800bb48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb4a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb80 <std+0x64>)
 800bb4c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb84 <std+0x68>)
 800bb50:	6224      	str	r4, [r4, #32]
 800bb52:	429c      	cmp	r4, r3
 800bb54:	d006      	beq.n	800bb64 <std+0x48>
 800bb56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb5a:	4294      	cmp	r4, r2
 800bb5c:	d002      	beq.n	800bb64 <std+0x48>
 800bb5e:	33d0      	adds	r3, #208	@ 0xd0
 800bb60:	429c      	cmp	r4, r3
 800bb62:	d105      	bne.n	800bb70 <std+0x54>
 800bb64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb6c:	f000 b97a 	b.w	800be64 <__retarget_lock_init_recursive>
 800bb70:	bd10      	pop	{r4, pc}
 800bb72:	bf00      	nop
 800bb74:	0800bce5 	.word	0x0800bce5
 800bb78:	0800bd07 	.word	0x0800bd07
 800bb7c:	0800bd3f 	.word	0x0800bd3f
 800bb80:	0800bd63 	.word	0x0800bd63
 800bb84:	20000950 	.word	0x20000950

0800bb88 <stdio_exit_handler>:
 800bb88:	4a02      	ldr	r2, [pc, #8]	@ (800bb94 <stdio_exit_handler+0xc>)
 800bb8a:	4903      	ldr	r1, [pc, #12]	@ (800bb98 <stdio_exit_handler+0x10>)
 800bb8c:	4803      	ldr	r0, [pc, #12]	@ (800bb9c <stdio_exit_handler+0x14>)
 800bb8e:	f000 b869 	b.w	800bc64 <_fwalk_sglue>
 800bb92:	bf00      	nop
 800bb94:	20000038 	.word	0x20000038
 800bb98:	0800d7cd 	.word	0x0800d7cd
 800bb9c:	20000048 	.word	0x20000048

0800bba0 <cleanup_stdio>:
 800bba0:	6841      	ldr	r1, [r0, #4]
 800bba2:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd4 <cleanup_stdio+0x34>)
 800bba4:	4299      	cmp	r1, r3
 800bba6:	b510      	push	{r4, lr}
 800bba8:	4604      	mov	r4, r0
 800bbaa:	d001      	beq.n	800bbb0 <cleanup_stdio+0x10>
 800bbac:	f001 fe0e 	bl	800d7cc <_fflush_r>
 800bbb0:	68a1      	ldr	r1, [r4, #8]
 800bbb2:	4b09      	ldr	r3, [pc, #36]	@ (800bbd8 <cleanup_stdio+0x38>)
 800bbb4:	4299      	cmp	r1, r3
 800bbb6:	d002      	beq.n	800bbbe <cleanup_stdio+0x1e>
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f001 fe07 	bl	800d7cc <_fflush_r>
 800bbbe:	68e1      	ldr	r1, [r4, #12]
 800bbc0:	4b06      	ldr	r3, [pc, #24]	@ (800bbdc <cleanup_stdio+0x3c>)
 800bbc2:	4299      	cmp	r1, r3
 800bbc4:	d004      	beq.n	800bbd0 <cleanup_stdio+0x30>
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbcc:	f001 bdfe 	b.w	800d7cc <_fflush_r>
 800bbd0:	bd10      	pop	{r4, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20000950 	.word	0x20000950
 800bbd8:	200009b8 	.word	0x200009b8
 800bbdc:	20000a20 	.word	0x20000a20

0800bbe0 <global_stdio_init.part.0>:
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	4b0b      	ldr	r3, [pc, #44]	@ (800bc10 <global_stdio_init.part.0+0x30>)
 800bbe4:	4c0b      	ldr	r4, [pc, #44]	@ (800bc14 <global_stdio_init.part.0+0x34>)
 800bbe6:	4a0c      	ldr	r2, [pc, #48]	@ (800bc18 <global_stdio_init.part.0+0x38>)
 800bbe8:	601a      	str	r2, [r3, #0]
 800bbea:	4620      	mov	r0, r4
 800bbec:	2200      	movs	r2, #0
 800bbee:	2104      	movs	r1, #4
 800bbf0:	f7ff ff94 	bl	800bb1c <std>
 800bbf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	2109      	movs	r1, #9
 800bbfc:	f7ff ff8e 	bl	800bb1c <std>
 800bc00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc04:	2202      	movs	r2, #2
 800bc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc0a:	2112      	movs	r1, #18
 800bc0c:	f7ff bf86 	b.w	800bb1c <std>
 800bc10:	20000a88 	.word	0x20000a88
 800bc14:	20000950 	.word	0x20000950
 800bc18:	0800bb89 	.word	0x0800bb89

0800bc1c <__sfp_lock_acquire>:
 800bc1c:	4801      	ldr	r0, [pc, #4]	@ (800bc24 <__sfp_lock_acquire+0x8>)
 800bc1e:	f000 b922 	b.w	800be66 <__retarget_lock_acquire_recursive>
 800bc22:	bf00      	nop
 800bc24:	20000a91 	.word	0x20000a91

0800bc28 <__sfp_lock_release>:
 800bc28:	4801      	ldr	r0, [pc, #4]	@ (800bc30 <__sfp_lock_release+0x8>)
 800bc2a:	f000 b91d 	b.w	800be68 <__retarget_lock_release_recursive>
 800bc2e:	bf00      	nop
 800bc30:	20000a91 	.word	0x20000a91

0800bc34 <__sinit>:
 800bc34:	b510      	push	{r4, lr}
 800bc36:	4604      	mov	r4, r0
 800bc38:	f7ff fff0 	bl	800bc1c <__sfp_lock_acquire>
 800bc3c:	6a23      	ldr	r3, [r4, #32]
 800bc3e:	b11b      	cbz	r3, 800bc48 <__sinit+0x14>
 800bc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc44:	f7ff bff0 	b.w	800bc28 <__sfp_lock_release>
 800bc48:	4b04      	ldr	r3, [pc, #16]	@ (800bc5c <__sinit+0x28>)
 800bc4a:	6223      	str	r3, [r4, #32]
 800bc4c:	4b04      	ldr	r3, [pc, #16]	@ (800bc60 <__sinit+0x2c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1f5      	bne.n	800bc40 <__sinit+0xc>
 800bc54:	f7ff ffc4 	bl	800bbe0 <global_stdio_init.part.0>
 800bc58:	e7f2      	b.n	800bc40 <__sinit+0xc>
 800bc5a:	bf00      	nop
 800bc5c:	0800bba1 	.word	0x0800bba1
 800bc60:	20000a88 	.word	0x20000a88

0800bc64 <_fwalk_sglue>:
 800bc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc68:	4607      	mov	r7, r0
 800bc6a:	4688      	mov	r8, r1
 800bc6c:	4614      	mov	r4, r2
 800bc6e:	2600      	movs	r6, #0
 800bc70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc74:	f1b9 0901 	subs.w	r9, r9, #1
 800bc78:	d505      	bpl.n	800bc86 <_fwalk_sglue+0x22>
 800bc7a:	6824      	ldr	r4, [r4, #0]
 800bc7c:	2c00      	cmp	r4, #0
 800bc7e:	d1f7      	bne.n	800bc70 <_fwalk_sglue+0xc>
 800bc80:	4630      	mov	r0, r6
 800bc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc86:	89ab      	ldrh	r3, [r5, #12]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d907      	bls.n	800bc9c <_fwalk_sglue+0x38>
 800bc8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc90:	3301      	adds	r3, #1
 800bc92:	d003      	beq.n	800bc9c <_fwalk_sglue+0x38>
 800bc94:	4629      	mov	r1, r5
 800bc96:	4638      	mov	r0, r7
 800bc98:	47c0      	blx	r8
 800bc9a:	4306      	orrs	r6, r0
 800bc9c:	3568      	adds	r5, #104	@ 0x68
 800bc9e:	e7e9      	b.n	800bc74 <_fwalk_sglue+0x10>

0800bca0 <siprintf>:
 800bca0:	b40e      	push	{r1, r2, r3}
 800bca2:	b510      	push	{r4, lr}
 800bca4:	b09d      	sub	sp, #116	@ 0x74
 800bca6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bca8:	9002      	str	r0, [sp, #8]
 800bcaa:	9006      	str	r0, [sp, #24]
 800bcac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bcb0:	480a      	ldr	r0, [pc, #40]	@ (800bcdc <siprintf+0x3c>)
 800bcb2:	9107      	str	r1, [sp, #28]
 800bcb4:	9104      	str	r1, [sp, #16]
 800bcb6:	490a      	ldr	r1, [pc, #40]	@ (800bce0 <siprintf+0x40>)
 800bcb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcbc:	9105      	str	r1, [sp, #20]
 800bcbe:	2400      	movs	r4, #0
 800bcc0:	a902      	add	r1, sp, #8
 800bcc2:	6800      	ldr	r0, [r0, #0]
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bcc8:	f001 fc00 	bl	800d4cc <_svfiprintf_r>
 800bccc:	9b02      	ldr	r3, [sp, #8]
 800bcce:	701c      	strb	r4, [r3, #0]
 800bcd0:	b01d      	add	sp, #116	@ 0x74
 800bcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd6:	b003      	add	sp, #12
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20000044 	.word	0x20000044
 800bce0:	ffff0208 	.word	0xffff0208

0800bce4 <__sread>:
 800bce4:	b510      	push	{r4, lr}
 800bce6:	460c      	mov	r4, r1
 800bce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcec:	f000 f86c 	bl	800bdc8 <_read_r>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	bfab      	itete	ge
 800bcf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcf6:	89a3      	ldrhlt	r3, [r4, #12]
 800bcf8:	181b      	addge	r3, r3, r0
 800bcfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bcfe:	bfac      	ite	ge
 800bd00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd02:	81a3      	strhlt	r3, [r4, #12]
 800bd04:	bd10      	pop	{r4, pc}

0800bd06 <__swrite>:
 800bd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0a:	461f      	mov	r7, r3
 800bd0c:	898b      	ldrh	r3, [r1, #12]
 800bd0e:	05db      	lsls	r3, r3, #23
 800bd10:	4605      	mov	r5, r0
 800bd12:	460c      	mov	r4, r1
 800bd14:	4616      	mov	r6, r2
 800bd16:	d505      	bpl.n	800bd24 <__swrite+0x1e>
 800bd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f000 f840 	bl	800bda4 <_lseek_r>
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd2e:	81a3      	strh	r3, [r4, #12]
 800bd30:	4632      	mov	r2, r6
 800bd32:	463b      	mov	r3, r7
 800bd34:	4628      	mov	r0, r5
 800bd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3a:	f000 b857 	b.w	800bdec <_write_r>

0800bd3e <__sseek>:
 800bd3e:	b510      	push	{r4, lr}
 800bd40:	460c      	mov	r4, r1
 800bd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd46:	f000 f82d 	bl	800bda4 <_lseek_r>
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	bf15      	itete	ne
 800bd50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd5a:	81a3      	strheq	r3, [r4, #12]
 800bd5c:	bf18      	it	ne
 800bd5e:	81a3      	strhne	r3, [r4, #12]
 800bd60:	bd10      	pop	{r4, pc}

0800bd62 <__sclose>:
 800bd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd66:	f000 b80d 	b.w	800bd84 <_close_r>

0800bd6a <memset>:
 800bd6a:	4402      	add	r2, r0
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d100      	bne.n	800bd74 <memset+0xa>
 800bd72:	4770      	bx	lr
 800bd74:	f803 1b01 	strb.w	r1, [r3], #1
 800bd78:	e7f9      	b.n	800bd6e <memset+0x4>
	...

0800bd7c <_localeconv_r>:
 800bd7c:	4800      	ldr	r0, [pc, #0]	@ (800bd80 <_localeconv_r+0x4>)
 800bd7e:	4770      	bx	lr
 800bd80:	20000184 	.word	0x20000184

0800bd84 <_close_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4d06      	ldr	r5, [pc, #24]	@ (800bda0 <_close_r+0x1c>)
 800bd88:	2300      	movs	r3, #0
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	4608      	mov	r0, r1
 800bd8e:	602b      	str	r3, [r5, #0]
 800bd90:	f7f7 feca 	bl	8003b28 <_close>
 800bd94:	1c43      	adds	r3, r0, #1
 800bd96:	d102      	bne.n	800bd9e <_close_r+0x1a>
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	b103      	cbz	r3, 800bd9e <_close_r+0x1a>
 800bd9c:	6023      	str	r3, [r4, #0]
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	20000a8c 	.word	0x20000a8c

0800bda4 <_lseek_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	@ (800bdc4 <_lseek_r+0x20>)
 800bda8:	4604      	mov	r4, r0
 800bdaa:	4608      	mov	r0, r1
 800bdac:	4611      	mov	r1, r2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	602a      	str	r2, [r5, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	f7f7 fedf 	bl	8003b76 <_lseek>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_lseek_r+0x1e>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_lseek_r+0x1e>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20000a8c 	.word	0x20000a8c

0800bdc8 <_read_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d07      	ldr	r5, [pc, #28]	@ (800bde8 <_read_r+0x20>)
 800bdcc:	4604      	mov	r4, r0
 800bdce:	4608      	mov	r0, r1
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	602a      	str	r2, [r5, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f7f7 fe6d 	bl	8003ab6 <_read>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_read_r+0x1e>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_read_r+0x1e>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20000a8c 	.word	0x20000a8c

0800bdec <_write_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4d07      	ldr	r5, [pc, #28]	@ (800be0c <_write_r+0x20>)
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	4608      	mov	r0, r1
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	602a      	str	r2, [r5, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f7f7 fe78 	bl	8003af0 <_write>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d102      	bne.n	800be0a <_write_r+0x1e>
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	b103      	cbz	r3, 800be0a <_write_r+0x1e>
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	20000a8c 	.word	0x20000a8c

0800be10 <__errno>:
 800be10:	4b01      	ldr	r3, [pc, #4]	@ (800be18 <__errno+0x8>)
 800be12:	6818      	ldr	r0, [r3, #0]
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	20000044 	.word	0x20000044

0800be1c <__libc_init_array>:
 800be1c:	b570      	push	{r4, r5, r6, lr}
 800be1e:	4d0d      	ldr	r5, [pc, #52]	@ (800be54 <__libc_init_array+0x38>)
 800be20:	4c0d      	ldr	r4, [pc, #52]	@ (800be58 <__libc_init_array+0x3c>)
 800be22:	1b64      	subs	r4, r4, r5
 800be24:	10a4      	asrs	r4, r4, #2
 800be26:	2600      	movs	r6, #0
 800be28:	42a6      	cmp	r6, r4
 800be2a:	d109      	bne.n	800be40 <__libc_init_array+0x24>
 800be2c:	4d0b      	ldr	r5, [pc, #44]	@ (800be5c <__libc_init_array+0x40>)
 800be2e:	4c0c      	ldr	r4, [pc, #48]	@ (800be60 <__libc_init_array+0x44>)
 800be30:	f002 f86a 	bl	800df08 <_init>
 800be34:	1b64      	subs	r4, r4, r5
 800be36:	10a4      	asrs	r4, r4, #2
 800be38:	2600      	movs	r6, #0
 800be3a:	42a6      	cmp	r6, r4
 800be3c:	d105      	bne.n	800be4a <__libc_init_array+0x2e>
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	f855 3b04 	ldr.w	r3, [r5], #4
 800be44:	4798      	blx	r3
 800be46:	3601      	adds	r6, #1
 800be48:	e7ee      	b.n	800be28 <__libc_init_array+0xc>
 800be4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be4e:	4798      	blx	r3
 800be50:	3601      	adds	r6, #1
 800be52:	e7f2      	b.n	800be3a <__libc_init_array+0x1e>
 800be54:	0800ff84 	.word	0x0800ff84
 800be58:	0800ff84 	.word	0x0800ff84
 800be5c:	0800ff84 	.word	0x0800ff84
 800be60:	0800ff88 	.word	0x0800ff88

0800be64 <__retarget_lock_init_recursive>:
 800be64:	4770      	bx	lr

0800be66 <__retarget_lock_acquire_recursive>:
 800be66:	4770      	bx	lr

0800be68 <__retarget_lock_release_recursive>:
 800be68:	4770      	bx	lr

0800be6a <quorem>:
 800be6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6e:	6903      	ldr	r3, [r0, #16]
 800be70:	690c      	ldr	r4, [r1, #16]
 800be72:	42a3      	cmp	r3, r4
 800be74:	4607      	mov	r7, r0
 800be76:	db7e      	blt.n	800bf76 <quorem+0x10c>
 800be78:	3c01      	subs	r4, #1
 800be7a:	f101 0814 	add.w	r8, r1, #20
 800be7e:	00a3      	lsls	r3, r4, #2
 800be80:	f100 0514 	add.w	r5, r0, #20
 800be84:	9300      	str	r3, [sp, #0]
 800be86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be8a:	9301      	str	r3, [sp, #4]
 800be8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be94:	3301      	adds	r3, #1
 800be96:	429a      	cmp	r2, r3
 800be98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bea0:	d32e      	bcc.n	800bf00 <quorem+0x96>
 800bea2:	f04f 0a00 	mov.w	sl, #0
 800bea6:	46c4      	mov	ip, r8
 800bea8:	46ae      	mov	lr, r5
 800beaa:	46d3      	mov	fp, sl
 800beac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800beb0:	b298      	uxth	r0, r3
 800beb2:	fb06 a000 	mla	r0, r6, r0, sl
 800beb6:	0c02      	lsrs	r2, r0, #16
 800beb8:	0c1b      	lsrs	r3, r3, #16
 800beba:	fb06 2303 	mla	r3, r6, r3, r2
 800bebe:	f8de 2000 	ldr.w	r2, [lr]
 800bec2:	b280      	uxth	r0, r0
 800bec4:	b292      	uxth	r2, r2
 800bec6:	1a12      	subs	r2, r2, r0
 800bec8:	445a      	add	r2, fp
 800beca:	f8de 0000 	ldr.w	r0, [lr]
 800bece:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bed8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bedc:	b292      	uxth	r2, r2
 800bede:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bee2:	45e1      	cmp	r9, ip
 800bee4:	f84e 2b04 	str.w	r2, [lr], #4
 800bee8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800beec:	d2de      	bcs.n	800beac <quorem+0x42>
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	58eb      	ldr	r3, [r5, r3]
 800bef2:	b92b      	cbnz	r3, 800bf00 <quorem+0x96>
 800bef4:	9b01      	ldr	r3, [sp, #4]
 800bef6:	3b04      	subs	r3, #4
 800bef8:	429d      	cmp	r5, r3
 800befa:	461a      	mov	r2, r3
 800befc:	d32f      	bcc.n	800bf5e <quorem+0xf4>
 800befe:	613c      	str	r4, [r7, #16]
 800bf00:	4638      	mov	r0, r7
 800bf02:	f001 f97f 	bl	800d204 <__mcmp>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	db25      	blt.n	800bf56 <quorem+0xec>
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf12:	f8d1 c000 	ldr.w	ip, [r1]
 800bf16:	fa1f fe82 	uxth.w	lr, r2
 800bf1a:	fa1f f38c 	uxth.w	r3, ip
 800bf1e:	eba3 030e 	sub.w	r3, r3, lr
 800bf22:	4403      	add	r3, r0
 800bf24:	0c12      	lsrs	r2, r2, #16
 800bf26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bf2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf34:	45c1      	cmp	r9, r8
 800bf36:	f841 3b04 	str.w	r3, [r1], #4
 800bf3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bf3e:	d2e6      	bcs.n	800bf0e <quorem+0xa4>
 800bf40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf48:	b922      	cbnz	r2, 800bf54 <quorem+0xea>
 800bf4a:	3b04      	subs	r3, #4
 800bf4c:	429d      	cmp	r5, r3
 800bf4e:	461a      	mov	r2, r3
 800bf50:	d30b      	bcc.n	800bf6a <quorem+0x100>
 800bf52:	613c      	str	r4, [r7, #16]
 800bf54:	3601      	adds	r6, #1
 800bf56:	4630      	mov	r0, r6
 800bf58:	b003      	add	sp, #12
 800bf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf5e:	6812      	ldr	r2, [r2, #0]
 800bf60:	3b04      	subs	r3, #4
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	d1cb      	bne.n	800befe <quorem+0x94>
 800bf66:	3c01      	subs	r4, #1
 800bf68:	e7c6      	b.n	800bef8 <quorem+0x8e>
 800bf6a:	6812      	ldr	r2, [r2, #0]
 800bf6c:	3b04      	subs	r3, #4
 800bf6e:	2a00      	cmp	r2, #0
 800bf70:	d1ef      	bne.n	800bf52 <quorem+0xe8>
 800bf72:	3c01      	subs	r4, #1
 800bf74:	e7ea      	b.n	800bf4c <quorem+0xe2>
 800bf76:	2000      	movs	r0, #0
 800bf78:	e7ee      	b.n	800bf58 <quorem+0xee>
 800bf7a:	0000      	movs	r0, r0
 800bf7c:	0000      	movs	r0, r0
	...

0800bf80 <_dtoa_r>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	69c7      	ldr	r7, [r0, #28]
 800bf86:	b097      	sub	sp, #92	@ 0x5c
 800bf88:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bf8c:	ec55 4b10 	vmov	r4, r5, d0
 800bf90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bf92:	9107      	str	r1, [sp, #28]
 800bf94:	4681      	mov	r9, r0
 800bf96:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf98:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf9a:	b97f      	cbnz	r7, 800bfbc <_dtoa_r+0x3c>
 800bf9c:	2010      	movs	r0, #16
 800bf9e:	f000 fe09 	bl	800cbb4 <malloc>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	f8c9 001c 	str.w	r0, [r9, #28]
 800bfa8:	b920      	cbnz	r0, 800bfb4 <_dtoa_r+0x34>
 800bfaa:	4ba9      	ldr	r3, [pc, #676]	@ (800c250 <_dtoa_r+0x2d0>)
 800bfac:	21ef      	movs	r1, #239	@ 0xef
 800bfae:	48a9      	ldr	r0, [pc, #676]	@ (800c254 <_dtoa_r+0x2d4>)
 800bfb0:	f001 fc6c 	bl	800d88c <__assert_func>
 800bfb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bfb8:	6007      	str	r7, [r0, #0]
 800bfba:	60c7      	str	r7, [r0, #12]
 800bfbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bfc0:	6819      	ldr	r1, [r3, #0]
 800bfc2:	b159      	cbz	r1, 800bfdc <_dtoa_r+0x5c>
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	604a      	str	r2, [r1, #4]
 800bfc8:	2301      	movs	r3, #1
 800bfca:	4093      	lsls	r3, r2
 800bfcc:	608b      	str	r3, [r1, #8]
 800bfce:	4648      	mov	r0, r9
 800bfd0:	f000 fee6 	bl	800cda0 <_Bfree>
 800bfd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	1e2b      	subs	r3, r5, #0
 800bfde:	bfb9      	ittee	lt
 800bfe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bfe4:	9305      	strlt	r3, [sp, #20]
 800bfe6:	2300      	movge	r3, #0
 800bfe8:	6033      	strge	r3, [r6, #0]
 800bfea:	9f05      	ldr	r7, [sp, #20]
 800bfec:	4b9a      	ldr	r3, [pc, #616]	@ (800c258 <_dtoa_r+0x2d8>)
 800bfee:	bfbc      	itt	lt
 800bff0:	2201      	movlt	r2, #1
 800bff2:	6032      	strlt	r2, [r6, #0]
 800bff4:	43bb      	bics	r3, r7
 800bff6:	d112      	bne.n	800c01e <_dtoa_r+0x9e>
 800bff8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bffa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c004:	4323      	orrs	r3, r4
 800c006:	f000 855a 	beq.w	800cabe <_dtoa_r+0xb3e>
 800c00a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c00c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c26c <_dtoa_r+0x2ec>
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 855c 	beq.w	800cace <_dtoa_r+0xb4e>
 800c016:	f10a 0303 	add.w	r3, sl, #3
 800c01a:	f000 bd56 	b.w	800caca <_dtoa_r+0xb4a>
 800c01e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c022:	2200      	movs	r2, #0
 800c024:	ec51 0b17 	vmov	r0, r1, d7
 800c028:	2300      	movs	r3, #0
 800c02a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c02e:	f7f4 fd53 	bl	8000ad8 <__aeabi_dcmpeq>
 800c032:	4680      	mov	r8, r0
 800c034:	b158      	cbz	r0, 800c04e <_dtoa_r+0xce>
 800c036:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c038:	2301      	movs	r3, #1
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c03e:	b113      	cbz	r3, 800c046 <_dtoa_r+0xc6>
 800c040:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c042:	4b86      	ldr	r3, [pc, #536]	@ (800c25c <_dtoa_r+0x2dc>)
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c270 <_dtoa_r+0x2f0>
 800c04a:	f000 bd40 	b.w	800cace <_dtoa_r+0xb4e>
 800c04e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c052:	aa14      	add	r2, sp, #80	@ 0x50
 800c054:	a915      	add	r1, sp, #84	@ 0x54
 800c056:	4648      	mov	r0, r9
 800c058:	f001 f984 	bl	800d364 <__d2b>
 800c05c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c060:	9002      	str	r0, [sp, #8]
 800c062:	2e00      	cmp	r6, #0
 800c064:	d078      	beq.n	800c158 <_dtoa_r+0x1d8>
 800c066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c068:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c06c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c070:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c074:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c078:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c07c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c080:	4619      	mov	r1, r3
 800c082:	2200      	movs	r2, #0
 800c084:	4b76      	ldr	r3, [pc, #472]	@ (800c260 <_dtoa_r+0x2e0>)
 800c086:	f7f4 f907 	bl	8000298 <__aeabi_dsub>
 800c08a:	a36b      	add	r3, pc, #428	@ (adr r3, 800c238 <_dtoa_r+0x2b8>)
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	f7f4 faba 	bl	8000608 <__aeabi_dmul>
 800c094:	a36a      	add	r3, pc, #424	@ (adr r3, 800c240 <_dtoa_r+0x2c0>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	f7f4 f8ff 	bl	800029c <__adddf3>
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	460d      	mov	r5, r1
 800c0a4:	f7f4 fa46 	bl	8000534 <__aeabi_i2d>
 800c0a8:	a367      	add	r3, pc, #412	@ (adr r3, 800c248 <_dtoa_r+0x2c8>)
 800c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ae:	f7f4 faab 	bl	8000608 <__aeabi_dmul>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	4629      	mov	r1, r5
 800c0ba:	f7f4 f8ef 	bl	800029c <__adddf3>
 800c0be:	4604      	mov	r4, r0
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	f7f4 fd51 	bl	8000b68 <__aeabi_d2iz>
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	f7f4 fd0c 	bl	8000aec <__aeabi_dcmplt>
 800c0d4:	b140      	cbz	r0, 800c0e8 <_dtoa_r+0x168>
 800c0d6:	4638      	mov	r0, r7
 800c0d8:	f7f4 fa2c 	bl	8000534 <__aeabi_i2d>
 800c0dc:	4622      	mov	r2, r4
 800c0de:	462b      	mov	r3, r5
 800c0e0:	f7f4 fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0e4:	b900      	cbnz	r0, 800c0e8 <_dtoa_r+0x168>
 800c0e6:	3f01      	subs	r7, #1
 800c0e8:	2f16      	cmp	r7, #22
 800c0ea:	d852      	bhi.n	800c192 <_dtoa_r+0x212>
 800c0ec:	4b5d      	ldr	r3, [pc, #372]	@ (800c264 <_dtoa_r+0x2e4>)
 800c0ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c0fa:	f7f4 fcf7 	bl	8000aec <__aeabi_dcmplt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d049      	beq.n	800c196 <_dtoa_r+0x216>
 800c102:	3f01      	subs	r7, #1
 800c104:	2300      	movs	r3, #0
 800c106:	9310      	str	r3, [sp, #64]	@ 0x40
 800c108:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c10a:	1b9b      	subs	r3, r3, r6
 800c10c:	1e5a      	subs	r2, r3, #1
 800c10e:	bf45      	ittet	mi
 800c110:	f1c3 0301 	rsbmi	r3, r3, #1
 800c114:	9300      	strmi	r3, [sp, #0]
 800c116:	2300      	movpl	r3, #0
 800c118:	2300      	movmi	r3, #0
 800c11a:	9206      	str	r2, [sp, #24]
 800c11c:	bf54      	ite	pl
 800c11e:	9300      	strpl	r3, [sp, #0]
 800c120:	9306      	strmi	r3, [sp, #24]
 800c122:	2f00      	cmp	r7, #0
 800c124:	db39      	blt.n	800c19a <_dtoa_r+0x21a>
 800c126:	9b06      	ldr	r3, [sp, #24]
 800c128:	970d      	str	r7, [sp, #52]	@ 0x34
 800c12a:	443b      	add	r3, r7
 800c12c:	9306      	str	r3, [sp, #24]
 800c12e:	2300      	movs	r3, #0
 800c130:	9308      	str	r3, [sp, #32]
 800c132:	9b07      	ldr	r3, [sp, #28]
 800c134:	2b09      	cmp	r3, #9
 800c136:	d863      	bhi.n	800c200 <_dtoa_r+0x280>
 800c138:	2b05      	cmp	r3, #5
 800c13a:	bfc4      	itt	gt
 800c13c:	3b04      	subgt	r3, #4
 800c13e:	9307      	strgt	r3, [sp, #28]
 800c140:	9b07      	ldr	r3, [sp, #28]
 800c142:	f1a3 0302 	sub.w	r3, r3, #2
 800c146:	bfcc      	ite	gt
 800c148:	2400      	movgt	r4, #0
 800c14a:	2401      	movle	r4, #1
 800c14c:	2b03      	cmp	r3, #3
 800c14e:	d863      	bhi.n	800c218 <_dtoa_r+0x298>
 800c150:	e8df f003 	tbb	[pc, r3]
 800c154:	2b375452 	.word	0x2b375452
 800c158:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c15c:	441e      	add	r6, r3
 800c15e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c162:	2b20      	cmp	r3, #32
 800c164:	bfc1      	itttt	gt
 800c166:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c16a:	409f      	lslgt	r7, r3
 800c16c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c170:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c174:	bfd6      	itet	le
 800c176:	f1c3 0320 	rsble	r3, r3, #32
 800c17a:	ea47 0003 	orrgt.w	r0, r7, r3
 800c17e:	fa04 f003 	lslle.w	r0, r4, r3
 800c182:	f7f4 f9c7 	bl	8000514 <__aeabi_ui2d>
 800c186:	2201      	movs	r2, #1
 800c188:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c18c:	3e01      	subs	r6, #1
 800c18e:	9212      	str	r2, [sp, #72]	@ 0x48
 800c190:	e776      	b.n	800c080 <_dtoa_r+0x100>
 800c192:	2301      	movs	r3, #1
 800c194:	e7b7      	b.n	800c106 <_dtoa_r+0x186>
 800c196:	9010      	str	r0, [sp, #64]	@ 0x40
 800c198:	e7b6      	b.n	800c108 <_dtoa_r+0x188>
 800c19a:	9b00      	ldr	r3, [sp, #0]
 800c19c:	1bdb      	subs	r3, r3, r7
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	427b      	negs	r3, r7
 800c1a2:	9308      	str	r3, [sp, #32]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	930d      	str	r3, [sp, #52]	@ 0x34
 800c1a8:	e7c3      	b.n	800c132 <_dtoa_r+0x1b2>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1b0:	eb07 0b03 	add.w	fp, r7, r3
 800c1b4:	f10b 0301 	add.w	r3, fp, #1
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	9303      	str	r3, [sp, #12]
 800c1bc:	bfb8      	it	lt
 800c1be:	2301      	movlt	r3, #1
 800c1c0:	e006      	b.n	800c1d0 <_dtoa_r+0x250>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	dd28      	ble.n	800c21e <_dtoa_r+0x29e>
 800c1cc:	469b      	mov	fp, r3
 800c1ce:	9303      	str	r3, [sp, #12]
 800c1d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	2204      	movs	r2, #4
 800c1d8:	f102 0514 	add.w	r5, r2, #20
 800c1dc:	429d      	cmp	r5, r3
 800c1de:	d926      	bls.n	800c22e <_dtoa_r+0x2ae>
 800c1e0:	6041      	str	r1, [r0, #4]
 800c1e2:	4648      	mov	r0, r9
 800c1e4:	f000 fd9c 	bl	800cd20 <_Balloc>
 800c1e8:	4682      	mov	sl, r0
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d142      	bne.n	800c274 <_dtoa_r+0x2f4>
 800c1ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c268 <_dtoa_r+0x2e8>)
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	f240 11af 	movw	r1, #431	@ 0x1af
 800c1f6:	e6da      	b.n	800bfae <_dtoa_r+0x2e>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	e7e3      	b.n	800c1c4 <_dtoa_r+0x244>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	e7d5      	b.n	800c1ac <_dtoa_r+0x22c>
 800c200:	2401      	movs	r4, #1
 800c202:	2300      	movs	r3, #0
 800c204:	9307      	str	r3, [sp, #28]
 800c206:	9409      	str	r4, [sp, #36]	@ 0x24
 800c208:	f04f 3bff 	mov.w	fp, #4294967295
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8cd b00c 	str.w	fp, [sp, #12]
 800c212:	2312      	movs	r3, #18
 800c214:	920c      	str	r2, [sp, #48]	@ 0x30
 800c216:	e7db      	b.n	800c1d0 <_dtoa_r+0x250>
 800c218:	2301      	movs	r3, #1
 800c21a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c21c:	e7f4      	b.n	800c208 <_dtoa_r+0x288>
 800c21e:	f04f 0b01 	mov.w	fp, #1
 800c222:	f8cd b00c 	str.w	fp, [sp, #12]
 800c226:	465b      	mov	r3, fp
 800c228:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c22c:	e7d0      	b.n	800c1d0 <_dtoa_r+0x250>
 800c22e:	3101      	adds	r1, #1
 800c230:	0052      	lsls	r2, r2, #1
 800c232:	e7d1      	b.n	800c1d8 <_dtoa_r+0x258>
 800c234:	f3af 8000 	nop.w
 800c238:	636f4361 	.word	0x636f4361
 800c23c:	3fd287a7 	.word	0x3fd287a7
 800c240:	8b60c8b3 	.word	0x8b60c8b3
 800c244:	3fc68a28 	.word	0x3fc68a28
 800c248:	509f79fb 	.word	0x509f79fb
 800c24c:	3fd34413 	.word	0x3fd34413
 800c250:	0800fc45 	.word	0x0800fc45
 800c254:	0800fc5c 	.word	0x0800fc5c
 800c258:	7ff00000 	.word	0x7ff00000
 800c25c:	0800fc15 	.word	0x0800fc15
 800c260:	3ff80000 	.word	0x3ff80000
 800c264:	0800fdb0 	.word	0x0800fdb0
 800c268:	0800fcb4 	.word	0x0800fcb4
 800c26c:	0800fc41 	.word	0x0800fc41
 800c270:	0800fc14 	.word	0x0800fc14
 800c274:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c278:	6018      	str	r0, [r3, #0]
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	2b0e      	cmp	r3, #14
 800c27e:	f200 80a1 	bhi.w	800c3c4 <_dtoa_r+0x444>
 800c282:	2c00      	cmp	r4, #0
 800c284:	f000 809e 	beq.w	800c3c4 <_dtoa_r+0x444>
 800c288:	2f00      	cmp	r7, #0
 800c28a:	dd33      	ble.n	800c2f4 <_dtoa_r+0x374>
 800c28c:	4b9c      	ldr	r3, [pc, #624]	@ (800c500 <_dtoa_r+0x580>)
 800c28e:	f007 020f 	and.w	r2, r7, #15
 800c292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c296:	ed93 7b00 	vldr	d7, [r3]
 800c29a:	05f8      	lsls	r0, r7, #23
 800c29c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c2a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c2a4:	d516      	bpl.n	800c2d4 <_dtoa_r+0x354>
 800c2a6:	4b97      	ldr	r3, [pc, #604]	@ (800c504 <_dtoa_r+0x584>)
 800c2a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c2ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2b0:	f7f4 fad4 	bl	800085c <__aeabi_ddiv>
 800c2b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2b8:	f004 040f 	and.w	r4, r4, #15
 800c2bc:	2603      	movs	r6, #3
 800c2be:	4d91      	ldr	r5, [pc, #580]	@ (800c504 <_dtoa_r+0x584>)
 800c2c0:	b954      	cbnz	r4, 800c2d8 <_dtoa_r+0x358>
 800c2c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2ca:	f7f4 fac7 	bl	800085c <__aeabi_ddiv>
 800c2ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2d2:	e028      	b.n	800c326 <_dtoa_r+0x3a6>
 800c2d4:	2602      	movs	r6, #2
 800c2d6:	e7f2      	b.n	800c2be <_dtoa_r+0x33e>
 800c2d8:	07e1      	lsls	r1, r4, #31
 800c2da:	d508      	bpl.n	800c2ee <_dtoa_r+0x36e>
 800c2dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c2e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2e4:	f7f4 f990 	bl	8000608 <__aeabi_dmul>
 800c2e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c2ec:	3601      	adds	r6, #1
 800c2ee:	1064      	asrs	r4, r4, #1
 800c2f0:	3508      	adds	r5, #8
 800c2f2:	e7e5      	b.n	800c2c0 <_dtoa_r+0x340>
 800c2f4:	f000 80af 	beq.w	800c456 <_dtoa_r+0x4d6>
 800c2f8:	427c      	negs	r4, r7
 800c2fa:	4b81      	ldr	r3, [pc, #516]	@ (800c500 <_dtoa_r+0x580>)
 800c2fc:	4d81      	ldr	r5, [pc, #516]	@ (800c504 <_dtoa_r+0x584>)
 800c2fe:	f004 020f 	and.w	r2, r4, #15
 800c302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c30e:	f7f4 f97b 	bl	8000608 <__aeabi_dmul>
 800c312:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c316:	1124      	asrs	r4, r4, #4
 800c318:	2300      	movs	r3, #0
 800c31a:	2602      	movs	r6, #2
 800c31c:	2c00      	cmp	r4, #0
 800c31e:	f040 808f 	bne.w	800c440 <_dtoa_r+0x4c0>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1d3      	bne.n	800c2ce <_dtoa_r+0x34e>
 800c326:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c328:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 8094 	beq.w	800c45a <_dtoa_r+0x4da>
 800c332:	4b75      	ldr	r3, [pc, #468]	@ (800c508 <_dtoa_r+0x588>)
 800c334:	2200      	movs	r2, #0
 800c336:	4620      	mov	r0, r4
 800c338:	4629      	mov	r1, r5
 800c33a:	f7f4 fbd7 	bl	8000aec <__aeabi_dcmplt>
 800c33e:	2800      	cmp	r0, #0
 800c340:	f000 808b 	beq.w	800c45a <_dtoa_r+0x4da>
 800c344:	9b03      	ldr	r3, [sp, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 8087 	beq.w	800c45a <_dtoa_r+0x4da>
 800c34c:	f1bb 0f00 	cmp.w	fp, #0
 800c350:	dd34      	ble.n	800c3bc <_dtoa_r+0x43c>
 800c352:	4620      	mov	r0, r4
 800c354:	4b6d      	ldr	r3, [pc, #436]	@ (800c50c <_dtoa_r+0x58c>)
 800c356:	2200      	movs	r2, #0
 800c358:	4629      	mov	r1, r5
 800c35a:	f7f4 f955 	bl	8000608 <__aeabi_dmul>
 800c35e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c362:	f107 38ff 	add.w	r8, r7, #4294967295
 800c366:	3601      	adds	r6, #1
 800c368:	465c      	mov	r4, fp
 800c36a:	4630      	mov	r0, r6
 800c36c:	f7f4 f8e2 	bl	8000534 <__aeabi_i2d>
 800c370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c374:	f7f4 f948 	bl	8000608 <__aeabi_dmul>
 800c378:	4b65      	ldr	r3, [pc, #404]	@ (800c510 <_dtoa_r+0x590>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	f7f3 ff8e 	bl	800029c <__adddf3>
 800c380:	4605      	mov	r5, r0
 800c382:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c386:	2c00      	cmp	r4, #0
 800c388:	d16a      	bne.n	800c460 <_dtoa_r+0x4e0>
 800c38a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c38e:	4b61      	ldr	r3, [pc, #388]	@ (800c514 <_dtoa_r+0x594>)
 800c390:	2200      	movs	r2, #0
 800c392:	f7f3 ff81 	bl	8000298 <__aeabi_dsub>
 800c396:	4602      	mov	r2, r0
 800c398:	460b      	mov	r3, r1
 800c39a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c39e:	462a      	mov	r2, r5
 800c3a0:	4633      	mov	r3, r6
 800c3a2:	f7f4 fbc1 	bl	8000b28 <__aeabi_dcmpgt>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	f040 8298 	bne.w	800c8dc <_dtoa_r+0x95c>
 800c3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3b0:	462a      	mov	r2, r5
 800c3b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c3b6:	f7f4 fb99 	bl	8000aec <__aeabi_dcmplt>
 800c3ba:	bb38      	cbnz	r0, 800c40c <_dtoa_r+0x48c>
 800c3bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c3c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c3c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f2c0 8157 	blt.w	800c67a <_dtoa_r+0x6fa>
 800c3cc:	2f0e      	cmp	r7, #14
 800c3ce:	f300 8154 	bgt.w	800c67a <_dtoa_r+0x6fa>
 800c3d2:	4b4b      	ldr	r3, [pc, #300]	@ (800c500 <_dtoa_r+0x580>)
 800c3d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c3d8:	ed93 7b00 	vldr	d7, [r3]
 800c3dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	ed8d 7b00 	vstr	d7, [sp]
 800c3e4:	f280 80e5 	bge.w	800c5b2 <_dtoa_r+0x632>
 800c3e8:	9b03      	ldr	r3, [sp, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f300 80e1 	bgt.w	800c5b2 <_dtoa_r+0x632>
 800c3f0:	d10c      	bne.n	800c40c <_dtoa_r+0x48c>
 800c3f2:	4b48      	ldr	r3, [pc, #288]	@ (800c514 <_dtoa_r+0x594>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	ec51 0b17 	vmov	r0, r1, d7
 800c3fa:	f7f4 f905 	bl	8000608 <__aeabi_dmul>
 800c3fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c402:	f7f4 fb87 	bl	8000b14 <__aeabi_dcmpge>
 800c406:	2800      	cmp	r0, #0
 800c408:	f000 8266 	beq.w	800c8d8 <_dtoa_r+0x958>
 800c40c:	2400      	movs	r4, #0
 800c40e:	4625      	mov	r5, r4
 800c410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c412:	4656      	mov	r6, sl
 800c414:	ea6f 0803 	mvn.w	r8, r3
 800c418:	2700      	movs	r7, #0
 800c41a:	4621      	mov	r1, r4
 800c41c:	4648      	mov	r0, r9
 800c41e:	f000 fcbf 	bl	800cda0 <_Bfree>
 800c422:	2d00      	cmp	r5, #0
 800c424:	f000 80bd 	beq.w	800c5a2 <_dtoa_r+0x622>
 800c428:	b12f      	cbz	r7, 800c436 <_dtoa_r+0x4b6>
 800c42a:	42af      	cmp	r7, r5
 800c42c:	d003      	beq.n	800c436 <_dtoa_r+0x4b6>
 800c42e:	4639      	mov	r1, r7
 800c430:	4648      	mov	r0, r9
 800c432:	f000 fcb5 	bl	800cda0 <_Bfree>
 800c436:	4629      	mov	r1, r5
 800c438:	4648      	mov	r0, r9
 800c43a:	f000 fcb1 	bl	800cda0 <_Bfree>
 800c43e:	e0b0      	b.n	800c5a2 <_dtoa_r+0x622>
 800c440:	07e2      	lsls	r2, r4, #31
 800c442:	d505      	bpl.n	800c450 <_dtoa_r+0x4d0>
 800c444:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c448:	f7f4 f8de 	bl	8000608 <__aeabi_dmul>
 800c44c:	3601      	adds	r6, #1
 800c44e:	2301      	movs	r3, #1
 800c450:	1064      	asrs	r4, r4, #1
 800c452:	3508      	adds	r5, #8
 800c454:	e762      	b.n	800c31c <_dtoa_r+0x39c>
 800c456:	2602      	movs	r6, #2
 800c458:	e765      	b.n	800c326 <_dtoa_r+0x3a6>
 800c45a:	9c03      	ldr	r4, [sp, #12]
 800c45c:	46b8      	mov	r8, r7
 800c45e:	e784      	b.n	800c36a <_dtoa_r+0x3ea>
 800c460:	4b27      	ldr	r3, [pc, #156]	@ (800c500 <_dtoa_r+0x580>)
 800c462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c464:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c468:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c46c:	4454      	add	r4, sl
 800c46e:	2900      	cmp	r1, #0
 800c470:	d054      	beq.n	800c51c <_dtoa_r+0x59c>
 800c472:	4929      	ldr	r1, [pc, #164]	@ (800c518 <_dtoa_r+0x598>)
 800c474:	2000      	movs	r0, #0
 800c476:	f7f4 f9f1 	bl	800085c <__aeabi_ddiv>
 800c47a:	4633      	mov	r3, r6
 800c47c:	462a      	mov	r2, r5
 800c47e:	f7f3 ff0b 	bl	8000298 <__aeabi_dsub>
 800c482:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c486:	4656      	mov	r6, sl
 800c488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c48c:	f7f4 fb6c 	bl	8000b68 <__aeabi_d2iz>
 800c490:	4605      	mov	r5, r0
 800c492:	f7f4 f84f 	bl	8000534 <__aeabi_i2d>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c49e:	f7f3 fefb 	bl	8000298 <__aeabi_dsub>
 800c4a2:	3530      	adds	r5, #48	@ 0x30
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4ac:	f806 5b01 	strb.w	r5, [r6], #1
 800c4b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4b4:	f7f4 fb1a 	bl	8000aec <__aeabi_dcmplt>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d172      	bne.n	800c5a2 <_dtoa_r+0x622>
 800c4bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4c0:	4911      	ldr	r1, [pc, #68]	@ (800c508 <_dtoa_r+0x588>)
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	f7f3 fee8 	bl	8000298 <__aeabi_dsub>
 800c4c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c4cc:	f7f4 fb0e 	bl	8000aec <__aeabi_dcmplt>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	f040 80b4 	bne.w	800c63e <_dtoa_r+0x6be>
 800c4d6:	42a6      	cmp	r6, r4
 800c4d8:	f43f af70 	beq.w	800c3bc <_dtoa_r+0x43c>
 800c4dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800c50c <_dtoa_r+0x58c>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f7f4 f890 	bl	8000608 <__aeabi_dmul>
 800c4e8:	4b08      	ldr	r3, [pc, #32]	@ (800c50c <_dtoa_r+0x58c>)
 800c4ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4f4:	f7f4 f888 	bl	8000608 <__aeabi_dmul>
 800c4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4fc:	e7c4      	b.n	800c488 <_dtoa_r+0x508>
 800c4fe:	bf00      	nop
 800c500:	0800fdb0 	.word	0x0800fdb0
 800c504:	0800fd88 	.word	0x0800fd88
 800c508:	3ff00000 	.word	0x3ff00000
 800c50c:	40240000 	.word	0x40240000
 800c510:	401c0000 	.word	0x401c0000
 800c514:	40140000 	.word	0x40140000
 800c518:	3fe00000 	.word	0x3fe00000
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	f7f4 f872 	bl	8000608 <__aeabi_dmul>
 800c524:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c528:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c52a:	4656      	mov	r6, sl
 800c52c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c530:	f7f4 fb1a 	bl	8000b68 <__aeabi_d2iz>
 800c534:	4605      	mov	r5, r0
 800c536:	f7f3 fffd 	bl	8000534 <__aeabi_i2d>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c542:	f7f3 fea9 	bl	8000298 <__aeabi_dsub>
 800c546:	3530      	adds	r5, #48	@ 0x30
 800c548:	f806 5b01 	strb.w	r5, [r6], #1
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	42a6      	cmp	r6, r4
 800c552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c556:	f04f 0200 	mov.w	r2, #0
 800c55a:	d124      	bne.n	800c5a6 <_dtoa_r+0x626>
 800c55c:	4baf      	ldr	r3, [pc, #700]	@ (800c81c <_dtoa_r+0x89c>)
 800c55e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c562:	f7f3 fe9b 	bl	800029c <__adddf3>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c56e:	f7f4 fadb 	bl	8000b28 <__aeabi_dcmpgt>
 800c572:	2800      	cmp	r0, #0
 800c574:	d163      	bne.n	800c63e <_dtoa_r+0x6be>
 800c576:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c57a:	49a8      	ldr	r1, [pc, #672]	@ (800c81c <_dtoa_r+0x89c>)
 800c57c:	2000      	movs	r0, #0
 800c57e:	f7f3 fe8b 	bl	8000298 <__aeabi_dsub>
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c58a:	f7f4 faaf 	bl	8000aec <__aeabi_dcmplt>
 800c58e:	2800      	cmp	r0, #0
 800c590:	f43f af14 	beq.w	800c3bc <_dtoa_r+0x43c>
 800c594:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c596:	1e73      	subs	r3, r6, #1
 800c598:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c59a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c59e:	2b30      	cmp	r3, #48	@ 0x30
 800c5a0:	d0f8      	beq.n	800c594 <_dtoa_r+0x614>
 800c5a2:	4647      	mov	r7, r8
 800c5a4:	e03b      	b.n	800c61e <_dtoa_r+0x69e>
 800c5a6:	4b9e      	ldr	r3, [pc, #632]	@ (800c820 <_dtoa_r+0x8a0>)
 800c5a8:	f7f4 f82e 	bl	8000608 <__aeabi_dmul>
 800c5ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5b0:	e7bc      	b.n	800c52c <_dtoa_r+0x5ac>
 800c5b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c5b6:	4656      	mov	r6, sl
 800c5b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f7f4 f94c 	bl	800085c <__aeabi_ddiv>
 800c5c4:	f7f4 fad0 	bl	8000b68 <__aeabi_d2iz>
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	f7f3 ffb3 	bl	8000534 <__aeabi_i2d>
 800c5ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5d2:	f7f4 f819 	bl	8000608 <__aeabi_dmul>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c5e2:	f7f3 fe59 	bl	8000298 <__aeabi_dsub>
 800c5e6:	f806 4b01 	strb.w	r4, [r6], #1
 800c5ea:	9d03      	ldr	r5, [sp, #12]
 800c5ec:	eba6 040a 	sub.w	r4, r6, sl
 800c5f0:	42a5      	cmp	r5, r4
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	d133      	bne.n	800c660 <_dtoa_r+0x6e0>
 800c5f8:	f7f3 fe50 	bl	800029c <__adddf3>
 800c5fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c600:	4604      	mov	r4, r0
 800c602:	460d      	mov	r5, r1
 800c604:	f7f4 fa90 	bl	8000b28 <__aeabi_dcmpgt>
 800c608:	b9c0      	cbnz	r0, 800c63c <_dtoa_r+0x6bc>
 800c60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c60e:	4620      	mov	r0, r4
 800c610:	4629      	mov	r1, r5
 800c612:	f7f4 fa61 	bl	8000ad8 <__aeabi_dcmpeq>
 800c616:	b110      	cbz	r0, 800c61e <_dtoa_r+0x69e>
 800c618:	f018 0f01 	tst.w	r8, #1
 800c61c:	d10e      	bne.n	800c63c <_dtoa_r+0x6bc>
 800c61e:	9902      	ldr	r1, [sp, #8]
 800c620:	4648      	mov	r0, r9
 800c622:	f000 fbbd 	bl	800cda0 <_Bfree>
 800c626:	2300      	movs	r3, #0
 800c628:	7033      	strb	r3, [r6, #0]
 800c62a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c62c:	3701      	adds	r7, #1
 800c62e:	601f      	str	r7, [r3, #0]
 800c630:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 824b 	beq.w	800cace <_dtoa_r+0xb4e>
 800c638:	601e      	str	r6, [r3, #0]
 800c63a:	e248      	b.n	800cace <_dtoa_r+0xb4e>
 800c63c:	46b8      	mov	r8, r7
 800c63e:	4633      	mov	r3, r6
 800c640:	461e      	mov	r6, r3
 800c642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c646:	2a39      	cmp	r2, #57	@ 0x39
 800c648:	d106      	bne.n	800c658 <_dtoa_r+0x6d8>
 800c64a:	459a      	cmp	sl, r3
 800c64c:	d1f8      	bne.n	800c640 <_dtoa_r+0x6c0>
 800c64e:	2230      	movs	r2, #48	@ 0x30
 800c650:	f108 0801 	add.w	r8, r8, #1
 800c654:	f88a 2000 	strb.w	r2, [sl]
 800c658:	781a      	ldrb	r2, [r3, #0]
 800c65a:	3201      	adds	r2, #1
 800c65c:	701a      	strb	r2, [r3, #0]
 800c65e:	e7a0      	b.n	800c5a2 <_dtoa_r+0x622>
 800c660:	4b6f      	ldr	r3, [pc, #444]	@ (800c820 <_dtoa_r+0x8a0>)
 800c662:	2200      	movs	r2, #0
 800c664:	f7f3 ffd0 	bl	8000608 <__aeabi_dmul>
 800c668:	2200      	movs	r2, #0
 800c66a:	2300      	movs	r3, #0
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	f7f4 fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 800c674:	2800      	cmp	r0, #0
 800c676:	d09f      	beq.n	800c5b8 <_dtoa_r+0x638>
 800c678:	e7d1      	b.n	800c61e <_dtoa_r+0x69e>
 800c67a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c67c:	2a00      	cmp	r2, #0
 800c67e:	f000 80ea 	beq.w	800c856 <_dtoa_r+0x8d6>
 800c682:	9a07      	ldr	r2, [sp, #28]
 800c684:	2a01      	cmp	r2, #1
 800c686:	f300 80cd 	bgt.w	800c824 <_dtoa_r+0x8a4>
 800c68a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c68c:	2a00      	cmp	r2, #0
 800c68e:	f000 80c1 	beq.w	800c814 <_dtoa_r+0x894>
 800c692:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c696:	9c08      	ldr	r4, [sp, #32]
 800c698:	9e00      	ldr	r6, [sp, #0]
 800c69a:	9a00      	ldr	r2, [sp, #0]
 800c69c:	441a      	add	r2, r3
 800c69e:	9200      	str	r2, [sp, #0]
 800c6a0:	9a06      	ldr	r2, [sp, #24]
 800c6a2:	2101      	movs	r1, #1
 800c6a4:	441a      	add	r2, r3
 800c6a6:	4648      	mov	r0, r9
 800c6a8:	9206      	str	r2, [sp, #24]
 800c6aa:	f000 fc2d 	bl	800cf08 <__i2b>
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	b166      	cbz	r6, 800c6cc <_dtoa_r+0x74c>
 800c6b2:	9b06      	ldr	r3, [sp, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd09      	ble.n	800c6cc <_dtoa_r+0x74c>
 800c6b8:	42b3      	cmp	r3, r6
 800c6ba:	9a00      	ldr	r2, [sp, #0]
 800c6bc:	bfa8      	it	ge
 800c6be:	4633      	movge	r3, r6
 800c6c0:	1ad2      	subs	r2, r2, r3
 800c6c2:	9200      	str	r2, [sp, #0]
 800c6c4:	9a06      	ldr	r2, [sp, #24]
 800c6c6:	1af6      	subs	r6, r6, r3
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	9306      	str	r3, [sp, #24]
 800c6cc:	9b08      	ldr	r3, [sp, #32]
 800c6ce:	b30b      	cbz	r3, 800c714 <_dtoa_r+0x794>
 800c6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 80c6 	beq.w	800c864 <_dtoa_r+0x8e4>
 800c6d8:	2c00      	cmp	r4, #0
 800c6da:	f000 80c0 	beq.w	800c85e <_dtoa_r+0x8de>
 800c6de:	4629      	mov	r1, r5
 800c6e0:	4622      	mov	r2, r4
 800c6e2:	4648      	mov	r0, r9
 800c6e4:	f000 fcc8 	bl	800d078 <__pow5mult>
 800c6e8:	9a02      	ldr	r2, [sp, #8]
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	4648      	mov	r0, r9
 800c6f0:	f000 fc20 	bl	800cf34 <__multiply>
 800c6f4:	9902      	ldr	r1, [sp, #8]
 800c6f6:	4680      	mov	r8, r0
 800c6f8:	4648      	mov	r0, r9
 800c6fa:	f000 fb51 	bl	800cda0 <_Bfree>
 800c6fe:	9b08      	ldr	r3, [sp, #32]
 800c700:	1b1b      	subs	r3, r3, r4
 800c702:	9308      	str	r3, [sp, #32]
 800c704:	f000 80b1 	beq.w	800c86a <_dtoa_r+0x8ea>
 800c708:	9a08      	ldr	r2, [sp, #32]
 800c70a:	4641      	mov	r1, r8
 800c70c:	4648      	mov	r0, r9
 800c70e:	f000 fcb3 	bl	800d078 <__pow5mult>
 800c712:	9002      	str	r0, [sp, #8]
 800c714:	2101      	movs	r1, #1
 800c716:	4648      	mov	r0, r9
 800c718:	f000 fbf6 	bl	800cf08 <__i2b>
 800c71c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c71e:	4604      	mov	r4, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 81d8 	beq.w	800cad6 <_dtoa_r+0xb56>
 800c726:	461a      	mov	r2, r3
 800c728:	4601      	mov	r1, r0
 800c72a:	4648      	mov	r0, r9
 800c72c:	f000 fca4 	bl	800d078 <__pow5mult>
 800c730:	9b07      	ldr	r3, [sp, #28]
 800c732:	2b01      	cmp	r3, #1
 800c734:	4604      	mov	r4, r0
 800c736:	f300 809f 	bgt.w	800c878 <_dtoa_r+0x8f8>
 800c73a:	9b04      	ldr	r3, [sp, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f040 8097 	bne.w	800c870 <_dtoa_r+0x8f0>
 800c742:	9b05      	ldr	r3, [sp, #20]
 800c744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f040 8093 	bne.w	800c874 <_dtoa_r+0x8f4>
 800c74e:	9b05      	ldr	r3, [sp, #20]
 800c750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c754:	0d1b      	lsrs	r3, r3, #20
 800c756:	051b      	lsls	r3, r3, #20
 800c758:	b133      	cbz	r3, 800c768 <_dtoa_r+0x7e8>
 800c75a:	9b00      	ldr	r3, [sp, #0]
 800c75c:	3301      	adds	r3, #1
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	9b06      	ldr	r3, [sp, #24]
 800c762:	3301      	adds	r3, #1
 800c764:	9306      	str	r3, [sp, #24]
 800c766:	2301      	movs	r3, #1
 800c768:	9308      	str	r3, [sp, #32]
 800c76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f000 81b8 	beq.w	800cae2 <_dtoa_r+0xb62>
 800c772:	6923      	ldr	r3, [r4, #16]
 800c774:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c778:	6918      	ldr	r0, [r3, #16]
 800c77a:	f000 fb79 	bl	800ce70 <__hi0bits>
 800c77e:	f1c0 0020 	rsb	r0, r0, #32
 800c782:	9b06      	ldr	r3, [sp, #24]
 800c784:	4418      	add	r0, r3
 800c786:	f010 001f 	ands.w	r0, r0, #31
 800c78a:	f000 8082 	beq.w	800c892 <_dtoa_r+0x912>
 800c78e:	f1c0 0320 	rsb	r3, r0, #32
 800c792:	2b04      	cmp	r3, #4
 800c794:	dd73      	ble.n	800c87e <_dtoa_r+0x8fe>
 800c796:	9b00      	ldr	r3, [sp, #0]
 800c798:	f1c0 001c 	rsb	r0, r0, #28
 800c79c:	4403      	add	r3, r0
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	9b06      	ldr	r3, [sp, #24]
 800c7a2:	4403      	add	r3, r0
 800c7a4:	4406      	add	r6, r0
 800c7a6:	9306      	str	r3, [sp, #24]
 800c7a8:	9b00      	ldr	r3, [sp, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	dd05      	ble.n	800c7ba <_dtoa_r+0x83a>
 800c7ae:	9902      	ldr	r1, [sp, #8]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	4648      	mov	r0, r9
 800c7b4:	f000 fcba 	bl	800d12c <__lshift>
 800c7b8:	9002      	str	r0, [sp, #8]
 800c7ba:	9b06      	ldr	r3, [sp, #24]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dd05      	ble.n	800c7cc <_dtoa_r+0x84c>
 800c7c0:	4621      	mov	r1, r4
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	4648      	mov	r0, r9
 800c7c6:	f000 fcb1 	bl	800d12c <__lshift>
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d061      	beq.n	800c896 <_dtoa_r+0x916>
 800c7d2:	9802      	ldr	r0, [sp, #8]
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f000 fd15 	bl	800d204 <__mcmp>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	da5b      	bge.n	800c896 <_dtoa_r+0x916>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	9902      	ldr	r1, [sp, #8]
 800c7e2:	220a      	movs	r2, #10
 800c7e4:	4648      	mov	r0, r9
 800c7e6:	f000 fafd 	bl	800cde4 <__multadd>
 800c7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ec:	9002      	str	r0, [sp, #8]
 800c7ee:	f107 38ff 	add.w	r8, r7, #4294967295
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 8177 	beq.w	800cae6 <_dtoa_r+0xb66>
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	220a      	movs	r2, #10
 800c7fe:	4648      	mov	r0, r9
 800c800:	f000 faf0 	bl	800cde4 <__multadd>
 800c804:	f1bb 0f00 	cmp.w	fp, #0
 800c808:	4605      	mov	r5, r0
 800c80a:	dc6f      	bgt.n	800c8ec <_dtoa_r+0x96c>
 800c80c:	9b07      	ldr	r3, [sp, #28]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	dc49      	bgt.n	800c8a6 <_dtoa_r+0x926>
 800c812:	e06b      	b.n	800c8ec <_dtoa_r+0x96c>
 800c814:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c816:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c81a:	e73c      	b.n	800c696 <_dtoa_r+0x716>
 800c81c:	3fe00000 	.word	0x3fe00000
 800c820:	40240000 	.word	0x40240000
 800c824:	9b03      	ldr	r3, [sp, #12]
 800c826:	1e5c      	subs	r4, r3, #1
 800c828:	9b08      	ldr	r3, [sp, #32]
 800c82a:	42a3      	cmp	r3, r4
 800c82c:	db09      	blt.n	800c842 <_dtoa_r+0x8c2>
 800c82e:	1b1c      	subs	r4, r3, r4
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	f6bf af30 	bge.w	800c698 <_dtoa_r+0x718>
 800c838:	9b00      	ldr	r3, [sp, #0]
 800c83a:	9a03      	ldr	r2, [sp, #12]
 800c83c:	1a9e      	subs	r6, r3, r2
 800c83e:	2300      	movs	r3, #0
 800c840:	e72b      	b.n	800c69a <_dtoa_r+0x71a>
 800c842:	9b08      	ldr	r3, [sp, #32]
 800c844:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c846:	9408      	str	r4, [sp, #32]
 800c848:	1ae3      	subs	r3, r4, r3
 800c84a:	441a      	add	r2, r3
 800c84c:	9e00      	ldr	r6, [sp, #0]
 800c84e:	9b03      	ldr	r3, [sp, #12]
 800c850:	920d      	str	r2, [sp, #52]	@ 0x34
 800c852:	2400      	movs	r4, #0
 800c854:	e721      	b.n	800c69a <_dtoa_r+0x71a>
 800c856:	9c08      	ldr	r4, [sp, #32]
 800c858:	9e00      	ldr	r6, [sp, #0]
 800c85a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c85c:	e728      	b.n	800c6b0 <_dtoa_r+0x730>
 800c85e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c862:	e751      	b.n	800c708 <_dtoa_r+0x788>
 800c864:	9a08      	ldr	r2, [sp, #32]
 800c866:	9902      	ldr	r1, [sp, #8]
 800c868:	e750      	b.n	800c70c <_dtoa_r+0x78c>
 800c86a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c86e:	e751      	b.n	800c714 <_dtoa_r+0x794>
 800c870:	2300      	movs	r3, #0
 800c872:	e779      	b.n	800c768 <_dtoa_r+0x7e8>
 800c874:	9b04      	ldr	r3, [sp, #16]
 800c876:	e777      	b.n	800c768 <_dtoa_r+0x7e8>
 800c878:	2300      	movs	r3, #0
 800c87a:	9308      	str	r3, [sp, #32]
 800c87c:	e779      	b.n	800c772 <_dtoa_r+0x7f2>
 800c87e:	d093      	beq.n	800c7a8 <_dtoa_r+0x828>
 800c880:	9a00      	ldr	r2, [sp, #0]
 800c882:	331c      	adds	r3, #28
 800c884:	441a      	add	r2, r3
 800c886:	9200      	str	r2, [sp, #0]
 800c888:	9a06      	ldr	r2, [sp, #24]
 800c88a:	441a      	add	r2, r3
 800c88c:	441e      	add	r6, r3
 800c88e:	9206      	str	r2, [sp, #24]
 800c890:	e78a      	b.n	800c7a8 <_dtoa_r+0x828>
 800c892:	4603      	mov	r3, r0
 800c894:	e7f4      	b.n	800c880 <_dtoa_r+0x900>
 800c896:	9b03      	ldr	r3, [sp, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	46b8      	mov	r8, r7
 800c89c:	dc20      	bgt.n	800c8e0 <_dtoa_r+0x960>
 800c89e:	469b      	mov	fp, r3
 800c8a0:	9b07      	ldr	r3, [sp, #28]
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	dd1e      	ble.n	800c8e4 <_dtoa_r+0x964>
 800c8a6:	f1bb 0f00 	cmp.w	fp, #0
 800c8aa:	f47f adb1 	bne.w	800c410 <_dtoa_r+0x490>
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	465b      	mov	r3, fp
 800c8b2:	2205      	movs	r2, #5
 800c8b4:	4648      	mov	r0, r9
 800c8b6:	f000 fa95 	bl	800cde4 <__multadd>
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	4604      	mov	r4, r0
 800c8be:	9802      	ldr	r0, [sp, #8]
 800c8c0:	f000 fca0 	bl	800d204 <__mcmp>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f77f ada3 	ble.w	800c410 <_dtoa_r+0x490>
 800c8ca:	4656      	mov	r6, sl
 800c8cc:	2331      	movs	r3, #49	@ 0x31
 800c8ce:	f806 3b01 	strb.w	r3, [r6], #1
 800c8d2:	f108 0801 	add.w	r8, r8, #1
 800c8d6:	e59f      	b.n	800c418 <_dtoa_r+0x498>
 800c8d8:	9c03      	ldr	r4, [sp, #12]
 800c8da:	46b8      	mov	r8, r7
 800c8dc:	4625      	mov	r5, r4
 800c8de:	e7f4      	b.n	800c8ca <_dtoa_r+0x94a>
 800c8e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c8e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 8101 	beq.w	800caee <_dtoa_r+0xb6e>
 800c8ec:	2e00      	cmp	r6, #0
 800c8ee:	dd05      	ble.n	800c8fc <_dtoa_r+0x97c>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	4632      	mov	r2, r6
 800c8f4:	4648      	mov	r0, r9
 800c8f6:	f000 fc19 	bl	800d12c <__lshift>
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	9b08      	ldr	r3, [sp, #32]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d05c      	beq.n	800c9bc <_dtoa_r+0xa3c>
 800c902:	6869      	ldr	r1, [r5, #4]
 800c904:	4648      	mov	r0, r9
 800c906:	f000 fa0b 	bl	800cd20 <_Balloc>
 800c90a:	4606      	mov	r6, r0
 800c90c:	b928      	cbnz	r0, 800c91a <_dtoa_r+0x99a>
 800c90e:	4b82      	ldr	r3, [pc, #520]	@ (800cb18 <_dtoa_r+0xb98>)
 800c910:	4602      	mov	r2, r0
 800c912:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c916:	f7ff bb4a 	b.w	800bfae <_dtoa_r+0x2e>
 800c91a:	692a      	ldr	r2, [r5, #16]
 800c91c:	3202      	adds	r2, #2
 800c91e:	0092      	lsls	r2, r2, #2
 800c920:	f105 010c 	add.w	r1, r5, #12
 800c924:	300c      	adds	r0, #12
 800c926:	f000 ffa3 	bl	800d870 <memcpy>
 800c92a:	2201      	movs	r2, #1
 800c92c:	4631      	mov	r1, r6
 800c92e:	4648      	mov	r0, r9
 800c930:	f000 fbfc 	bl	800d12c <__lshift>
 800c934:	f10a 0301 	add.w	r3, sl, #1
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	eb0a 030b 	add.w	r3, sl, fp
 800c93e:	9308      	str	r3, [sp, #32]
 800c940:	9b04      	ldr	r3, [sp, #16]
 800c942:	f003 0301 	and.w	r3, r3, #1
 800c946:	462f      	mov	r7, r5
 800c948:	9306      	str	r3, [sp, #24]
 800c94a:	4605      	mov	r5, r0
 800c94c:	9b00      	ldr	r3, [sp, #0]
 800c94e:	9802      	ldr	r0, [sp, #8]
 800c950:	4621      	mov	r1, r4
 800c952:	f103 3bff 	add.w	fp, r3, #4294967295
 800c956:	f7ff fa88 	bl	800be6a <quorem>
 800c95a:	4603      	mov	r3, r0
 800c95c:	3330      	adds	r3, #48	@ 0x30
 800c95e:	9003      	str	r0, [sp, #12]
 800c960:	4639      	mov	r1, r7
 800c962:	9802      	ldr	r0, [sp, #8]
 800c964:	9309      	str	r3, [sp, #36]	@ 0x24
 800c966:	f000 fc4d 	bl	800d204 <__mcmp>
 800c96a:	462a      	mov	r2, r5
 800c96c:	9004      	str	r0, [sp, #16]
 800c96e:	4621      	mov	r1, r4
 800c970:	4648      	mov	r0, r9
 800c972:	f000 fc63 	bl	800d23c <__mdiff>
 800c976:	68c2      	ldr	r2, [r0, #12]
 800c978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97a:	4606      	mov	r6, r0
 800c97c:	bb02      	cbnz	r2, 800c9c0 <_dtoa_r+0xa40>
 800c97e:	4601      	mov	r1, r0
 800c980:	9802      	ldr	r0, [sp, #8]
 800c982:	f000 fc3f 	bl	800d204 <__mcmp>
 800c986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c988:	4602      	mov	r2, r0
 800c98a:	4631      	mov	r1, r6
 800c98c:	4648      	mov	r0, r9
 800c98e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c990:	9309      	str	r3, [sp, #36]	@ 0x24
 800c992:	f000 fa05 	bl	800cda0 <_Bfree>
 800c996:	9b07      	ldr	r3, [sp, #28]
 800c998:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c99a:	9e00      	ldr	r6, [sp, #0]
 800c99c:	ea42 0103 	orr.w	r1, r2, r3
 800c9a0:	9b06      	ldr	r3, [sp, #24]
 800c9a2:	4319      	orrs	r1, r3
 800c9a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a6:	d10d      	bne.n	800c9c4 <_dtoa_r+0xa44>
 800c9a8:	2b39      	cmp	r3, #57	@ 0x39
 800c9aa:	d027      	beq.n	800c9fc <_dtoa_r+0xa7c>
 800c9ac:	9a04      	ldr	r2, [sp, #16]
 800c9ae:	2a00      	cmp	r2, #0
 800c9b0:	dd01      	ble.n	800c9b6 <_dtoa_r+0xa36>
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	3331      	adds	r3, #49	@ 0x31
 800c9b6:	f88b 3000 	strb.w	r3, [fp]
 800c9ba:	e52e      	b.n	800c41a <_dtoa_r+0x49a>
 800c9bc:	4628      	mov	r0, r5
 800c9be:	e7b9      	b.n	800c934 <_dtoa_r+0x9b4>
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	e7e2      	b.n	800c98a <_dtoa_r+0xa0a>
 800c9c4:	9904      	ldr	r1, [sp, #16]
 800c9c6:	2900      	cmp	r1, #0
 800c9c8:	db04      	blt.n	800c9d4 <_dtoa_r+0xa54>
 800c9ca:	9807      	ldr	r0, [sp, #28]
 800c9cc:	4301      	orrs	r1, r0
 800c9ce:	9806      	ldr	r0, [sp, #24]
 800c9d0:	4301      	orrs	r1, r0
 800c9d2:	d120      	bne.n	800ca16 <_dtoa_r+0xa96>
 800c9d4:	2a00      	cmp	r2, #0
 800c9d6:	ddee      	ble.n	800c9b6 <_dtoa_r+0xa36>
 800c9d8:	9902      	ldr	r1, [sp, #8]
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	4648      	mov	r0, r9
 800c9e0:	f000 fba4 	bl	800d12c <__lshift>
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	9002      	str	r0, [sp, #8]
 800c9e8:	f000 fc0c 	bl	800d204 <__mcmp>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	9b00      	ldr	r3, [sp, #0]
 800c9f0:	dc02      	bgt.n	800c9f8 <_dtoa_r+0xa78>
 800c9f2:	d1e0      	bne.n	800c9b6 <_dtoa_r+0xa36>
 800c9f4:	07da      	lsls	r2, r3, #31
 800c9f6:	d5de      	bpl.n	800c9b6 <_dtoa_r+0xa36>
 800c9f8:	2b39      	cmp	r3, #57	@ 0x39
 800c9fa:	d1da      	bne.n	800c9b2 <_dtoa_r+0xa32>
 800c9fc:	2339      	movs	r3, #57	@ 0x39
 800c9fe:	f88b 3000 	strb.w	r3, [fp]
 800ca02:	4633      	mov	r3, r6
 800ca04:	461e      	mov	r6, r3
 800ca06:	3b01      	subs	r3, #1
 800ca08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ca0c:	2a39      	cmp	r2, #57	@ 0x39
 800ca0e:	d04e      	beq.n	800caae <_dtoa_r+0xb2e>
 800ca10:	3201      	adds	r2, #1
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	e501      	b.n	800c41a <_dtoa_r+0x49a>
 800ca16:	2a00      	cmp	r2, #0
 800ca18:	dd03      	ble.n	800ca22 <_dtoa_r+0xaa2>
 800ca1a:	2b39      	cmp	r3, #57	@ 0x39
 800ca1c:	d0ee      	beq.n	800c9fc <_dtoa_r+0xa7c>
 800ca1e:	3301      	adds	r3, #1
 800ca20:	e7c9      	b.n	800c9b6 <_dtoa_r+0xa36>
 800ca22:	9a00      	ldr	r2, [sp, #0]
 800ca24:	9908      	ldr	r1, [sp, #32]
 800ca26:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ca2a:	428a      	cmp	r2, r1
 800ca2c:	d028      	beq.n	800ca80 <_dtoa_r+0xb00>
 800ca2e:	9902      	ldr	r1, [sp, #8]
 800ca30:	2300      	movs	r3, #0
 800ca32:	220a      	movs	r2, #10
 800ca34:	4648      	mov	r0, r9
 800ca36:	f000 f9d5 	bl	800cde4 <__multadd>
 800ca3a:	42af      	cmp	r7, r5
 800ca3c:	9002      	str	r0, [sp, #8]
 800ca3e:	f04f 0300 	mov.w	r3, #0
 800ca42:	f04f 020a 	mov.w	r2, #10
 800ca46:	4639      	mov	r1, r7
 800ca48:	4648      	mov	r0, r9
 800ca4a:	d107      	bne.n	800ca5c <_dtoa_r+0xadc>
 800ca4c:	f000 f9ca 	bl	800cde4 <__multadd>
 800ca50:	4607      	mov	r7, r0
 800ca52:	4605      	mov	r5, r0
 800ca54:	9b00      	ldr	r3, [sp, #0]
 800ca56:	3301      	adds	r3, #1
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	e777      	b.n	800c94c <_dtoa_r+0x9cc>
 800ca5c:	f000 f9c2 	bl	800cde4 <__multadd>
 800ca60:	4629      	mov	r1, r5
 800ca62:	4607      	mov	r7, r0
 800ca64:	2300      	movs	r3, #0
 800ca66:	220a      	movs	r2, #10
 800ca68:	4648      	mov	r0, r9
 800ca6a:	f000 f9bb 	bl	800cde4 <__multadd>
 800ca6e:	4605      	mov	r5, r0
 800ca70:	e7f0      	b.n	800ca54 <_dtoa_r+0xad4>
 800ca72:	f1bb 0f00 	cmp.w	fp, #0
 800ca76:	bfcc      	ite	gt
 800ca78:	465e      	movgt	r6, fp
 800ca7a:	2601      	movle	r6, #1
 800ca7c:	4456      	add	r6, sl
 800ca7e:	2700      	movs	r7, #0
 800ca80:	9902      	ldr	r1, [sp, #8]
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	2201      	movs	r2, #1
 800ca86:	4648      	mov	r0, r9
 800ca88:	f000 fb50 	bl	800d12c <__lshift>
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	9002      	str	r0, [sp, #8]
 800ca90:	f000 fbb8 	bl	800d204 <__mcmp>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	dcb4      	bgt.n	800ca02 <_dtoa_r+0xa82>
 800ca98:	d102      	bne.n	800caa0 <_dtoa_r+0xb20>
 800ca9a:	9b00      	ldr	r3, [sp, #0]
 800ca9c:	07db      	lsls	r3, r3, #31
 800ca9e:	d4b0      	bmi.n	800ca02 <_dtoa_r+0xa82>
 800caa0:	4633      	mov	r3, r6
 800caa2:	461e      	mov	r6, r3
 800caa4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800caa8:	2a30      	cmp	r2, #48	@ 0x30
 800caaa:	d0fa      	beq.n	800caa2 <_dtoa_r+0xb22>
 800caac:	e4b5      	b.n	800c41a <_dtoa_r+0x49a>
 800caae:	459a      	cmp	sl, r3
 800cab0:	d1a8      	bne.n	800ca04 <_dtoa_r+0xa84>
 800cab2:	2331      	movs	r3, #49	@ 0x31
 800cab4:	f108 0801 	add.w	r8, r8, #1
 800cab8:	f88a 3000 	strb.w	r3, [sl]
 800cabc:	e4ad      	b.n	800c41a <_dtoa_r+0x49a>
 800cabe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cac0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cb1c <_dtoa_r+0xb9c>
 800cac4:	b11b      	cbz	r3, 800cace <_dtoa_r+0xb4e>
 800cac6:	f10a 0308 	add.w	r3, sl, #8
 800caca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	4650      	mov	r0, sl
 800cad0:	b017      	add	sp, #92	@ 0x5c
 800cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad6:	9b07      	ldr	r3, [sp, #28]
 800cad8:	2b01      	cmp	r3, #1
 800cada:	f77f ae2e 	ble.w	800c73a <_dtoa_r+0x7ba>
 800cade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cae0:	9308      	str	r3, [sp, #32]
 800cae2:	2001      	movs	r0, #1
 800cae4:	e64d      	b.n	800c782 <_dtoa_r+0x802>
 800cae6:	f1bb 0f00 	cmp.w	fp, #0
 800caea:	f77f aed9 	ble.w	800c8a0 <_dtoa_r+0x920>
 800caee:	4656      	mov	r6, sl
 800caf0:	9802      	ldr	r0, [sp, #8]
 800caf2:	4621      	mov	r1, r4
 800caf4:	f7ff f9b9 	bl	800be6a <quorem>
 800caf8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cafc:	f806 3b01 	strb.w	r3, [r6], #1
 800cb00:	eba6 020a 	sub.w	r2, r6, sl
 800cb04:	4593      	cmp	fp, r2
 800cb06:	ddb4      	ble.n	800ca72 <_dtoa_r+0xaf2>
 800cb08:	9902      	ldr	r1, [sp, #8]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	220a      	movs	r2, #10
 800cb0e:	4648      	mov	r0, r9
 800cb10:	f000 f968 	bl	800cde4 <__multadd>
 800cb14:	9002      	str	r0, [sp, #8]
 800cb16:	e7eb      	b.n	800caf0 <_dtoa_r+0xb70>
 800cb18:	0800fcb4 	.word	0x0800fcb4
 800cb1c:	0800fc38 	.word	0x0800fc38

0800cb20 <_free_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	4605      	mov	r5, r0
 800cb24:	2900      	cmp	r1, #0
 800cb26:	d041      	beq.n	800cbac <_free_r+0x8c>
 800cb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb2c:	1f0c      	subs	r4, r1, #4
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	bfb8      	it	lt
 800cb32:	18e4      	addlt	r4, r4, r3
 800cb34:	f000 f8e8 	bl	800cd08 <__malloc_lock>
 800cb38:	4a1d      	ldr	r2, [pc, #116]	@ (800cbb0 <_free_r+0x90>)
 800cb3a:	6813      	ldr	r3, [r2, #0]
 800cb3c:	b933      	cbnz	r3, 800cb4c <_free_r+0x2c>
 800cb3e:	6063      	str	r3, [r4, #4]
 800cb40:	6014      	str	r4, [r2, #0]
 800cb42:	4628      	mov	r0, r5
 800cb44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb48:	f000 b8e4 	b.w	800cd14 <__malloc_unlock>
 800cb4c:	42a3      	cmp	r3, r4
 800cb4e:	d908      	bls.n	800cb62 <_free_r+0x42>
 800cb50:	6820      	ldr	r0, [r4, #0]
 800cb52:	1821      	adds	r1, r4, r0
 800cb54:	428b      	cmp	r3, r1
 800cb56:	bf01      	itttt	eq
 800cb58:	6819      	ldreq	r1, [r3, #0]
 800cb5a:	685b      	ldreq	r3, [r3, #4]
 800cb5c:	1809      	addeq	r1, r1, r0
 800cb5e:	6021      	streq	r1, [r4, #0]
 800cb60:	e7ed      	b.n	800cb3e <_free_r+0x1e>
 800cb62:	461a      	mov	r2, r3
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	b10b      	cbz	r3, 800cb6c <_free_r+0x4c>
 800cb68:	42a3      	cmp	r3, r4
 800cb6a:	d9fa      	bls.n	800cb62 <_free_r+0x42>
 800cb6c:	6811      	ldr	r1, [r2, #0]
 800cb6e:	1850      	adds	r0, r2, r1
 800cb70:	42a0      	cmp	r0, r4
 800cb72:	d10b      	bne.n	800cb8c <_free_r+0x6c>
 800cb74:	6820      	ldr	r0, [r4, #0]
 800cb76:	4401      	add	r1, r0
 800cb78:	1850      	adds	r0, r2, r1
 800cb7a:	4283      	cmp	r3, r0
 800cb7c:	6011      	str	r1, [r2, #0]
 800cb7e:	d1e0      	bne.n	800cb42 <_free_r+0x22>
 800cb80:	6818      	ldr	r0, [r3, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	6053      	str	r3, [r2, #4]
 800cb86:	4408      	add	r0, r1
 800cb88:	6010      	str	r0, [r2, #0]
 800cb8a:	e7da      	b.n	800cb42 <_free_r+0x22>
 800cb8c:	d902      	bls.n	800cb94 <_free_r+0x74>
 800cb8e:	230c      	movs	r3, #12
 800cb90:	602b      	str	r3, [r5, #0]
 800cb92:	e7d6      	b.n	800cb42 <_free_r+0x22>
 800cb94:	6820      	ldr	r0, [r4, #0]
 800cb96:	1821      	adds	r1, r4, r0
 800cb98:	428b      	cmp	r3, r1
 800cb9a:	bf04      	itt	eq
 800cb9c:	6819      	ldreq	r1, [r3, #0]
 800cb9e:	685b      	ldreq	r3, [r3, #4]
 800cba0:	6063      	str	r3, [r4, #4]
 800cba2:	bf04      	itt	eq
 800cba4:	1809      	addeq	r1, r1, r0
 800cba6:	6021      	streq	r1, [r4, #0]
 800cba8:	6054      	str	r4, [r2, #4]
 800cbaa:	e7ca      	b.n	800cb42 <_free_r+0x22>
 800cbac:	bd38      	pop	{r3, r4, r5, pc}
 800cbae:	bf00      	nop
 800cbb0:	20000a98 	.word	0x20000a98

0800cbb4 <malloc>:
 800cbb4:	4b02      	ldr	r3, [pc, #8]	@ (800cbc0 <malloc+0xc>)
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	f000 b825 	b.w	800cc08 <_malloc_r>
 800cbbe:	bf00      	nop
 800cbc0:	20000044 	.word	0x20000044

0800cbc4 <sbrk_aligned>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	4e0f      	ldr	r6, [pc, #60]	@ (800cc04 <sbrk_aligned+0x40>)
 800cbc8:	460c      	mov	r4, r1
 800cbca:	6831      	ldr	r1, [r6, #0]
 800cbcc:	4605      	mov	r5, r0
 800cbce:	b911      	cbnz	r1, 800cbd6 <sbrk_aligned+0x12>
 800cbd0:	f000 fe3e 	bl	800d850 <_sbrk_r>
 800cbd4:	6030      	str	r0, [r6, #0]
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	4628      	mov	r0, r5
 800cbda:	f000 fe39 	bl	800d850 <_sbrk_r>
 800cbde:	1c43      	adds	r3, r0, #1
 800cbe0:	d103      	bne.n	800cbea <sbrk_aligned+0x26>
 800cbe2:	f04f 34ff 	mov.w	r4, #4294967295
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	bd70      	pop	{r4, r5, r6, pc}
 800cbea:	1cc4      	adds	r4, r0, #3
 800cbec:	f024 0403 	bic.w	r4, r4, #3
 800cbf0:	42a0      	cmp	r0, r4
 800cbf2:	d0f8      	beq.n	800cbe6 <sbrk_aligned+0x22>
 800cbf4:	1a21      	subs	r1, r4, r0
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f000 fe2a 	bl	800d850 <_sbrk_r>
 800cbfc:	3001      	adds	r0, #1
 800cbfe:	d1f2      	bne.n	800cbe6 <sbrk_aligned+0x22>
 800cc00:	e7ef      	b.n	800cbe2 <sbrk_aligned+0x1e>
 800cc02:	bf00      	nop
 800cc04:	20000a94 	.word	0x20000a94

0800cc08 <_malloc_r>:
 800cc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc0c:	1ccd      	adds	r5, r1, #3
 800cc0e:	f025 0503 	bic.w	r5, r5, #3
 800cc12:	3508      	adds	r5, #8
 800cc14:	2d0c      	cmp	r5, #12
 800cc16:	bf38      	it	cc
 800cc18:	250c      	movcc	r5, #12
 800cc1a:	2d00      	cmp	r5, #0
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	db01      	blt.n	800cc24 <_malloc_r+0x1c>
 800cc20:	42a9      	cmp	r1, r5
 800cc22:	d904      	bls.n	800cc2e <_malloc_r+0x26>
 800cc24:	230c      	movs	r3, #12
 800cc26:	6033      	str	r3, [r6, #0]
 800cc28:	2000      	movs	r0, #0
 800cc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd04 <_malloc_r+0xfc>
 800cc32:	f000 f869 	bl	800cd08 <__malloc_lock>
 800cc36:	f8d8 3000 	ldr.w	r3, [r8]
 800cc3a:	461c      	mov	r4, r3
 800cc3c:	bb44      	cbnz	r4, 800cc90 <_malloc_r+0x88>
 800cc3e:	4629      	mov	r1, r5
 800cc40:	4630      	mov	r0, r6
 800cc42:	f7ff ffbf 	bl	800cbc4 <sbrk_aligned>
 800cc46:	1c43      	adds	r3, r0, #1
 800cc48:	4604      	mov	r4, r0
 800cc4a:	d158      	bne.n	800ccfe <_malloc_r+0xf6>
 800cc4c:	f8d8 4000 	ldr.w	r4, [r8]
 800cc50:	4627      	mov	r7, r4
 800cc52:	2f00      	cmp	r7, #0
 800cc54:	d143      	bne.n	800ccde <_malloc_r+0xd6>
 800cc56:	2c00      	cmp	r4, #0
 800cc58:	d04b      	beq.n	800ccf2 <_malloc_r+0xea>
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	4639      	mov	r1, r7
 800cc5e:	4630      	mov	r0, r6
 800cc60:	eb04 0903 	add.w	r9, r4, r3
 800cc64:	f000 fdf4 	bl	800d850 <_sbrk_r>
 800cc68:	4581      	cmp	r9, r0
 800cc6a:	d142      	bne.n	800ccf2 <_malloc_r+0xea>
 800cc6c:	6821      	ldr	r1, [r4, #0]
 800cc6e:	1a6d      	subs	r5, r5, r1
 800cc70:	4629      	mov	r1, r5
 800cc72:	4630      	mov	r0, r6
 800cc74:	f7ff ffa6 	bl	800cbc4 <sbrk_aligned>
 800cc78:	3001      	adds	r0, #1
 800cc7a:	d03a      	beq.n	800ccf2 <_malloc_r+0xea>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	442b      	add	r3, r5
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	f8d8 3000 	ldr.w	r3, [r8]
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	bb62      	cbnz	r2, 800cce4 <_malloc_r+0xdc>
 800cc8a:	f8c8 7000 	str.w	r7, [r8]
 800cc8e:	e00f      	b.n	800ccb0 <_malloc_r+0xa8>
 800cc90:	6822      	ldr	r2, [r4, #0]
 800cc92:	1b52      	subs	r2, r2, r5
 800cc94:	d420      	bmi.n	800ccd8 <_malloc_r+0xd0>
 800cc96:	2a0b      	cmp	r2, #11
 800cc98:	d917      	bls.n	800ccca <_malloc_r+0xc2>
 800cc9a:	1961      	adds	r1, r4, r5
 800cc9c:	42a3      	cmp	r3, r4
 800cc9e:	6025      	str	r5, [r4, #0]
 800cca0:	bf18      	it	ne
 800cca2:	6059      	strne	r1, [r3, #4]
 800cca4:	6863      	ldr	r3, [r4, #4]
 800cca6:	bf08      	it	eq
 800cca8:	f8c8 1000 	streq.w	r1, [r8]
 800ccac:	5162      	str	r2, [r4, r5]
 800ccae:	604b      	str	r3, [r1, #4]
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	f000 f82f 	bl	800cd14 <__malloc_unlock>
 800ccb6:	f104 000b 	add.w	r0, r4, #11
 800ccba:	1d23      	adds	r3, r4, #4
 800ccbc:	f020 0007 	bic.w	r0, r0, #7
 800ccc0:	1ac2      	subs	r2, r0, r3
 800ccc2:	bf1c      	itt	ne
 800ccc4:	1a1b      	subne	r3, r3, r0
 800ccc6:	50a3      	strne	r3, [r4, r2]
 800ccc8:	e7af      	b.n	800cc2a <_malloc_r+0x22>
 800ccca:	6862      	ldr	r2, [r4, #4]
 800cccc:	42a3      	cmp	r3, r4
 800ccce:	bf0c      	ite	eq
 800ccd0:	f8c8 2000 	streq.w	r2, [r8]
 800ccd4:	605a      	strne	r2, [r3, #4]
 800ccd6:	e7eb      	b.n	800ccb0 <_malloc_r+0xa8>
 800ccd8:	4623      	mov	r3, r4
 800ccda:	6864      	ldr	r4, [r4, #4]
 800ccdc:	e7ae      	b.n	800cc3c <_malloc_r+0x34>
 800ccde:	463c      	mov	r4, r7
 800cce0:	687f      	ldr	r7, [r7, #4]
 800cce2:	e7b6      	b.n	800cc52 <_malloc_r+0x4a>
 800cce4:	461a      	mov	r2, r3
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	42a3      	cmp	r3, r4
 800ccea:	d1fb      	bne.n	800cce4 <_malloc_r+0xdc>
 800ccec:	2300      	movs	r3, #0
 800ccee:	6053      	str	r3, [r2, #4]
 800ccf0:	e7de      	b.n	800ccb0 <_malloc_r+0xa8>
 800ccf2:	230c      	movs	r3, #12
 800ccf4:	6033      	str	r3, [r6, #0]
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	f000 f80c 	bl	800cd14 <__malloc_unlock>
 800ccfc:	e794      	b.n	800cc28 <_malloc_r+0x20>
 800ccfe:	6005      	str	r5, [r0, #0]
 800cd00:	e7d6      	b.n	800ccb0 <_malloc_r+0xa8>
 800cd02:	bf00      	nop
 800cd04:	20000a98 	.word	0x20000a98

0800cd08 <__malloc_lock>:
 800cd08:	4801      	ldr	r0, [pc, #4]	@ (800cd10 <__malloc_lock+0x8>)
 800cd0a:	f7ff b8ac 	b.w	800be66 <__retarget_lock_acquire_recursive>
 800cd0e:	bf00      	nop
 800cd10:	20000a90 	.word	0x20000a90

0800cd14 <__malloc_unlock>:
 800cd14:	4801      	ldr	r0, [pc, #4]	@ (800cd1c <__malloc_unlock+0x8>)
 800cd16:	f7ff b8a7 	b.w	800be68 <__retarget_lock_release_recursive>
 800cd1a:	bf00      	nop
 800cd1c:	20000a90 	.word	0x20000a90

0800cd20 <_Balloc>:
 800cd20:	b570      	push	{r4, r5, r6, lr}
 800cd22:	69c6      	ldr	r6, [r0, #28]
 800cd24:	4604      	mov	r4, r0
 800cd26:	460d      	mov	r5, r1
 800cd28:	b976      	cbnz	r6, 800cd48 <_Balloc+0x28>
 800cd2a:	2010      	movs	r0, #16
 800cd2c:	f7ff ff42 	bl	800cbb4 <malloc>
 800cd30:	4602      	mov	r2, r0
 800cd32:	61e0      	str	r0, [r4, #28]
 800cd34:	b920      	cbnz	r0, 800cd40 <_Balloc+0x20>
 800cd36:	4b18      	ldr	r3, [pc, #96]	@ (800cd98 <_Balloc+0x78>)
 800cd38:	4818      	ldr	r0, [pc, #96]	@ (800cd9c <_Balloc+0x7c>)
 800cd3a:	216b      	movs	r1, #107	@ 0x6b
 800cd3c:	f000 fda6 	bl	800d88c <__assert_func>
 800cd40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd44:	6006      	str	r6, [r0, #0]
 800cd46:	60c6      	str	r6, [r0, #12]
 800cd48:	69e6      	ldr	r6, [r4, #28]
 800cd4a:	68f3      	ldr	r3, [r6, #12]
 800cd4c:	b183      	cbz	r3, 800cd70 <_Balloc+0x50>
 800cd4e:	69e3      	ldr	r3, [r4, #28]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd56:	b9b8      	cbnz	r0, 800cd88 <_Balloc+0x68>
 800cd58:	2101      	movs	r1, #1
 800cd5a:	fa01 f605 	lsl.w	r6, r1, r5
 800cd5e:	1d72      	adds	r2, r6, #5
 800cd60:	0092      	lsls	r2, r2, #2
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 fdb0 	bl	800d8c8 <_calloc_r>
 800cd68:	b160      	cbz	r0, 800cd84 <_Balloc+0x64>
 800cd6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd6e:	e00e      	b.n	800cd8e <_Balloc+0x6e>
 800cd70:	2221      	movs	r2, #33	@ 0x21
 800cd72:	2104      	movs	r1, #4
 800cd74:	4620      	mov	r0, r4
 800cd76:	f000 fda7 	bl	800d8c8 <_calloc_r>
 800cd7a:	69e3      	ldr	r3, [r4, #28]
 800cd7c:	60f0      	str	r0, [r6, #12]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1e4      	bne.n	800cd4e <_Balloc+0x2e>
 800cd84:	2000      	movs	r0, #0
 800cd86:	bd70      	pop	{r4, r5, r6, pc}
 800cd88:	6802      	ldr	r2, [r0, #0]
 800cd8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd94:	e7f7      	b.n	800cd86 <_Balloc+0x66>
 800cd96:	bf00      	nop
 800cd98:	0800fc45 	.word	0x0800fc45
 800cd9c:	0800fcc5 	.word	0x0800fcc5

0800cda0 <_Bfree>:
 800cda0:	b570      	push	{r4, r5, r6, lr}
 800cda2:	69c6      	ldr	r6, [r0, #28]
 800cda4:	4605      	mov	r5, r0
 800cda6:	460c      	mov	r4, r1
 800cda8:	b976      	cbnz	r6, 800cdc8 <_Bfree+0x28>
 800cdaa:	2010      	movs	r0, #16
 800cdac:	f7ff ff02 	bl	800cbb4 <malloc>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	61e8      	str	r0, [r5, #28]
 800cdb4:	b920      	cbnz	r0, 800cdc0 <_Bfree+0x20>
 800cdb6:	4b09      	ldr	r3, [pc, #36]	@ (800cddc <_Bfree+0x3c>)
 800cdb8:	4809      	ldr	r0, [pc, #36]	@ (800cde0 <_Bfree+0x40>)
 800cdba:	218f      	movs	r1, #143	@ 0x8f
 800cdbc:	f000 fd66 	bl	800d88c <__assert_func>
 800cdc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdc4:	6006      	str	r6, [r0, #0]
 800cdc6:	60c6      	str	r6, [r0, #12]
 800cdc8:	b13c      	cbz	r4, 800cdda <_Bfree+0x3a>
 800cdca:	69eb      	ldr	r3, [r5, #28]
 800cdcc:	6862      	ldr	r2, [r4, #4]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdd4:	6021      	str	r1, [r4, #0]
 800cdd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cdda:	bd70      	pop	{r4, r5, r6, pc}
 800cddc:	0800fc45 	.word	0x0800fc45
 800cde0:	0800fcc5 	.word	0x0800fcc5

0800cde4 <__multadd>:
 800cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde8:	690d      	ldr	r5, [r1, #16]
 800cdea:	4607      	mov	r7, r0
 800cdec:	460c      	mov	r4, r1
 800cdee:	461e      	mov	r6, r3
 800cdf0:	f101 0c14 	add.w	ip, r1, #20
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	f8dc 3000 	ldr.w	r3, [ip]
 800cdfa:	b299      	uxth	r1, r3
 800cdfc:	fb02 6101 	mla	r1, r2, r1, r6
 800ce00:	0c1e      	lsrs	r6, r3, #16
 800ce02:	0c0b      	lsrs	r3, r1, #16
 800ce04:	fb02 3306 	mla	r3, r2, r6, r3
 800ce08:	b289      	uxth	r1, r1
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce10:	4285      	cmp	r5, r0
 800ce12:	f84c 1b04 	str.w	r1, [ip], #4
 800ce16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce1a:	dcec      	bgt.n	800cdf6 <__multadd+0x12>
 800ce1c:	b30e      	cbz	r6, 800ce62 <__multadd+0x7e>
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	42ab      	cmp	r3, r5
 800ce22:	dc19      	bgt.n	800ce58 <__multadd+0x74>
 800ce24:	6861      	ldr	r1, [r4, #4]
 800ce26:	4638      	mov	r0, r7
 800ce28:	3101      	adds	r1, #1
 800ce2a:	f7ff ff79 	bl	800cd20 <_Balloc>
 800ce2e:	4680      	mov	r8, r0
 800ce30:	b928      	cbnz	r0, 800ce3e <__multadd+0x5a>
 800ce32:	4602      	mov	r2, r0
 800ce34:	4b0c      	ldr	r3, [pc, #48]	@ (800ce68 <__multadd+0x84>)
 800ce36:	480d      	ldr	r0, [pc, #52]	@ (800ce6c <__multadd+0x88>)
 800ce38:	21ba      	movs	r1, #186	@ 0xba
 800ce3a:	f000 fd27 	bl	800d88c <__assert_func>
 800ce3e:	6922      	ldr	r2, [r4, #16]
 800ce40:	3202      	adds	r2, #2
 800ce42:	f104 010c 	add.w	r1, r4, #12
 800ce46:	0092      	lsls	r2, r2, #2
 800ce48:	300c      	adds	r0, #12
 800ce4a:	f000 fd11 	bl	800d870 <memcpy>
 800ce4e:	4621      	mov	r1, r4
 800ce50:	4638      	mov	r0, r7
 800ce52:	f7ff ffa5 	bl	800cda0 <_Bfree>
 800ce56:	4644      	mov	r4, r8
 800ce58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ce5c:	3501      	adds	r5, #1
 800ce5e:	615e      	str	r6, [r3, #20]
 800ce60:	6125      	str	r5, [r4, #16]
 800ce62:	4620      	mov	r0, r4
 800ce64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce68:	0800fcb4 	.word	0x0800fcb4
 800ce6c:	0800fcc5 	.word	0x0800fcc5

0800ce70 <__hi0bits>:
 800ce70:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce74:	4603      	mov	r3, r0
 800ce76:	bf36      	itet	cc
 800ce78:	0403      	lslcc	r3, r0, #16
 800ce7a:	2000      	movcs	r0, #0
 800ce7c:	2010      	movcc	r0, #16
 800ce7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce82:	bf3c      	itt	cc
 800ce84:	021b      	lslcc	r3, r3, #8
 800ce86:	3008      	addcc	r0, #8
 800ce88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce8c:	bf3c      	itt	cc
 800ce8e:	011b      	lslcc	r3, r3, #4
 800ce90:	3004      	addcc	r0, #4
 800ce92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce96:	bf3c      	itt	cc
 800ce98:	009b      	lslcc	r3, r3, #2
 800ce9a:	3002      	addcc	r0, #2
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	db05      	blt.n	800ceac <__hi0bits+0x3c>
 800cea0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cea4:	f100 0001 	add.w	r0, r0, #1
 800cea8:	bf08      	it	eq
 800ceaa:	2020      	moveq	r0, #32
 800ceac:	4770      	bx	lr

0800ceae <__lo0bits>:
 800ceae:	6803      	ldr	r3, [r0, #0]
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	f013 0007 	ands.w	r0, r3, #7
 800ceb6:	d00b      	beq.n	800ced0 <__lo0bits+0x22>
 800ceb8:	07d9      	lsls	r1, r3, #31
 800ceba:	d421      	bmi.n	800cf00 <__lo0bits+0x52>
 800cebc:	0798      	lsls	r0, r3, #30
 800cebe:	bf49      	itett	mi
 800cec0:	085b      	lsrmi	r3, r3, #1
 800cec2:	089b      	lsrpl	r3, r3, #2
 800cec4:	2001      	movmi	r0, #1
 800cec6:	6013      	strmi	r3, [r2, #0]
 800cec8:	bf5c      	itt	pl
 800ceca:	6013      	strpl	r3, [r2, #0]
 800cecc:	2002      	movpl	r0, #2
 800cece:	4770      	bx	lr
 800ced0:	b299      	uxth	r1, r3
 800ced2:	b909      	cbnz	r1, 800ced8 <__lo0bits+0x2a>
 800ced4:	0c1b      	lsrs	r3, r3, #16
 800ced6:	2010      	movs	r0, #16
 800ced8:	b2d9      	uxtb	r1, r3
 800ceda:	b909      	cbnz	r1, 800cee0 <__lo0bits+0x32>
 800cedc:	3008      	adds	r0, #8
 800cede:	0a1b      	lsrs	r3, r3, #8
 800cee0:	0719      	lsls	r1, r3, #28
 800cee2:	bf04      	itt	eq
 800cee4:	091b      	lsreq	r3, r3, #4
 800cee6:	3004      	addeq	r0, #4
 800cee8:	0799      	lsls	r1, r3, #30
 800ceea:	bf04      	itt	eq
 800ceec:	089b      	lsreq	r3, r3, #2
 800ceee:	3002      	addeq	r0, #2
 800cef0:	07d9      	lsls	r1, r3, #31
 800cef2:	d403      	bmi.n	800cefc <__lo0bits+0x4e>
 800cef4:	085b      	lsrs	r3, r3, #1
 800cef6:	f100 0001 	add.w	r0, r0, #1
 800cefa:	d003      	beq.n	800cf04 <__lo0bits+0x56>
 800cefc:	6013      	str	r3, [r2, #0]
 800cefe:	4770      	bx	lr
 800cf00:	2000      	movs	r0, #0
 800cf02:	4770      	bx	lr
 800cf04:	2020      	movs	r0, #32
 800cf06:	4770      	bx	lr

0800cf08 <__i2b>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	f7ff ff07 	bl	800cd20 <_Balloc>
 800cf12:	4602      	mov	r2, r0
 800cf14:	b928      	cbnz	r0, 800cf22 <__i2b+0x1a>
 800cf16:	4b05      	ldr	r3, [pc, #20]	@ (800cf2c <__i2b+0x24>)
 800cf18:	4805      	ldr	r0, [pc, #20]	@ (800cf30 <__i2b+0x28>)
 800cf1a:	f240 1145 	movw	r1, #325	@ 0x145
 800cf1e:	f000 fcb5 	bl	800d88c <__assert_func>
 800cf22:	2301      	movs	r3, #1
 800cf24:	6144      	str	r4, [r0, #20]
 800cf26:	6103      	str	r3, [r0, #16]
 800cf28:	bd10      	pop	{r4, pc}
 800cf2a:	bf00      	nop
 800cf2c:	0800fcb4 	.word	0x0800fcb4
 800cf30:	0800fcc5 	.word	0x0800fcc5

0800cf34 <__multiply>:
 800cf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf38:	4617      	mov	r7, r2
 800cf3a:	690a      	ldr	r2, [r1, #16]
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	bfa8      	it	ge
 800cf42:	463b      	movge	r3, r7
 800cf44:	4689      	mov	r9, r1
 800cf46:	bfa4      	itt	ge
 800cf48:	460f      	movge	r7, r1
 800cf4a:	4699      	movge	r9, r3
 800cf4c:	693d      	ldr	r5, [r7, #16]
 800cf4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	eb05 060a 	add.w	r6, r5, sl
 800cf5a:	42b3      	cmp	r3, r6
 800cf5c:	b085      	sub	sp, #20
 800cf5e:	bfb8      	it	lt
 800cf60:	3101      	addlt	r1, #1
 800cf62:	f7ff fedd 	bl	800cd20 <_Balloc>
 800cf66:	b930      	cbnz	r0, 800cf76 <__multiply+0x42>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	4b41      	ldr	r3, [pc, #260]	@ (800d070 <__multiply+0x13c>)
 800cf6c:	4841      	ldr	r0, [pc, #260]	@ (800d074 <__multiply+0x140>)
 800cf6e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf72:	f000 fc8b 	bl	800d88c <__assert_func>
 800cf76:	f100 0414 	add.w	r4, r0, #20
 800cf7a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cf7e:	4623      	mov	r3, r4
 800cf80:	2200      	movs	r2, #0
 800cf82:	4573      	cmp	r3, lr
 800cf84:	d320      	bcc.n	800cfc8 <__multiply+0x94>
 800cf86:	f107 0814 	add.w	r8, r7, #20
 800cf8a:	f109 0114 	add.w	r1, r9, #20
 800cf8e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cf92:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cf96:	9302      	str	r3, [sp, #8]
 800cf98:	1beb      	subs	r3, r5, r7
 800cf9a:	3b15      	subs	r3, #21
 800cf9c:	f023 0303 	bic.w	r3, r3, #3
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	3715      	adds	r7, #21
 800cfa4:	42bd      	cmp	r5, r7
 800cfa6:	bf38      	it	cc
 800cfa8:	2304      	movcc	r3, #4
 800cfaa:	9301      	str	r3, [sp, #4]
 800cfac:	9b02      	ldr	r3, [sp, #8]
 800cfae:	9103      	str	r1, [sp, #12]
 800cfb0:	428b      	cmp	r3, r1
 800cfb2:	d80c      	bhi.n	800cfce <__multiply+0x9a>
 800cfb4:	2e00      	cmp	r6, #0
 800cfb6:	dd03      	ble.n	800cfc0 <__multiply+0x8c>
 800cfb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d055      	beq.n	800d06c <__multiply+0x138>
 800cfc0:	6106      	str	r6, [r0, #16]
 800cfc2:	b005      	add	sp, #20
 800cfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc8:	f843 2b04 	str.w	r2, [r3], #4
 800cfcc:	e7d9      	b.n	800cf82 <__multiply+0x4e>
 800cfce:	f8b1 a000 	ldrh.w	sl, [r1]
 800cfd2:	f1ba 0f00 	cmp.w	sl, #0
 800cfd6:	d01f      	beq.n	800d018 <__multiply+0xe4>
 800cfd8:	46c4      	mov	ip, r8
 800cfda:	46a1      	mov	r9, r4
 800cfdc:	2700      	movs	r7, #0
 800cfde:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cfe2:	f8d9 3000 	ldr.w	r3, [r9]
 800cfe6:	fa1f fb82 	uxth.w	fp, r2
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	fb0a 330b 	mla	r3, sl, fp, r3
 800cff0:	443b      	add	r3, r7
 800cff2:	f8d9 7000 	ldr.w	r7, [r9]
 800cff6:	0c12      	lsrs	r2, r2, #16
 800cff8:	0c3f      	lsrs	r7, r7, #16
 800cffa:	fb0a 7202 	mla	r2, sl, r2, r7
 800cffe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d002:	b29b      	uxth	r3, r3
 800d004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d008:	4565      	cmp	r5, ip
 800d00a:	f849 3b04 	str.w	r3, [r9], #4
 800d00e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d012:	d8e4      	bhi.n	800cfde <__multiply+0xaa>
 800d014:	9b01      	ldr	r3, [sp, #4]
 800d016:	50e7      	str	r7, [r4, r3]
 800d018:	9b03      	ldr	r3, [sp, #12]
 800d01a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d01e:	3104      	adds	r1, #4
 800d020:	f1b9 0f00 	cmp.w	r9, #0
 800d024:	d020      	beq.n	800d068 <__multiply+0x134>
 800d026:	6823      	ldr	r3, [r4, #0]
 800d028:	4647      	mov	r7, r8
 800d02a:	46a4      	mov	ip, r4
 800d02c:	f04f 0a00 	mov.w	sl, #0
 800d030:	f8b7 b000 	ldrh.w	fp, [r7]
 800d034:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d038:	fb09 220b 	mla	r2, r9, fp, r2
 800d03c:	4452      	add	r2, sl
 800d03e:	b29b      	uxth	r3, r3
 800d040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d044:	f84c 3b04 	str.w	r3, [ip], #4
 800d048:	f857 3b04 	ldr.w	r3, [r7], #4
 800d04c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d050:	f8bc 3000 	ldrh.w	r3, [ip]
 800d054:	fb09 330a 	mla	r3, r9, sl, r3
 800d058:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d05c:	42bd      	cmp	r5, r7
 800d05e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d062:	d8e5      	bhi.n	800d030 <__multiply+0xfc>
 800d064:	9a01      	ldr	r2, [sp, #4]
 800d066:	50a3      	str	r3, [r4, r2]
 800d068:	3404      	adds	r4, #4
 800d06a:	e79f      	b.n	800cfac <__multiply+0x78>
 800d06c:	3e01      	subs	r6, #1
 800d06e:	e7a1      	b.n	800cfb4 <__multiply+0x80>
 800d070:	0800fcb4 	.word	0x0800fcb4
 800d074:	0800fcc5 	.word	0x0800fcc5

0800d078 <__pow5mult>:
 800d078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d07c:	4615      	mov	r5, r2
 800d07e:	f012 0203 	ands.w	r2, r2, #3
 800d082:	4607      	mov	r7, r0
 800d084:	460e      	mov	r6, r1
 800d086:	d007      	beq.n	800d098 <__pow5mult+0x20>
 800d088:	4c25      	ldr	r4, [pc, #148]	@ (800d120 <__pow5mult+0xa8>)
 800d08a:	3a01      	subs	r2, #1
 800d08c:	2300      	movs	r3, #0
 800d08e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d092:	f7ff fea7 	bl	800cde4 <__multadd>
 800d096:	4606      	mov	r6, r0
 800d098:	10ad      	asrs	r5, r5, #2
 800d09a:	d03d      	beq.n	800d118 <__pow5mult+0xa0>
 800d09c:	69fc      	ldr	r4, [r7, #28]
 800d09e:	b97c      	cbnz	r4, 800d0c0 <__pow5mult+0x48>
 800d0a0:	2010      	movs	r0, #16
 800d0a2:	f7ff fd87 	bl	800cbb4 <malloc>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	61f8      	str	r0, [r7, #28]
 800d0aa:	b928      	cbnz	r0, 800d0b8 <__pow5mult+0x40>
 800d0ac:	4b1d      	ldr	r3, [pc, #116]	@ (800d124 <__pow5mult+0xac>)
 800d0ae:	481e      	ldr	r0, [pc, #120]	@ (800d128 <__pow5mult+0xb0>)
 800d0b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0b4:	f000 fbea 	bl	800d88c <__assert_func>
 800d0b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0bc:	6004      	str	r4, [r0, #0]
 800d0be:	60c4      	str	r4, [r0, #12]
 800d0c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0c8:	b94c      	cbnz	r4, 800d0de <__pow5mult+0x66>
 800d0ca:	f240 2171 	movw	r1, #625	@ 0x271
 800d0ce:	4638      	mov	r0, r7
 800d0d0:	f7ff ff1a 	bl	800cf08 <__i2b>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0da:	4604      	mov	r4, r0
 800d0dc:	6003      	str	r3, [r0, #0]
 800d0de:	f04f 0900 	mov.w	r9, #0
 800d0e2:	07eb      	lsls	r3, r5, #31
 800d0e4:	d50a      	bpl.n	800d0fc <__pow5mult+0x84>
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	4622      	mov	r2, r4
 800d0ea:	4638      	mov	r0, r7
 800d0ec:	f7ff ff22 	bl	800cf34 <__multiply>
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	4680      	mov	r8, r0
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	f7ff fe53 	bl	800cda0 <_Bfree>
 800d0fa:	4646      	mov	r6, r8
 800d0fc:	106d      	asrs	r5, r5, #1
 800d0fe:	d00b      	beq.n	800d118 <__pow5mult+0xa0>
 800d100:	6820      	ldr	r0, [r4, #0]
 800d102:	b938      	cbnz	r0, 800d114 <__pow5mult+0x9c>
 800d104:	4622      	mov	r2, r4
 800d106:	4621      	mov	r1, r4
 800d108:	4638      	mov	r0, r7
 800d10a:	f7ff ff13 	bl	800cf34 <__multiply>
 800d10e:	6020      	str	r0, [r4, #0]
 800d110:	f8c0 9000 	str.w	r9, [r0]
 800d114:	4604      	mov	r4, r0
 800d116:	e7e4      	b.n	800d0e2 <__pow5mult+0x6a>
 800d118:	4630      	mov	r0, r6
 800d11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d11e:	bf00      	nop
 800d120:	0800fd78 	.word	0x0800fd78
 800d124:	0800fc45 	.word	0x0800fc45
 800d128:	0800fcc5 	.word	0x0800fcc5

0800d12c <__lshift>:
 800d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d130:	460c      	mov	r4, r1
 800d132:	6849      	ldr	r1, [r1, #4]
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d13a:	68a3      	ldr	r3, [r4, #8]
 800d13c:	4607      	mov	r7, r0
 800d13e:	4691      	mov	r9, r2
 800d140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d144:	f108 0601 	add.w	r6, r8, #1
 800d148:	42b3      	cmp	r3, r6
 800d14a:	db0b      	blt.n	800d164 <__lshift+0x38>
 800d14c:	4638      	mov	r0, r7
 800d14e:	f7ff fde7 	bl	800cd20 <_Balloc>
 800d152:	4605      	mov	r5, r0
 800d154:	b948      	cbnz	r0, 800d16a <__lshift+0x3e>
 800d156:	4602      	mov	r2, r0
 800d158:	4b28      	ldr	r3, [pc, #160]	@ (800d1fc <__lshift+0xd0>)
 800d15a:	4829      	ldr	r0, [pc, #164]	@ (800d200 <__lshift+0xd4>)
 800d15c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d160:	f000 fb94 	bl	800d88c <__assert_func>
 800d164:	3101      	adds	r1, #1
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	e7ee      	b.n	800d148 <__lshift+0x1c>
 800d16a:	2300      	movs	r3, #0
 800d16c:	f100 0114 	add.w	r1, r0, #20
 800d170:	f100 0210 	add.w	r2, r0, #16
 800d174:	4618      	mov	r0, r3
 800d176:	4553      	cmp	r3, sl
 800d178:	db33      	blt.n	800d1e2 <__lshift+0xb6>
 800d17a:	6920      	ldr	r0, [r4, #16]
 800d17c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d180:	f104 0314 	add.w	r3, r4, #20
 800d184:	f019 091f 	ands.w	r9, r9, #31
 800d188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d18c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d190:	d02b      	beq.n	800d1ea <__lshift+0xbe>
 800d192:	f1c9 0e20 	rsb	lr, r9, #32
 800d196:	468a      	mov	sl, r1
 800d198:	2200      	movs	r2, #0
 800d19a:	6818      	ldr	r0, [r3, #0]
 800d19c:	fa00 f009 	lsl.w	r0, r0, r9
 800d1a0:	4310      	orrs	r0, r2
 800d1a2:	f84a 0b04 	str.w	r0, [sl], #4
 800d1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1aa:	459c      	cmp	ip, r3
 800d1ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1b0:	d8f3      	bhi.n	800d19a <__lshift+0x6e>
 800d1b2:	ebac 0304 	sub.w	r3, ip, r4
 800d1b6:	3b15      	subs	r3, #21
 800d1b8:	f023 0303 	bic.w	r3, r3, #3
 800d1bc:	3304      	adds	r3, #4
 800d1be:	f104 0015 	add.w	r0, r4, #21
 800d1c2:	4560      	cmp	r0, ip
 800d1c4:	bf88      	it	hi
 800d1c6:	2304      	movhi	r3, #4
 800d1c8:	50ca      	str	r2, [r1, r3]
 800d1ca:	b10a      	cbz	r2, 800d1d0 <__lshift+0xa4>
 800d1cc:	f108 0602 	add.w	r6, r8, #2
 800d1d0:	3e01      	subs	r6, #1
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	612e      	str	r6, [r5, #16]
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	f7ff fde2 	bl	800cda0 <_Bfree>
 800d1dc:	4628      	mov	r0, r5
 800d1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	e7c5      	b.n	800d176 <__lshift+0x4a>
 800d1ea:	3904      	subs	r1, #4
 800d1ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1f4:	459c      	cmp	ip, r3
 800d1f6:	d8f9      	bhi.n	800d1ec <__lshift+0xc0>
 800d1f8:	e7ea      	b.n	800d1d0 <__lshift+0xa4>
 800d1fa:	bf00      	nop
 800d1fc:	0800fcb4 	.word	0x0800fcb4
 800d200:	0800fcc5 	.word	0x0800fcc5

0800d204 <__mcmp>:
 800d204:	690a      	ldr	r2, [r1, #16]
 800d206:	4603      	mov	r3, r0
 800d208:	6900      	ldr	r0, [r0, #16]
 800d20a:	1a80      	subs	r0, r0, r2
 800d20c:	b530      	push	{r4, r5, lr}
 800d20e:	d10e      	bne.n	800d22e <__mcmp+0x2a>
 800d210:	3314      	adds	r3, #20
 800d212:	3114      	adds	r1, #20
 800d214:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d218:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d21c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d220:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d224:	4295      	cmp	r5, r2
 800d226:	d003      	beq.n	800d230 <__mcmp+0x2c>
 800d228:	d205      	bcs.n	800d236 <__mcmp+0x32>
 800d22a:	f04f 30ff 	mov.w	r0, #4294967295
 800d22e:	bd30      	pop	{r4, r5, pc}
 800d230:	42a3      	cmp	r3, r4
 800d232:	d3f3      	bcc.n	800d21c <__mcmp+0x18>
 800d234:	e7fb      	b.n	800d22e <__mcmp+0x2a>
 800d236:	2001      	movs	r0, #1
 800d238:	e7f9      	b.n	800d22e <__mcmp+0x2a>
	...

0800d23c <__mdiff>:
 800d23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d240:	4689      	mov	r9, r1
 800d242:	4606      	mov	r6, r0
 800d244:	4611      	mov	r1, r2
 800d246:	4648      	mov	r0, r9
 800d248:	4614      	mov	r4, r2
 800d24a:	f7ff ffdb 	bl	800d204 <__mcmp>
 800d24e:	1e05      	subs	r5, r0, #0
 800d250:	d112      	bne.n	800d278 <__mdiff+0x3c>
 800d252:	4629      	mov	r1, r5
 800d254:	4630      	mov	r0, r6
 800d256:	f7ff fd63 	bl	800cd20 <_Balloc>
 800d25a:	4602      	mov	r2, r0
 800d25c:	b928      	cbnz	r0, 800d26a <__mdiff+0x2e>
 800d25e:	4b3f      	ldr	r3, [pc, #252]	@ (800d35c <__mdiff+0x120>)
 800d260:	f240 2137 	movw	r1, #567	@ 0x237
 800d264:	483e      	ldr	r0, [pc, #248]	@ (800d360 <__mdiff+0x124>)
 800d266:	f000 fb11 	bl	800d88c <__assert_func>
 800d26a:	2301      	movs	r3, #1
 800d26c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d270:	4610      	mov	r0, r2
 800d272:	b003      	add	sp, #12
 800d274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d278:	bfbc      	itt	lt
 800d27a:	464b      	movlt	r3, r9
 800d27c:	46a1      	movlt	r9, r4
 800d27e:	4630      	mov	r0, r6
 800d280:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d284:	bfba      	itte	lt
 800d286:	461c      	movlt	r4, r3
 800d288:	2501      	movlt	r5, #1
 800d28a:	2500      	movge	r5, #0
 800d28c:	f7ff fd48 	bl	800cd20 <_Balloc>
 800d290:	4602      	mov	r2, r0
 800d292:	b918      	cbnz	r0, 800d29c <__mdiff+0x60>
 800d294:	4b31      	ldr	r3, [pc, #196]	@ (800d35c <__mdiff+0x120>)
 800d296:	f240 2145 	movw	r1, #581	@ 0x245
 800d29a:	e7e3      	b.n	800d264 <__mdiff+0x28>
 800d29c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d2a0:	6926      	ldr	r6, [r4, #16]
 800d2a2:	60c5      	str	r5, [r0, #12]
 800d2a4:	f109 0310 	add.w	r3, r9, #16
 800d2a8:	f109 0514 	add.w	r5, r9, #20
 800d2ac:	f104 0e14 	add.w	lr, r4, #20
 800d2b0:	f100 0b14 	add.w	fp, r0, #20
 800d2b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d2b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d2bc:	9301      	str	r3, [sp, #4]
 800d2be:	46d9      	mov	r9, fp
 800d2c0:	f04f 0c00 	mov.w	ip, #0
 800d2c4:	9b01      	ldr	r3, [sp, #4]
 800d2c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d2ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d2ce:	9301      	str	r3, [sp, #4]
 800d2d0:	fa1f f38a 	uxth.w	r3, sl
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	b283      	uxth	r3, r0
 800d2d8:	1acb      	subs	r3, r1, r3
 800d2da:	0c00      	lsrs	r0, r0, #16
 800d2dc:	4463      	add	r3, ip
 800d2de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d2e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d2ec:	4576      	cmp	r6, lr
 800d2ee:	f849 3b04 	str.w	r3, [r9], #4
 800d2f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2f6:	d8e5      	bhi.n	800d2c4 <__mdiff+0x88>
 800d2f8:	1b33      	subs	r3, r6, r4
 800d2fa:	3b15      	subs	r3, #21
 800d2fc:	f023 0303 	bic.w	r3, r3, #3
 800d300:	3415      	adds	r4, #21
 800d302:	3304      	adds	r3, #4
 800d304:	42a6      	cmp	r6, r4
 800d306:	bf38      	it	cc
 800d308:	2304      	movcc	r3, #4
 800d30a:	441d      	add	r5, r3
 800d30c:	445b      	add	r3, fp
 800d30e:	461e      	mov	r6, r3
 800d310:	462c      	mov	r4, r5
 800d312:	4544      	cmp	r4, r8
 800d314:	d30e      	bcc.n	800d334 <__mdiff+0xf8>
 800d316:	f108 0103 	add.w	r1, r8, #3
 800d31a:	1b49      	subs	r1, r1, r5
 800d31c:	f021 0103 	bic.w	r1, r1, #3
 800d320:	3d03      	subs	r5, #3
 800d322:	45a8      	cmp	r8, r5
 800d324:	bf38      	it	cc
 800d326:	2100      	movcc	r1, #0
 800d328:	440b      	add	r3, r1
 800d32a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d32e:	b191      	cbz	r1, 800d356 <__mdiff+0x11a>
 800d330:	6117      	str	r7, [r2, #16]
 800d332:	e79d      	b.n	800d270 <__mdiff+0x34>
 800d334:	f854 1b04 	ldr.w	r1, [r4], #4
 800d338:	46e6      	mov	lr, ip
 800d33a:	0c08      	lsrs	r0, r1, #16
 800d33c:	fa1c fc81 	uxtah	ip, ip, r1
 800d340:	4471      	add	r1, lr
 800d342:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d346:	b289      	uxth	r1, r1
 800d348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d34c:	f846 1b04 	str.w	r1, [r6], #4
 800d350:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d354:	e7dd      	b.n	800d312 <__mdiff+0xd6>
 800d356:	3f01      	subs	r7, #1
 800d358:	e7e7      	b.n	800d32a <__mdiff+0xee>
 800d35a:	bf00      	nop
 800d35c:	0800fcb4 	.word	0x0800fcb4
 800d360:	0800fcc5 	.word	0x0800fcc5

0800d364 <__d2b>:
 800d364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d368:	460f      	mov	r7, r1
 800d36a:	2101      	movs	r1, #1
 800d36c:	ec59 8b10 	vmov	r8, r9, d0
 800d370:	4616      	mov	r6, r2
 800d372:	f7ff fcd5 	bl	800cd20 <_Balloc>
 800d376:	4604      	mov	r4, r0
 800d378:	b930      	cbnz	r0, 800d388 <__d2b+0x24>
 800d37a:	4602      	mov	r2, r0
 800d37c:	4b23      	ldr	r3, [pc, #140]	@ (800d40c <__d2b+0xa8>)
 800d37e:	4824      	ldr	r0, [pc, #144]	@ (800d410 <__d2b+0xac>)
 800d380:	f240 310f 	movw	r1, #783	@ 0x30f
 800d384:	f000 fa82 	bl	800d88c <__assert_func>
 800d388:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d38c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d390:	b10d      	cbz	r5, 800d396 <__d2b+0x32>
 800d392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d396:	9301      	str	r3, [sp, #4]
 800d398:	f1b8 0300 	subs.w	r3, r8, #0
 800d39c:	d023      	beq.n	800d3e6 <__d2b+0x82>
 800d39e:	4668      	mov	r0, sp
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	f7ff fd84 	bl	800ceae <__lo0bits>
 800d3a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d3aa:	b1d0      	cbz	r0, 800d3e2 <__d2b+0x7e>
 800d3ac:	f1c0 0320 	rsb	r3, r0, #32
 800d3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3b4:	430b      	orrs	r3, r1
 800d3b6:	40c2      	lsrs	r2, r0
 800d3b8:	6163      	str	r3, [r4, #20]
 800d3ba:	9201      	str	r2, [sp, #4]
 800d3bc:	9b01      	ldr	r3, [sp, #4]
 800d3be:	61a3      	str	r3, [r4, #24]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bf0c      	ite	eq
 800d3c4:	2201      	moveq	r2, #1
 800d3c6:	2202      	movne	r2, #2
 800d3c8:	6122      	str	r2, [r4, #16]
 800d3ca:	b1a5      	cbz	r5, 800d3f6 <__d2b+0x92>
 800d3cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d3d0:	4405      	add	r5, r0
 800d3d2:	603d      	str	r5, [r7, #0]
 800d3d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d3d8:	6030      	str	r0, [r6, #0]
 800d3da:	4620      	mov	r0, r4
 800d3dc:	b003      	add	sp, #12
 800d3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3e2:	6161      	str	r1, [r4, #20]
 800d3e4:	e7ea      	b.n	800d3bc <__d2b+0x58>
 800d3e6:	a801      	add	r0, sp, #4
 800d3e8:	f7ff fd61 	bl	800ceae <__lo0bits>
 800d3ec:	9b01      	ldr	r3, [sp, #4]
 800d3ee:	6163      	str	r3, [r4, #20]
 800d3f0:	3020      	adds	r0, #32
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	e7e8      	b.n	800d3c8 <__d2b+0x64>
 800d3f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d3fe:	6038      	str	r0, [r7, #0]
 800d400:	6918      	ldr	r0, [r3, #16]
 800d402:	f7ff fd35 	bl	800ce70 <__hi0bits>
 800d406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d40a:	e7e5      	b.n	800d3d8 <__d2b+0x74>
 800d40c:	0800fcb4 	.word	0x0800fcb4
 800d410:	0800fcc5 	.word	0x0800fcc5

0800d414 <__ssputs_r>:
 800d414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d418:	688e      	ldr	r6, [r1, #8]
 800d41a:	461f      	mov	r7, r3
 800d41c:	42be      	cmp	r6, r7
 800d41e:	680b      	ldr	r3, [r1, #0]
 800d420:	4682      	mov	sl, r0
 800d422:	460c      	mov	r4, r1
 800d424:	4690      	mov	r8, r2
 800d426:	d82d      	bhi.n	800d484 <__ssputs_r+0x70>
 800d428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d42c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d430:	d026      	beq.n	800d480 <__ssputs_r+0x6c>
 800d432:	6965      	ldr	r5, [r4, #20]
 800d434:	6909      	ldr	r1, [r1, #16]
 800d436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d43a:	eba3 0901 	sub.w	r9, r3, r1
 800d43e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d442:	1c7b      	adds	r3, r7, #1
 800d444:	444b      	add	r3, r9
 800d446:	106d      	asrs	r5, r5, #1
 800d448:	429d      	cmp	r5, r3
 800d44a:	bf38      	it	cc
 800d44c:	461d      	movcc	r5, r3
 800d44e:	0553      	lsls	r3, r2, #21
 800d450:	d527      	bpl.n	800d4a2 <__ssputs_r+0x8e>
 800d452:	4629      	mov	r1, r5
 800d454:	f7ff fbd8 	bl	800cc08 <_malloc_r>
 800d458:	4606      	mov	r6, r0
 800d45a:	b360      	cbz	r0, 800d4b6 <__ssputs_r+0xa2>
 800d45c:	6921      	ldr	r1, [r4, #16]
 800d45e:	464a      	mov	r2, r9
 800d460:	f000 fa06 	bl	800d870 <memcpy>
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d46a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d46e:	81a3      	strh	r3, [r4, #12]
 800d470:	6126      	str	r6, [r4, #16]
 800d472:	6165      	str	r5, [r4, #20]
 800d474:	444e      	add	r6, r9
 800d476:	eba5 0509 	sub.w	r5, r5, r9
 800d47a:	6026      	str	r6, [r4, #0]
 800d47c:	60a5      	str	r5, [r4, #8]
 800d47e:	463e      	mov	r6, r7
 800d480:	42be      	cmp	r6, r7
 800d482:	d900      	bls.n	800d486 <__ssputs_r+0x72>
 800d484:	463e      	mov	r6, r7
 800d486:	6820      	ldr	r0, [r4, #0]
 800d488:	4632      	mov	r2, r6
 800d48a:	4641      	mov	r1, r8
 800d48c:	f000 f9c6 	bl	800d81c <memmove>
 800d490:	68a3      	ldr	r3, [r4, #8]
 800d492:	1b9b      	subs	r3, r3, r6
 800d494:	60a3      	str	r3, [r4, #8]
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	4433      	add	r3, r6
 800d49a:	6023      	str	r3, [r4, #0]
 800d49c:	2000      	movs	r0, #0
 800d49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a2:	462a      	mov	r2, r5
 800d4a4:	f000 fa36 	bl	800d914 <_realloc_r>
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	d1e0      	bne.n	800d470 <__ssputs_r+0x5c>
 800d4ae:	6921      	ldr	r1, [r4, #16]
 800d4b0:	4650      	mov	r0, sl
 800d4b2:	f7ff fb35 	bl	800cb20 <_free_r>
 800d4b6:	230c      	movs	r3, #12
 800d4b8:	f8ca 3000 	str.w	r3, [sl]
 800d4bc:	89a3      	ldrh	r3, [r4, #12]
 800d4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4c2:	81a3      	strh	r3, [r4, #12]
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	e7e9      	b.n	800d49e <__ssputs_r+0x8a>
	...

0800d4cc <_svfiprintf_r>:
 800d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d0:	4698      	mov	r8, r3
 800d4d2:	898b      	ldrh	r3, [r1, #12]
 800d4d4:	061b      	lsls	r3, r3, #24
 800d4d6:	b09d      	sub	sp, #116	@ 0x74
 800d4d8:	4607      	mov	r7, r0
 800d4da:	460d      	mov	r5, r1
 800d4dc:	4614      	mov	r4, r2
 800d4de:	d510      	bpl.n	800d502 <_svfiprintf_r+0x36>
 800d4e0:	690b      	ldr	r3, [r1, #16]
 800d4e2:	b973      	cbnz	r3, 800d502 <_svfiprintf_r+0x36>
 800d4e4:	2140      	movs	r1, #64	@ 0x40
 800d4e6:	f7ff fb8f 	bl	800cc08 <_malloc_r>
 800d4ea:	6028      	str	r0, [r5, #0]
 800d4ec:	6128      	str	r0, [r5, #16]
 800d4ee:	b930      	cbnz	r0, 800d4fe <_svfiprintf_r+0x32>
 800d4f0:	230c      	movs	r3, #12
 800d4f2:	603b      	str	r3, [r7, #0]
 800d4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f8:	b01d      	add	sp, #116	@ 0x74
 800d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fe:	2340      	movs	r3, #64	@ 0x40
 800d500:	616b      	str	r3, [r5, #20]
 800d502:	2300      	movs	r3, #0
 800d504:	9309      	str	r3, [sp, #36]	@ 0x24
 800d506:	2320      	movs	r3, #32
 800d508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d50c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d510:	2330      	movs	r3, #48	@ 0x30
 800d512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d6b0 <_svfiprintf_r+0x1e4>
 800d516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d51a:	f04f 0901 	mov.w	r9, #1
 800d51e:	4623      	mov	r3, r4
 800d520:	469a      	mov	sl, r3
 800d522:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d526:	b10a      	cbz	r2, 800d52c <_svfiprintf_r+0x60>
 800d528:	2a25      	cmp	r2, #37	@ 0x25
 800d52a:	d1f9      	bne.n	800d520 <_svfiprintf_r+0x54>
 800d52c:	ebba 0b04 	subs.w	fp, sl, r4
 800d530:	d00b      	beq.n	800d54a <_svfiprintf_r+0x7e>
 800d532:	465b      	mov	r3, fp
 800d534:	4622      	mov	r2, r4
 800d536:	4629      	mov	r1, r5
 800d538:	4638      	mov	r0, r7
 800d53a:	f7ff ff6b 	bl	800d414 <__ssputs_r>
 800d53e:	3001      	adds	r0, #1
 800d540:	f000 80a7 	beq.w	800d692 <_svfiprintf_r+0x1c6>
 800d544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d546:	445a      	add	r2, fp
 800d548:	9209      	str	r2, [sp, #36]	@ 0x24
 800d54a:	f89a 3000 	ldrb.w	r3, [sl]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	f000 809f 	beq.w	800d692 <_svfiprintf_r+0x1c6>
 800d554:	2300      	movs	r3, #0
 800d556:	f04f 32ff 	mov.w	r2, #4294967295
 800d55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d55e:	f10a 0a01 	add.w	sl, sl, #1
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	9307      	str	r3, [sp, #28]
 800d566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d56a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d56c:	4654      	mov	r4, sl
 800d56e:	2205      	movs	r2, #5
 800d570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d574:	484e      	ldr	r0, [pc, #312]	@ (800d6b0 <_svfiprintf_r+0x1e4>)
 800d576:	f7f2 fe33 	bl	80001e0 <memchr>
 800d57a:	9a04      	ldr	r2, [sp, #16]
 800d57c:	b9d8      	cbnz	r0, 800d5b6 <_svfiprintf_r+0xea>
 800d57e:	06d0      	lsls	r0, r2, #27
 800d580:	bf44      	itt	mi
 800d582:	2320      	movmi	r3, #32
 800d584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d588:	0711      	lsls	r1, r2, #28
 800d58a:	bf44      	itt	mi
 800d58c:	232b      	movmi	r3, #43	@ 0x2b
 800d58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d592:	f89a 3000 	ldrb.w	r3, [sl]
 800d596:	2b2a      	cmp	r3, #42	@ 0x2a
 800d598:	d015      	beq.n	800d5c6 <_svfiprintf_r+0xfa>
 800d59a:	9a07      	ldr	r2, [sp, #28]
 800d59c:	4654      	mov	r4, sl
 800d59e:	2000      	movs	r0, #0
 800d5a0:	f04f 0c0a 	mov.w	ip, #10
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5aa:	3b30      	subs	r3, #48	@ 0x30
 800d5ac:	2b09      	cmp	r3, #9
 800d5ae:	d94b      	bls.n	800d648 <_svfiprintf_r+0x17c>
 800d5b0:	b1b0      	cbz	r0, 800d5e0 <_svfiprintf_r+0x114>
 800d5b2:	9207      	str	r2, [sp, #28]
 800d5b4:	e014      	b.n	800d5e0 <_svfiprintf_r+0x114>
 800d5b6:	eba0 0308 	sub.w	r3, r0, r8
 800d5ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	46a2      	mov	sl, r4
 800d5c4:	e7d2      	b.n	800d56c <_svfiprintf_r+0xa0>
 800d5c6:	9b03      	ldr	r3, [sp, #12]
 800d5c8:	1d19      	adds	r1, r3, #4
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	9103      	str	r1, [sp, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	bfbb      	ittet	lt
 800d5d2:	425b      	neglt	r3, r3
 800d5d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d5d8:	9307      	strge	r3, [sp, #28]
 800d5da:	9307      	strlt	r3, [sp, #28]
 800d5dc:	bfb8      	it	lt
 800d5de:	9204      	strlt	r2, [sp, #16]
 800d5e0:	7823      	ldrb	r3, [r4, #0]
 800d5e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5e4:	d10a      	bne.n	800d5fc <_svfiprintf_r+0x130>
 800d5e6:	7863      	ldrb	r3, [r4, #1]
 800d5e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ea:	d132      	bne.n	800d652 <_svfiprintf_r+0x186>
 800d5ec:	9b03      	ldr	r3, [sp, #12]
 800d5ee:	1d1a      	adds	r2, r3, #4
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	9203      	str	r2, [sp, #12]
 800d5f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5f8:	3402      	adds	r4, #2
 800d5fa:	9305      	str	r3, [sp, #20]
 800d5fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d6c0 <_svfiprintf_r+0x1f4>
 800d600:	7821      	ldrb	r1, [r4, #0]
 800d602:	2203      	movs	r2, #3
 800d604:	4650      	mov	r0, sl
 800d606:	f7f2 fdeb 	bl	80001e0 <memchr>
 800d60a:	b138      	cbz	r0, 800d61c <_svfiprintf_r+0x150>
 800d60c:	9b04      	ldr	r3, [sp, #16]
 800d60e:	eba0 000a 	sub.w	r0, r0, sl
 800d612:	2240      	movs	r2, #64	@ 0x40
 800d614:	4082      	lsls	r2, r0
 800d616:	4313      	orrs	r3, r2
 800d618:	3401      	adds	r4, #1
 800d61a:	9304      	str	r3, [sp, #16]
 800d61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d620:	4824      	ldr	r0, [pc, #144]	@ (800d6b4 <_svfiprintf_r+0x1e8>)
 800d622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d626:	2206      	movs	r2, #6
 800d628:	f7f2 fdda 	bl	80001e0 <memchr>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d036      	beq.n	800d69e <_svfiprintf_r+0x1d2>
 800d630:	4b21      	ldr	r3, [pc, #132]	@ (800d6b8 <_svfiprintf_r+0x1ec>)
 800d632:	bb1b      	cbnz	r3, 800d67c <_svfiprintf_r+0x1b0>
 800d634:	9b03      	ldr	r3, [sp, #12]
 800d636:	3307      	adds	r3, #7
 800d638:	f023 0307 	bic.w	r3, r3, #7
 800d63c:	3308      	adds	r3, #8
 800d63e:	9303      	str	r3, [sp, #12]
 800d640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d642:	4433      	add	r3, r6
 800d644:	9309      	str	r3, [sp, #36]	@ 0x24
 800d646:	e76a      	b.n	800d51e <_svfiprintf_r+0x52>
 800d648:	fb0c 3202 	mla	r2, ip, r2, r3
 800d64c:	460c      	mov	r4, r1
 800d64e:	2001      	movs	r0, #1
 800d650:	e7a8      	b.n	800d5a4 <_svfiprintf_r+0xd8>
 800d652:	2300      	movs	r3, #0
 800d654:	3401      	adds	r4, #1
 800d656:	9305      	str	r3, [sp, #20]
 800d658:	4619      	mov	r1, r3
 800d65a:	f04f 0c0a 	mov.w	ip, #10
 800d65e:	4620      	mov	r0, r4
 800d660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d664:	3a30      	subs	r2, #48	@ 0x30
 800d666:	2a09      	cmp	r2, #9
 800d668:	d903      	bls.n	800d672 <_svfiprintf_r+0x1a6>
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d0c6      	beq.n	800d5fc <_svfiprintf_r+0x130>
 800d66e:	9105      	str	r1, [sp, #20]
 800d670:	e7c4      	b.n	800d5fc <_svfiprintf_r+0x130>
 800d672:	fb0c 2101 	mla	r1, ip, r1, r2
 800d676:	4604      	mov	r4, r0
 800d678:	2301      	movs	r3, #1
 800d67a:	e7f0      	b.n	800d65e <_svfiprintf_r+0x192>
 800d67c:	ab03      	add	r3, sp, #12
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	462a      	mov	r2, r5
 800d682:	4b0e      	ldr	r3, [pc, #56]	@ (800d6bc <_svfiprintf_r+0x1f0>)
 800d684:	a904      	add	r1, sp, #16
 800d686:	4638      	mov	r0, r7
 800d688:	f7fd fe92 	bl	800b3b0 <_printf_float>
 800d68c:	1c42      	adds	r2, r0, #1
 800d68e:	4606      	mov	r6, r0
 800d690:	d1d6      	bne.n	800d640 <_svfiprintf_r+0x174>
 800d692:	89ab      	ldrh	r3, [r5, #12]
 800d694:	065b      	lsls	r3, r3, #25
 800d696:	f53f af2d 	bmi.w	800d4f4 <_svfiprintf_r+0x28>
 800d69a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d69c:	e72c      	b.n	800d4f8 <_svfiprintf_r+0x2c>
 800d69e:	ab03      	add	r3, sp, #12
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	462a      	mov	r2, r5
 800d6a4:	4b05      	ldr	r3, [pc, #20]	@ (800d6bc <_svfiprintf_r+0x1f0>)
 800d6a6:	a904      	add	r1, sp, #16
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	f7fe f919 	bl	800b8e0 <_printf_i>
 800d6ae:	e7ed      	b.n	800d68c <_svfiprintf_r+0x1c0>
 800d6b0:	0800fd1e 	.word	0x0800fd1e
 800d6b4:	0800fd28 	.word	0x0800fd28
 800d6b8:	0800b3b1 	.word	0x0800b3b1
 800d6bc:	0800d415 	.word	0x0800d415
 800d6c0:	0800fd24 	.word	0x0800fd24

0800d6c4 <__sflush_r>:
 800d6c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6cc:	0716      	lsls	r6, r2, #28
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	d454      	bmi.n	800d77e <__sflush_r+0xba>
 800d6d4:	684b      	ldr	r3, [r1, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dc02      	bgt.n	800d6e0 <__sflush_r+0x1c>
 800d6da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	dd48      	ble.n	800d772 <__sflush_r+0xae>
 800d6e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6e2:	2e00      	cmp	r6, #0
 800d6e4:	d045      	beq.n	800d772 <__sflush_r+0xae>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6ec:	682f      	ldr	r7, [r5, #0]
 800d6ee:	6a21      	ldr	r1, [r4, #32]
 800d6f0:	602b      	str	r3, [r5, #0]
 800d6f2:	d030      	beq.n	800d756 <__sflush_r+0x92>
 800d6f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6f6:	89a3      	ldrh	r3, [r4, #12]
 800d6f8:	0759      	lsls	r1, r3, #29
 800d6fa:	d505      	bpl.n	800d708 <__sflush_r+0x44>
 800d6fc:	6863      	ldr	r3, [r4, #4]
 800d6fe:	1ad2      	subs	r2, r2, r3
 800d700:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d702:	b10b      	cbz	r3, 800d708 <__sflush_r+0x44>
 800d704:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d706:	1ad2      	subs	r2, r2, r3
 800d708:	2300      	movs	r3, #0
 800d70a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d70c:	6a21      	ldr	r1, [r4, #32]
 800d70e:	4628      	mov	r0, r5
 800d710:	47b0      	blx	r6
 800d712:	1c43      	adds	r3, r0, #1
 800d714:	89a3      	ldrh	r3, [r4, #12]
 800d716:	d106      	bne.n	800d726 <__sflush_r+0x62>
 800d718:	6829      	ldr	r1, [r5, #0]
 800d71a:	291d      	cmp	r1, #29
 800d71c:	d82b      	bhi.n	800d776 <__sflush_r+0xb2>
 800d71e:	4a2a      	ldr	r2, [pc, #168]	@ (800d7c8 <__sflush_r+0x104>)
 800d720:	40ca      	lsrs	r2, r1
 800d722:	07d6      	lsls	r6, r2, #31
 800d724:	d527      	bpl.n	800d776 <__sflush_r+0xb2>
 800d726:	2200      	movs	r2, #0
 800d728:	6062      	str	r2, [r4, #4]
 800d72a:	04d9      	lsls	r1, r3, #19
 800d72c:	6922      	ldr	r2, [r4, #16]
 800d72e:	6022      	str	r2, [r4, #0]
 800d730:	d504      	bpl.n	800d73c <__sflush_r+0x78>
 800d732:	1c42      	adds	r2, r0, #1
 800d734:	d101      	bne.n	800d73a <__sflush_r+0x76>
 800d736:	682b      	ldr	r3, [r5, #0]
 800d738:	b903      	cbnz	r3, 800d73c <__sflush_r+0x78>
 800d73a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d73c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d73e:	602f      	str	r7, [r5, #0]
 800d740:	b1b9      	cbz	r1, 800d772 <__sflush_r+0xae>
 800d742:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d746:	4299      	cmp	r1, r3
 800d748:	d002      	beq.n	800d750 <__sflush_r+0x8c>
 800d74a:	4628      	mov	r0, r5
 800d74c:	f7ff f9e8 	bl	800cb20 <_free_r>
 800d750:	2300      	movs	r3, #0
 800d752:	6363      	str	r3, [r4, #52]	@ 0x34
 800d754:	e00d      	b.n	800d772 <__sflush_r+0xae>
 800d756:	2301      	movs	r3, #1
 800d758:	4628      	mov	r0, r5
 800d75a:	47b0      	blx	r6
 800d75c:	4602      	mov	r2, r0
 800d75e:	1c50      	adds	r0, r2, #1
 800d760:	d1c9      	bne.n	800d6f6 <__sflush_r+0x32>
 800d762:	682b      	ldr	r3, [r5, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d0c6      	beq.n	800d6f6 <__sflush_r+0x32>
 800d768:	2b1d      	cmp	r3, #29
 800d76a:	d001      	beq.n	800d770 <__sflush_r+0xac>
 800d76c:	2b16      	cmp	r3, #22
 800d76e:	d11e      	bne.n	800d7ae <__sflush_r+0xea>
 800d770:	602f      	str	r7, [r5, #0]
 800d772:	2000      	movs	r0, #0
 800d774:	e022      	b.n	800d7bc <__sflush_r+0xf8>
 800d776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d77a:	b21b      	sxth	r3, r3
 800d77c:	e01b      	b.n	800d7b6 <__sflush_r+0xf2>
 800d77e:	690f      	ldr	r7, [r1, #16]
 800d780:	2f00      	cmp	r7, #0
 800d782:	d0f6      	beq.n	800d772 <__sflush_r+0xae>
 800d784:	0793      	lsls	r3, r2, #30
 800d786:	680e      	ldr	r6, [r1, #0]
 800d788:	bf08      	it	eq
 800d78a:	694b      	ldreq	r3, [r1, #20]
 800d78c:	600f      	str	r7, [r1, #0]
 800d78e:	bf18      	it	ne
 800d790:	2300      	movne	r3, #0
 800d792:	eba6 0807 	sub.w	r8, r6, r7
 800d796:	608b      	str	r3, [r1, #8]
 800d798:	f1b8 0f00 	cmp.w	r8, #0
 800d79c:	dde9      	ble.n	800d772 <__sflush_r+0xae>
 800d79e:	6a21      	ldr	r1, [r4, #32]
 800d7a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d7a2:	4643      	mov	r3, r8
 800d7a4:	463a      	mov	r2, r7
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	47b0      	blx	r6
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	dc08      	bgt.n	800d7c0 <__sflush_r+0xfc>
 800d7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7b6:	81a3      	strh	r3, [r4, #12]
 800d7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c0:	4407      	add	r7, r0
 800d7c2:	eba8 0800 	sub.w	r8, r8, r0
 800d7c6:	e7e7      	b.n	800d798 <__sflush_r+0xd4>
 800d7c8:	20400001 	.word	0x20400001

0800d7cc <_fflush_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	690b      	ldr	r3, [r1, #16]
 800d7d0:	4605      	mov	r5, r0
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	b913      	cbnz	r3, 800d7dc <_fflush_r+0x10>
 800d7d6:	2500      	movs	r5, #0
 800d7d8:	4628      	mov	r0, r5
 800d7da:	bd38      	pop	{r3, r4, r5, pc}
 800d7dc:	b118      	cbz	r0, 800d7e6 <_fflush_r+0x1a>
 800d7de:	6a03      	ldr	r3, [r0, #32]
 800d7e0:	b90b      	cbnz	r3, 800d7e6 <_fflush_r+0x1a>
 800d7e2:	f7fe fa27 	bl	800bc34 <__sinit>
 800d7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d0f3      	beq.n	800d7d6 <_fflush_r+0xa>
 800d7ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7f0:	07d0      	lsls	r0, r2, #31
 800d7f2:	d404      	bmi.n	800d7fe <_fflush_r+0x32>
 800d7f4:	0599      	lsls	r1, r3, #22
 800d7f6:	d402      	bmi.n	800d7fe <_fflush_r+0x32>
 800d7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7fa:	f7fe fb34 	bl	800be66 <__retarget_lock_acquire_recursive>
 800d7fe:	4628      	mov	r0, r5
 800d800:	4621      	mov	r1, r4
 800d802:	f7ff ff5f 	bl	800d6c4 <__sflush_r>
 800d806:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d808:	07da      	lsls	r2, r3, #31
 800d80a:	4605      	mov	r5, r0
 800d80c:	d4e4      	bmi.n	800d7d8 <_fflush_r+0xc>
 800d80e:	89a3      	ldrh	r3, [r4, #12]
 800d810:	059b      	lsls	r3, r3, #22
 800d812:	d4e1      	bmi.n	800d7d8 <_fflush_r+0xc>
 800d814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d816:	f7fe fb27 	bl	800be68 <__retarget_lock_release_recursive>
 800d81a:	e7dd      	b.n	800d7d8 <_fflush_r+0xc>

0800d81c <memmove>:
 800d81c:	4288      	cmp	r0, r1
 800d81e:	b510      	push	{r4, lr}
 800d820:	eb01 0402 	add.w	r4, r1, r2
 800d824:	d902      	bls.n	800d82c <memmove+0x10>
 800d826:	4284      	cmp	r4, r0
 800d828:	4623      	mov	r3, r4
 800d82a:	d807      	bhi.n	800d83c <memmove+0x20>
 800d82c:	1e43      	subs	r3, r0, #1
 800d82e:	42a1      	cmp	r1, r4
 800d830:	d008      	beq.n	800d844 <memmove+0x28>
 800d832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d83a:	e7f8      	b.n	800d82e <memmove+0x12>
 800d83c:	4402      	add	r2, r0
 800d83e:	4601      	mov	r1, r0
 800d840:	428a      	cmp	r2, r1
 800d842:	d100      	bne.n	800d846 <memmove+0x2a>
 800d844:	bd10      	pop	{r4, pc}
 800d846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d84a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d84e:	e7f7      	b.n	800d840 <memmove+0x24>

0800d850 <_sbrk_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	4d06      	ldr	r5, [pc, #24]	@ (800d86c <_sbrk_r+0x1c>)
 800d854:	2300      	movs	r3, #0
 800d856:	4604      	mov	r4, r0
 800d858:	4608      	mov	r0, r1
 800d85a:	602b      	str	r3, [r5, #0]
 800d85c:	f7f6 f998 	bl	8003b90 <_sbrk>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d102      	bne.n	800d86a <_sbrk_r+0x1a>
 800d864:	682b      	ldr	r3, [r5, #0]
 800d866:	b103      	cbz	r3, 800d86a <_sbrk_r+0x1a>
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	20000a8c 	.word	0x20000a8c

0800d870 <memcpy>:
 800d870:	440a      	add	r2, r1
 800d872:	4291      	cmp	r1, r2
 800d874:	f100 33ff 	add.w	r3, r0, #4294967295
 800d878:	d100      	bne.n	800d87c <memcpy+0xc>
 800d87a:	4770      	bx	lr
 800d87c:	b510      	push	{r4, lr}
 800d87e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d882:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d886:	4291      	cmp	r1, r2
 800d888:	d1f9      	bne.n	800d87e <memcpy+0xe>
 800d88a:	bd10      	pop	{r4, pc}

0800d88c <__assert_func>:
 800d88c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d88e:	4614      	mov	r4, r2
 800d890:	461a      	mov	r2, r3
 800d892:	4b09      	ldr	r3, [pc, #36]	@ (800d8b8 <__assert_func+0x2c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4605      	mov	r5, r0
 800d898:	68d8      	ldr	r0, [r3, #12]
 800d89a:	b14c      	cbz	r4, 800d8b0 <__assert_func+0x24>
 800d89c:	4b07      	ldr	r3, [pc, #28]	@ (800d8bc <__assert_func+0x30>)
 800d89e:	9100      	str	r1, [sp, #0]
 800d8a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8a4:	4906      	ldr	r1, [pc, #24]	@ (800d8c0 <__assert_func+0x34>)
 800d8a6:	462b      	mov	r3, r5
 800d8a8:	f000 f870 	bl	800d98c <fiprintf>
 800d8ac:	f000 f880 	bl	800d9b0 <abort>
 800d8b0:	4b04      	ldr	r3, [pc, #16]	@ (800d8c4 <__assert_func+0x38>)
 800d8b2:	461c      	mov	r4, r3
 800d8b4:	e7f3      	b.n	800d89e <__assert_func+0x12>
 800d8b6:	bf00      	nop
 800d8b8:	20000044 	.word	0x20000044
 800d8bc:	0800fd39 	.word	0x0800fd39
 800d8c0:	0800fd46 	.word	0x0800fd46
 800d8c4:	0800fd74 	.word	0x0800fd74

0800d8c8 <_calloc_r>:
 800d8c8:	b570      	push	{r4, r5, r6, lr}
 800d8ca:	fba1 5402 	umull	r5, r4, r1, r2
 800d8ce:	b934      	cbnz	r4, 800d8de <_calloc_r+0x16>
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	f7ff f999 	bl	800cc08 <_malloc_r>
 800d8d6:	4606      	mov	r6, r0
 800d8d8:	b928      	cbnz	r0, 800d8e6 <_calloc_r+0x1e>
 800d8da:	4630      	mov	r0, r6
 800d8dc:	bd70      	pop	{r4, r5, r6, pc}
 800d8de:	220c      	movs	r2, #12
 800d8e0:	6002      	str	r2, [r0, #0]
 800d8e2:	2600      	movs	r6, #0
 800d8e4:	e7f9      	b.n	800d8da <_calloc_r+0x12>
 800d8e6:	462a      	mov	r2, r5
 800d8e8:	4621      	mov	r1, r4
 800d8ea:	f7fe fa3e 	bl	800bd6a <memset>
 800d8ee:	e7f4      	b.n	800d8da <_calloc_r+0x12>

0800d8f0 <__ascii_mbtowc>:
 800d8f0:	b082      	sub	sp, #8
 800d8f2:	b901      	cbnz	r1, 800d8f6 <__ascii_mbtowc+0x6>
 800d8f4:	a901      	add	r1, sp, #4
 800d8f6:	b142      	cbz	r2, 800d90a <__ascii_mbtowc+0x1a>
 800d8f8:	b14b      	cbz	r3, 800d90e <__ascii_mbtowc+0x1e>
 800d8fa:	7813      	ldrb	r3, [r2, #0]
 800d8fc:	600b      	str	r3, [r1, #0]
 800d8fe:	7812      	ldrb	r2, [r2, #0]
 800d900:	1e10      	subs	r0, r2, #0
 800d902:	bf18      	it	ne
 800d904:	2001      	movne	r0, #1
 800d906:	b002      	add	sp, #8
 800d908:	4770      	bx	lr
 800d90a:	4610      	mov	r0, r2
 800d90c:	e7fb      	b.n	800d906 <__ascii_mbtowc+0x16>
 800d90e:	f06f 0001 	mvn.w	r0, #1
 800d912:	e7f8      	b.n	800d906 <__ascii_mbtowc+0x16>

0800d914 <_realloc_r>:
 800d914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d918:	4607      	mov	r7, r0
 800d91a:	4614      	mov	r4, r2
 800d91c:	460d      	mov	r5, r1
 800d91e:	b921      	cbnz	r1, 800d92a <_realloc_r+0x16>
 800d920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d924:	4611      	mov	r1, r2
 800d926:	f7ff b96f 	b.w	800cc08 <_malloc_r>
 800d92a:	b92a      	cbnz	r2, 800d938 <_realloc_r+0x24>
 800d92c:	f7ff f8f8 	bl	800cb20 <_free_r>
 800d930:	4625      	mov	r5, r4
 800d932:	4628      	mov	r0, r5
 800d934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d938:	f000 f841 	bl	800d9be <_malloc_usable_size_r>
 800d93c:	4284      	cmp	r4, r0
 800d93e:	4606      	mov	r6, r0
 800d940:	d802      	bhi.n	800d948 <_realloc_r+0x34>
 800d942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d946:	d8f4      	bhi.n	800d932 <_realloc_r+0x1e>
 800d948:	4621      	mov	r1, r4
 800d94a:	4638      	mov	r0, r7
 800d94c:	f7ff f95c 	bl	800cc08 <_malloc_r>
 800d950:	4680      	mov	r8, r0
 800d952:	b908      	cbnz	r0, 800d958 <_realloc_r+0x44>
 800d954:	4645      	mov	r5, r8
 800d956:	e7ec      	b.n	800d932 <_realloc_r+0x1e>
 800d958:	42b4      	cmp	r4, r6
 800d95a:	4622      	mov	r2, r4
 800d95c:	4629      	mov	r1, r5
 800d95e:	bf28      	it	cs
 800d960:	4632      	movcs	r2, r6
 800d962:	f7ff ff85 	bl	800d870 <memcpy>
 800d966:	4629      	mov	r1, r5
 800d968:	4638      	mov	r0, r7
 800d96a:	f7ff f8d9 	bl	800cb20 <_free_r>
 800d96e:	e7f1      	b.n	800d954 <_realloc_r+0x40>

0800d970 <__ascii_wctomb>:
 800d970:	4603      	mov	r3, r0
 800d972:	4608      	mov	r0, r1
 800d974:	b141      	cbz	r1, 800d988 <__ascii_wctomb+0x18>
 800d976:	2aff      	cmp	r2, #255	@ 0xff
 800d978:	d904      	bls.n	800d984 <__ascii_wctomb+0x14>
 800d97a:	228a      	movs	r2, #138	@ 0x8a
 800d97c:	601a      	str	r2, [r3, #0]
 800d97e:	f04f 30ff 	mov.w	r0, #4294967295
 800d982:	4770      	bx	lr
 800d984:	700a      	strb	r2, [r1, #0]
 800d986:	2001      	movs	r0, #1
 800d988:	4770      	bx	lr
	...

0800d98c <fiprintf>:
 800d98c:	b40e      	push	{r1, r2, r3}
 800d98e:	b503      	push	{r0, r1, lr}
 800d990:	4601      	mov	r1, r0
 800d992:	ab03      	add	r3, sp, #12
 800d994:	4805      	ldr	r0, [pc, #20]	@ (800d9ac <fiprintf+0x20>)
 800d996:	f853 2b04 	ldr.w	r2, [r3], #4
 800d99a:	6800      	ldr	r0, [r0, #0]
 800d99c:	9301      	str	r3, [sp, #4]
 800d99e:	f000 f83f 	bl	800da20 <_vfiprintf_r>
 800d9a2:	b002      	add	sp, #8
 800d9a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9a8:	b003      	add	sp, #12
 800d9aa:	4770      	bx	lr
 800d9ac:	20000044 	.word	0x20000044

0800d9b0 <abort>:
 800d9b0:	b508      	push	{r3, lr}
 800d9b2:	2006      	movs	r0, #6
 800d9b4:	f000 fa08 	bl	800ddc8 <raise>
 800d9b8:	2001      	movs	r0, #1
 800d9ba:	f7f6 f871 	bl	8003aa0 <_exit>

0800d9be <_malloc_usable_size_r>:
 800d9be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9c2:	1f18      	subs	r0, r3, #4
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	bfbc      	itt	lt
 800d9c8:	580b      	ldrlt	r3, [r1, r0]
 800d9ca:	18c0      	addlt	r0, r0, r3
 800d9cc:	4770      	bx	lr

0800d9ce <__sfputc_r>:
 800d9ce:	6893      	ldr	r3, [r2, #8]
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	b410      	push	{r4}
 800d9d6:	6093      	str	r3, [r2, #8]
 800d9d8:	da08      	bge.n	800d9ec <__sfputc_r+0x1e>
 800d9da:	6994      	ldr	r4, [r2, #24]
 800d9dc:	42a3      	cmp	r3, r4
 800d9de:	db01      	blt.n	800d9e4 <__sfputc_r+0x16>
 800d9e0:	290a      	cmp	r1, #10
 800d9e2:	d103      	bne.n	800d9ec <__sfputc_r+0x1e>
 800d9e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9e8:	f000 b932 	b.w	800dc50 <__swbuf_r>
 800d9ec:	6813      	ldr	r3, [r2, #0]
 800d9ee:	1c58      	adds	r0, r3, #1
 800d9f0:	6010      	str	r0, [r2, #0]
 800d9f2:	7019      	strb	r1, [r3, #0]
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <__sfputs_r>:
 800d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fe:	4606      	mov	r6, r0
 800da00:	460f      	mov	r7, r1
 800da02:	4614      	mov	r4, r2
 800da04:	18d5      	adds	r5, r2, r3
 800da06:	42ac      	cmp	r4, r5
 800da08:	d101      	bne.n	800da0e <__sfputs_r+0x12>
 800da0a:	2000      	movs	r0, #0
 800da0c:	e007      	b.n	800da1e <__sfputs_r+0x22>
 800da0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da12:	463a      	mov	r2, r7
 800da14:	4630      	mov	r0, r6
 800da16:	f7ff ffda 	bl	800d9ce <__sfputc_r>
 800da1a:	1c43      	adds	r3, r0, #1
 800da1c:	d1f3      	bne.n	800da06 <__sfputs_r+0xa>
 800da1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da20 <_vfiprintf_r>:
 800da20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da24:	460d      	mov	r5, r1
 800da26:	b09d      	sub	sp, #116	@ 0x74
 800da28:	4614      	mov	r4, r2
 800da2a:	4698      	mov	r8, r3
 800da2c:	4606      	mov	r6, r0
 800da2e:	b118      	cbz	r0, 800da38 <_vfiprintf_r+0x18>
 800da30:	6a03      	ldr	r3, [r0, #32]
 800da32:	b90b      	cbnz	r3, 800da38 <_vfiprintf_r+0x18>
 800da34:	f7fe f8fe 	bl	800bc34 <__sinit>
 800da38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da3a:	07d9      	lsls	r1, r3, #31
 800da3c:	d405      	bmi.n	800da4a <_vfiprintf_r+0x2a>
 800da3e:	89ab      	ldrh	r3, [r5, #12]
 800da40:	059a      	lsls	r2, r3, #22
 800da42:	d402      	bmi.n	800da4a <_vfiprintf_r+0x2a>
 800da44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da46:	f7fe fa0e 	bl	800be66 <__retarget_lock_acquire_recursive>
 800da4a:	89ab      	ldrh	r3, [r5, #12]
 800da4c:	071b      	lsls	r3, r3, #28
 800da4e:	d501      	bpl.n	800da54 <_vfiprintf_r+0x34>
 800da50:	692b      	ldr	r3, [r5, #16]
 800da52:	b99b      	cbnz	r3, 800da7c <_vfiprintf_r+0x5c>
 800da54:	4629      	mov	r1, r5
 800da56:	4630      	mov	r0, r6
 800da58:	f000 f938 	bl	800dccc <__swsetup_r>
 800da5c:	b170      	cbz	r0, 800da7c <_vfiprintf_r+0x5c>
 800da5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da60:	07dc      	lsls	r4, r3, #31
 800da62:	d504      	bpl.n	800da6e <_vfiprintf_r+0x4e>
 800da64:	f04f 30ff 	mov.w	r0, #4294967295
 800da68:	b01d      	add	sp, #116	@ 0x74
 800da6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da6e:	89ab      	ldrh	r3, [r5, #12]
 800da70:	0598      	lsls	r0, r3, #22
 800da72:	d4f7      	bmi.n	800da64 <_vfiprintf_r+0x44>
 800da74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da76:	f7fe f9f7 	bl	800be68 <__retarget_lock_release_recursive>
 800da7a:	e7f3      	b.n	800da64 <_vfiprintf_r+0x44>
 800da7c:	2300      	movs	r3, #0
 800da7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da80:	2320      	movs	r3, #32
 800da82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da86:	f8cd 800c 	str.w	r8, [sp, #12]
 800da8a:	2330      	movs	r3, #48	@ 0x30
 800da8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc3c <_vfiprintf_r+0x21c>
 800da90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da94:	f04f 0901 	mov.w	r9, #1
 800da98:	4623      	mov	r3, r4
 800da9a:	469a      	mov	sl, r3
 800da9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daa0:	b10a      	cbz	r2, 800daa6 <_vfiprintf_r+0x86>
 800daa2:	2a25      	cmp	r2, #37	@ 0x25
 800daa4:	d1f9      	bne.n	800da9a <_vfiprintf_r+0x7a>
 800daa6:	ebba 0b04 	subs.w	fp, sl, r4
 800daaa:	d00b      	beq.n	800dac4 <_vfiprintf_r+0xa4>
 800daac:	465b      	mov	r3, fp
 800daae:	4622      	mov	r2, r4
 800dab0:	4629      	mov	r1, r5
 800dab2:	4630      	mov	r0, r6
 800dab4:	f7ff ffa2 	bl	800d9fc <__sfputs_r>
 800dab8:	3001      	adds	r0, #1
 800daba:	f000 80a7 	beq.w	800dc0c <_vfiprintf_r+0x1ec>
 800dabe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dac0:	445a      	add	r2, fp
 800dac2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dac4:	f89a 3000 	ldrb.w	r3, [sl]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 809f 	beq.w	800dc0c <_vfiprintf_r+0x1ec>
 800dace:	2300      	movs	r3, #0
 800dad0:	f04f 32ff 	mov.w	r2, #4294967295
 800dad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dad8:	f10a 0a01 	add.w	sl, sl, #1
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	9307      	str	r3, [sp, #28]
 800dae0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dae4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dae6:	4654      	mov	r4, sl
 800dae8:	2205      	movs	r2, #5
 800daea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daee:	4853      	ldr	r0, [pc, #332]	@ (800dc3c <_vfiprintf_r+0x21c>)
 800daf0:	f7f2 fb76 	bl	80001e0 <memchr>
 800daf4:	9a04      	ldr	r2, [sp, #16]
 800daf6:	b9d8      	cbnz	r0, 800db30 <_vfiprintf_r+0x110>
 800daf8:	06d1      	lsls	r1, r2, #27
 800dafa:	bf44      	itt	mi
 800dafc:	2320      	movmi	r3, #32
 800dafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db02:	0713      	lsls	r3, r2, #28
 800db04:	bf44      	itt	mi
 800db06:	232b      	movmi	r3, #43	@ 0x2b
 800db08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db0c:	f89a 3000 	ldrb.w	r3, [sl]
 800db10:	2b2a      	cmp	r3, #42	@ 0x2a
 800db12:	d015      	beq.n	800db40 <_vfiprintf_r+0x120>
 800db14:	9a07      	ldr	r2, [sp, #28]
 800db16:	4654      	mov	r4, sl
 800db18:	2000      	movs	r0, #0
 800db1a:	f04f 0c0a 	mov.w	ip, #10
 800db1e:	4621      	mov	r1, r4
 800db20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db24:	3b30      	subs	r3, #48	@ 0x30
 800db26:	2b09      	cmp	r3, #9
 800db28:	d94b      	bls.n	800dbc2 <_vfiprintf_r+0x1a2>
 800db2a:	b1b0      	cbz	r0, 800db5a <_vfiprintf_r+0x13a>
 800db2c:	9207      	str	r2, [sp, #28]
 800db2e:	e014      	b.n	800db5a <_vfiprintf_r+0x13a>
 800db30:	eba0 0308 	sub.w	r3, r0, r8
 800db34:	fa09 f303 	lsl.w	r3, r9, r3
 800db38:	4313      	orrs	r3, r2
 800db3a:	9304      	str	r3, [sp, #16]
 800db3c:	46a2      	mov	sl, r4
 800db3e:	e7d2      	b.n	800dae6 <_vfiprintf_r+0xc6>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	1d19      	adds	r1, r3, #4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	9103      	str	r1, [sp, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	bfbb      	ittet	lt
 800db4c:	425b      	neglt	r3, r3
 800db4e:	f042 0202 	orrlt.w	r2, r2, #2
 800db52:	9307      	strge	r3, [sp, #28]
 800db54:	9307      	strlt	r3, [sp, #28]
 800db56:	bfb8      	it	lt
 800db58:	9204      	strlt	r2, [sp, #16]
 800db5a:	7823      	ldrb	r3, [r4, #0]
 800db5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800db5e:	d10a      	bne.n	800db76 <_vfiprintf_r+0x156>
 800db60:	7863      	ldrb	r3, [r4, #1]
 800db62:	2b2a      	cmp	r3, #42	@ 0x2a
 800db64:	d132      	bne.n	800dbcc <_vfiprintf_r+0x1ac>
 800db66:	9b03      	ldr	r3, [sp, #12]
 800db68:	1d1a      	adds	r2, r3, #4
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	9203      	str	r2, [sp, #12]
 800db6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db72:	3402      	adds	r4, #2
 800db74:	9305      	str	r3, [sp, #20]
 800db76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc4c <_vfiprintf_r+0x22c>
 800db7a:	7821      	ldrb	r1, [r4, #0]
 800db7c:	2203      	movs	r2, #3
 800db7e:	4650      	mov	r0, sl
 800db80:	f7f2 fb2e 	bl	80001e0 <memchr>
 800db84:	b138      	cbz	r0, 800db96 <_vfiprintf_r+0x176>
 800db86:	9b04      	ldr	r3, [sp, #16]
 800db88:	eba0 000a 	sub.w	r0, r0, sl
 800db8c:	2240      	movs	r2, #64	@ 0x40
 800db8e:	4082      	lsls	r2, r0
 800db90:	4313      	orrs	r3, r2
 800db92:	3401      	adds	r4, #1
 800db94:	9304      	str	r3, [sp, #16]
 800db96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9a:	4829      	ldr	r0, [pc, #164]	@ (800dc40 <_vfiprintf_r+0x220>)
 800db9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dba0:	2206      	movs	r2, #6
 800dba2:	f7f2 fb1d 	bl	80001e0 <memchr>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	d03f      	beq.n	800dc2a <_vfiprintf_r+0x20a>
 800dbaa:	4b26      	ldr	r3, [pc, #152]	@ (800dc44 <_vfiprintf_r+0x224>)
 800dbac:	bb1b      	cbnz	r3, 800dbf6 <_vfiprintf_r+0x1d6>
 800dbae:	9b03      	ldr	r3, [sp, #12]
 800dbb0:	3307      	adds	r3, #7
 800dbb2:	f023 0307 	bic.w	r3, r3, #7
 800dbb6:	3308      	adds	r3, #8
 800dbb8:	9303      	str	r3, [sp, #12]
 800dbba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbbc:	443b      	add	r3, r7
 800dbbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbc0:	e76a      	b.n	800da98 <_vfiprintf_r+0x78>
 800dbc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	2001      	movs	r0, #1
 800dbca:	e7a8      	b.n	800db1e <_vfiprintf_r+0xfe>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	3401      	adds	r4, #1
 800dbd0:	9305      	str	r3, [sp, #20]
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	f04f 0c0a 	mov.w	ip, #10
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbde:	3a30      	subs	r2, #48	@ 0x30
 800dbe0:	2a09      	cmp	r2, #9
 800dbe2:	d903      	bls.n	800dbec <_vfiprintf_r+0x1cc>
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d0c6      	beq.n	800db76 <_vfiprintf_r+0x156>
 800dbe8:	9105      	str	r1, [sp, #20]
 800dbea:	e7c4      	b.n	800db76 <_vfiprintf_r+0x156>
 800dbec:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e7f0      	b.n	800dbd8 <_vfiprintf_r+0x1b8>
 800dbf6:	ab03      	add	r3, sp, #12
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	462a      	mov	r2, r5
 800dbfc:	4b12      	ldr	r3, [pc, #72]	@ (800dc48 <_vfiprintf_r+0x228>)
 800dbfe:	a904      	add	r1, sp, #16
 800dc00:	4630      	mov	r0, r6
 800dc02:	f7fd fbd5 	bl	800b3b0 <_printf_float>
 800dc06:	4607      	mov	r7, r0
 800dc08:	1c78      	adds	r0, r7, #1
 800dc0a:	d1d6      	bne.n	800dbba <_vfiprintf_r+0x19a>
 800dc0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc0e:	07d9      	lsls	r1, r3, #31
 800dc10:	d405      	bmi.n	800dc1e <_vfiprintf_r+0x1fe>
 800dc12:	89ab      	ldrh	r3, [r5, #12]
 800dc14:	059a      	lsls	r2, r3, #22
 800dc16:	d402      	bmi.n	800dc1e <_vfiprintf_r+0x1fe>
 800dc18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc1a:	f7fe f925 	bl	800be68 <__retarget_lock_release_recursive>
 800dc1e:	89ab      	ldrh	r3, [r5, #12]
 800dc20:	065b      	lsls	r3, r3, #25
 800dc22:	f53f af1f 	bmi.w	800da64 <_vfiprintf_r+0x44>
 800dc26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc28:	e71e      	b.n	800da68 <_vfiprintf_r+0x48>
 800dc2a:	ab03      	add	r3, sp, #12
 800dc2c:	9300      	str	r3, [sp, #0]
 800dc2e:	462a      	mov	r2, r5
 800dc30:	4b05      	ldr	r3, [pc, #20]	@ (800dc48 <_vfiprintf_r+0x228>)
 800dc32:	a904      	add	r1, sp, #16
 800dc34:	4630      	mov	r0, r6
 800dc36:	f7fd fe53 	bl	800b8e0 <_printf_i>
 800dc3a:	e7e4      	b.n	800dc06 <_vfiprintf_r+0x1e6>
 800dc3c:	0800fd1e 	.word	0x0800fd1e
 800dc40:	0800fd28 	.word	0x0800fd28
 800dc44:	0800b3b1 	.word	0x0800b3b1
 800dc48:	0800d9fd 	.word	0x0800d9fd
 800dc4c:	0800fd24 	.word	0x0800fd24

0800dc50 <__swbuf_r>:
 800dc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc52:	460e      	mov	r6, r1
 800dc54:	4614      	mov	r4, r2
 800dc56:	4605      	mov	r5, r0
 800dc58:	b118      	cbz	r0, 800dc62 <__swbuf_r+0x12>
 800dc5a:	6a03      	ldr	r3, [r0, #32]
 800dc5c:	b90b      	cbnz	r3, 800dc62 <__swbuf_r+0x12>
 800dc5e:	f7fd ffe9 	bl	800bc34 <__sinit>
 800dc62:	69a3      	ldr	r3, [r4, #24]
 800dc64:	60a3      	str	r3, [r4, #8]
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	071a      	lsls	r2, r3, #28
 800dc6a:	d501      	bpl.n	800dc70 <__swbuf_r+0x20>
 800dc6c:	6923      	ldr	r3, [r4, #16]
 800dc6e:	b943      	cbnz	r3, 800dc82 <__swbuf_r+0x32>
 800dc70:	4621      	mov	r1, r4
 800dc72:	4628      	mov	r0, r5
 800dc74:	f000 f82a 	bl	800dccc <__swsetup_r>
 800dc78:	b118      	cbz	r0, 800dc82 <__swbuf_r+0x32>
 800dc7a:	f04f 37ff 	mov.w	r7, #4294967295
 800dc7e:	4638      	mov	r0, r7
 800dc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc82:	6823      	ldr	r3, [r4, #0]
 800dc84:	6922      	ldr	r2, [r4, #16]
 800dc86:	1a98      	subs	r0, r3, r2
 800dc88:	6963      	ldr	r3, [r4, #20]
 800dc8a:	b2f6      	uxtb	r6, r6
 800dc8c:	4283      	cmp	r3, r0
 800dc8e:	4637      	mov	r7, r6
 800dc90:	dc05      	bgt.n	800dc9e <__swbuf_r+0x4e>
 800dc92:	4621      	mov	r1, r4
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7ff fd99 	bl	800d7cc <_fflush_r>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d1ed      	bne.n	800dc7a <__swbuf_r+0x2a>
 800dc9e:	68a3      	ldr	r3, [r4, #8]
 800dca0:	3b01      	subs	r3, #1
 800dca2:	60a3      	str	r3, [r4, #8]
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	6022      	str	r2, [r4, #0]
 800dcaa:	701e      	strb	r6, [r3, #0]
 800dcac:	6962      	ldr	r2, [r4, #20]
 800dcae:	1c43      	adds	r3, r0, #1
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d004      	beq.n	800dcbe <__swbuf_r+0x6e>
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	07db      	lsls	r3, r3, #31
 800dcb8:	d5e1      	bpl.n	800dc7e <__swbuf_r+0x2e>
 800dcba:	2e0a      	cmp	r6, #10
 800dcbc:	d1df      	bne.n	800dc7e <__swbuf_r+0x2e>
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	f7ff fd83 	bl	800d7cc <_fflush_r>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d0d9      	beq.n	800dc7e <__swbuf_r+0x2e>
 800dcca:	e7d6      	b.n	800dc7a <__swbuf_r+0x2a>

0800dccc <__swsetup_r>:
 800dccc:	b538      	push	{r3, r4, r5, lr}
 800dcce:	4b29      	ldr	r3, [pc, #164]	@ (800dd74 <__swsetup_r+0xa8>)
 800dcd0:	4605      	mov	r5, r0
 800dcd2:	6818      	ldr	r0, [r3, #0]
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	b118      	cbz	r0, 800dce0 <__swsetup_r+0x14>
 800dcd8:	6a03      	ldr	r3, [r0, #32]
 800dcda:	b90b      	cbnz	r3, 800dce0 <__swsetup_r+0x14>
 800dcdc:	f7fd ffaa 	bl	800bc34 <__sinit>
 800dce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce4:	0719      	lsls	r1, r3, #28
 800dce6:	d422      	bmi.n	800dd2e <__swsetup_r+0x62>
 800dce8:	06da      	lsls	r2, r3, #27
 800dcea:	d407      	bmi.n	800dcfc <__swsetup_r+0x30>
 800dcec:	2209      	movs	r2, #9
 800dcee:	602a      	str	r2, [r5, #0]
 800dcf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcf4:	81a3      	strh	r3, [r4, #12]
 800dcf6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcfa:	e033      	b.n	800dd64 <__swsetup_r+0x98>
 800dcfc:	0758      	lsls	r0, r3, #29
 800dcfe:	d512      	bpl.n	800dd26 <__swsetup_r+0x5a>
 800dd00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd02:	b141      	cbz	r1, 800dd16 <__swsetup_r+0x4a>
 800dd04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd08:	4299      	cmp	r1, r3
 800dd0a:	d002      	beq.n	800dd12 <__swsetup_r+0x46>
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	f7fe ff07 	bl	800cb20 <_free_r>
 800dd12:	2300      	movs	r3, #0
 800dd14:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd16:	89a3      	ldrh	r3, [r4, #12]
 800dd18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd1c:	81a3      	strh	r3, [r4, #12]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	6063      	str	r3, [r4, #4]
 800dd22:	6923      	ldr	r3, [r4, #16]
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	89a3      	ldrh	r3, [r4, #12]
 800dd28:	f043 0308 	orr.w	r3, r3, #8
 800dd2c:	81a3      	strh	r3, [r4, #12]
 800dd2e:	6923      	ldr	r3, [r4, #16]
 800dd30:	b94b      	cbnz	r3, 800dd46 <__swsetup_r+0x7a>
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd3c:	d003      	beq.n	800dd46 <__swsetup_r+0x7a>
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4628      	mov	r0, r5
 800dd42:	f000 f883 	bl	800de4c <__smakebuf_r>
 800dd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd4a:	f013 0201 	ands.w	r2, r3, #1
 800dd4e:	d00a      	beq.n	800dd66 <__swsetup_r+0x9a>
 800dd50:	2200      	movs	r2, #0
 800dd52:	60a2      	str	r2, [r4, #8]
 800dd54:	6962      	ldr	r2, [r4, #20]
 800dd56:	4252      	negs	r2, r2
 800dd58:	61a2      	str	r2, [r4, #24]
 800dd5a:	6922      	ldr	r2, [r4, #16]
 800dd5c:	b942      	cbnz	r2, 800dd70 <__swsetup_r+0xa4>
 800dd5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd62:	d1c5      	bne.n	800dcf0 <__swsetup_r+0x24>
 800dd64:	bd38      	pop	{r3, r4, r5, pc}
 800dd66:	0799      	lsls	r1, r3, #30
 800dd68:	bf58      	it	pl
 800dd6a:	6962      	ldrpl	r2, [r4, #20]
 800dd6c:	60a2      	str	r2, [r4, #8]
 800dd6e:	e7f4      	b.n	800dd5a <__swsetup_r+0x8e>
 800dd70:	2000      	movs	r0, #0
 800dd72:	e7f7      	b.n	800dd64 <__swsetup_r+0x98>
 800dd74:	20000044 	.word	0x20000044

0800dd78 <_raise_r>:
 800dd78:	291f      	cmp	r1, #31
 800dd7a:	b538      	push	{r3, r4, r5, lr}
 800dd7c:	4605      	mov	r5, r0
 800dd7e:	460c      	mov	r4, r1
 800dd80:	d904      	bls.n	800dd8c <_raise_r+0x14>
 800dd82:	2316      	movs	r3, #22
 800dd84:	6003      	str	r3, [r0, #0]
 800dd86:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd8e:	b112      	cbz	r2, 800dd96 <_raise_r+0x1e>
 800dd90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd94:	b94b      	cbnz	r3, 800ddaa <_raise_r+0x32>
 800dd96:	4628      	mov	r0, r5
 800dd98:	f000 f830 	bl	800ddfc <_getpid_r>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	4601      	mov	r1, r0
 800dda0:	4628      	mov	r0, r5
 800dda2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dda6:	f000 b817 	b.w	800ddd8 <_kill_r>
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d00a      	beq.n	800ddc4 <_raise_r+0x4c>
 800ddae:	1c59      	adds	r1, r3, #1
 800ddb0:	d103      	bne.n	800ddba <_raise_r+0x42>
 800ddb2:	2316      	movs	r3, #22
 800ddb4:	6003      	str	r3, [r0, #0]
 800ddb6:	2001      	movs	r0, #1
 800ddb8:	e7e7      	b.n	800dd8a <_raise_r+0x12>
 800ddba:	2100      	movs	r1, #0
 800ddbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	4798      	blx	r3
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	e7e0      	b.n	800dd8a <_raise_r+0x12>

0800ddc8 <raise>:
 800ddc8:	4b02      	ldr	r3, [pc, #8]	@ (800ddd4 <raise+0xc>)
 800ddca:	4601      	mov	r1, r0
 800ddcc:	6818      	ldr	r0, [r3, #0]
 800ddce:	f7ff bfd3 	b.w	800dd78 <_raise_r>
 800ddd2:	bf00      	nop
 800ddd4:	20000044 	.word	0x20000044

0800ddd8 <_kill_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	4d07      	ldr	r5, [pc, #28]	@ (800ddf8 <_kill_r+0x20>)
 800dddc:	2300      	movs	r3, #0
 800ddde:	4604      	mov	r4, r0
 800dde0:	4608      	mov	r0, r1
 800dde2:	4611      	mov	r1, r2
 800dde4:	602b      	str	r3, [r5, #0]
 800dde6:	f7f5 fe4b 	bl	8003a80 <_kill>
 800ddea:	1c43      	adds	r3, r0, #1
 800ddec:	d102      	bne.n	800ddf4 <_kill_r+0x1c>
 800ddee:	682b      	ldr	r3, [r5, #0]
 800ddf0:	b103      	cbz	r3, 800ddf4 <_kill_r+0x1c>
 800ddf2:	6023      	str	r3, [r4, #0]
 800ddf4:	bd38      	pop	{r3, r4, r5, pc}
 800ddf6:	bf00      	nop
 800ddf8:	20000a8c 	.word	0x20000a8c

0800ddfc <_getpid_r>:
 800ddfc:	f7f5 be38 	b.w	8003a70 <_getpid>

0800de00 <__swhatbuf_r>:
 800de00:	b570      	push	{r4, r5, r6, lr}
 800de02:	460c      	mov	r4, r1
 800de04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de08:	2900      	cmp	r1, #0
 800de0a:	b096      	sub	sp, #88	@ 0x58
 800de0c:	4615      	mov	r5, r2
 800de0e:	461e      	mov	r6, r3
 800de10:	da0d      	bge.n	800de2e <__swhatbuf_r+0x2e>
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800de18:	f04f 0100 	mov.w	r1, #0
 800de1c:	bf14      	ite	ne
 800de1e:	2340      	movne	r3, #64	@ 0x40
 800de20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de24:	2000      	movs	r0, #0
 800de26:	6031      	str	r1, [r6, #0]
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	b016      	add	sp, #88	@ 0x58
 800de2c:	bd70      	pop	{r4, r5, r6, pc}
 800de2e:	466a      	mov	r2, sp
 800de30:	f000 f848 	bl	800dec4 <_fstat_r>
 800de34:	2800      	cmp	r0, #0
 800de36:	dbec      	blt.n	800de12 <__swhatbuf_r+0x12>
 800de38:	9901      	ldr	r1, [sp, #4]
 800de3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de42:	4259      	negs	r1, r3
 800de44:	4159      	adcs	r1, r3
 800de46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de4a:	e7eb      	b.n	800de24 <__swhatbuf_r+0x24>

0800de4c <__smakebuf_r>:
 800de4c:	898b      	ldrh	r3, [r1, #12]
 800de4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de50:	079d      	lsls	r5, r3, #30
 800de52:	4606      	mov	r6, r0
 800de54:	460c      	mov	r4, r1
 800de56:	d507      	bpl.n	800de68 <__smakebuf_r+0x1c>
 800de58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	6123      	str	r3, [r4, #16]
 800de60:	2301      	movs	r3, #1
 800de62:	6163      	str	r3, [r4, #20]
 800de64:	b003      	add	sp, #12
 800de66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de68:	ab01      	add	r3, sp, #4
 800de6a:	466a      	mov	r2, sp
 800de6c:	f7ff ffc8 	bl	800de00 <__swhatbuf_r>
 800de70:	9f00      	ldr	r7, [sp, #0]
 800de72:	4605      	mov	r5, r0
 800de74:	4639      	mov	r1, r7
 800de76:	4630      	mov	r0, r6
 800de78:	f7fe fec6 	bl	800cc08 <_malloc_r>
 800de7c:	b948      	cbnz	r0, 800de92 <__smakebuf_r+0x46>
 800de7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de82:	059a      	lsls	r2, r3, #22
 800de84:	d4ee      	bmi.n	800de64 <__smakebuf_r+0x18>
 800de86:	f023 0303 	bic.w	r3, r3, #3
 800de8a:	f043 0302 	orr.w	r3, r3, #2
 800de8e:	81a3      	strh	r3, [r4, #12]
 800de90:	e7e2      	b.n	800de58 <__smakebuf_r+0xc>
 800de92:	89a3      	ldrh	r3, [r4, #12]
 800de94:	6020      	str	r0, [r4, #0]
 800de96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de9a:	81a3      	strh	r3, [r4, #12]
 800de9c:	9b01      	ldr	r3, [sp, #4]
 800de9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dea2:	b15b      	cbz	r3, 800debc <__smakebuf_r+0x70>
 800dea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dea8:	4630      	mov	r0, r6
 800deaa:	f000 f81d 	bl	800dee8 <_isatty_r>
 800deae:	b128      	cbz	r0, 800debc <__smakebuf_r+0x70>
 800deb0:	89a3      	ldrh	r3, [r4, #12]
 800deb2:	f023 0303 	bic.w	r3, r3, #3
 800deb6:	f043 0301 	orr.w	r3, r3, #1
 800deba:	81a3      	strh	r3, [r4, #12]
 800debc:	89a3      	ldrh	r3, [r4, #12]
 800debe:	431d      	orrs	r5, r3
 800dec0:	81a5      	strh	r5, [r4, #12]
 800dec2:	e7cf      	b.n	800de64 <__smakebuf_r+0x18>

0800dec4 <_fstat_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4d07      	ldr	r5, [pc, #28]	@ (800dee4 <_fstat_r+0x20>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	4611      	mov	r1, r2
 800ded0:	602b      	str	r3, [r5, #0]
 800ded2:	f7f5 fe35 	bl	8003b40 <_fstat>
 800ded6:	1c43      	adds	r3, r0, #1
 800ded8:	d102      	bne.n	800dee0 <_fstat_r+0x1c>
 800deda:	682b      	ldr	r3, [r5, #0]
 800dedc:	b103      	cbz	r3, 800dee0 <_fstat_r+0x1c>
 800dede:	6023      	str	r3, [r4, #0]
 800dee0:	bd38      	pop	{r3, r4, r5, pc}
 800dee2:	bf00      	nop
 800dee4:	20000a8c 	.word	0x20000a8c

0800dee8 <_isatty_r>:
 800dee8:	b538      	push	{r3, r4, r5, lr}
 800deea:	4d06      	ldr	r5, [pc, #24]	@ (800df04 <_isatty_r+0x1c>)
 800deec:	2300      	movs	r3, #0
 800deee:	4604      	mov	r4, r0
 800def0:	4608      	mov	r0, r1
 800def2:	602b      	str	r3, [r5, #0]
 800def4:	f7f5 fe34 	bl	8003b60 <_isatty>
 800def8:	1c43      	adds	r3, r0, #1
 800defa:	d102      	bne.n	800df02 <_isatty_r+0x1a>
 800defc:	682b      	ldr	r3, [r5, #0]
 800defe:	b103      	cbz	r3, 800df02 <_isatty_r+0x1a>
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	bd38      	pop	{r3, r4, r5, pc}
 800df04:	20000a8c 	.word	0x20000a8c

0800df08 <_init>:
 800df08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0a:	bf00      	nop
 800df0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df0e:	bc08      	pop	{r3}
 800df10:	469e      	mov	lr, r3
 800df12:	4770      	bx	lr

0800df14 <_fini>:
 800df14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df16:	bf00      	nop
 800df18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df1a:	bc08      	pop	{r3}
 800df1c:	469e      	mov	lr, r3
 800df1e:	4770      	bx	lr
